<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>0.概述</title>
      <link href="/2022/08/10/0-gai-shu/"/>
      <url>/2022/08/10/0-gai-shu/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/godot-yin-qing/5.shu-xue-ku/"/>
      <url>/2022/08/10/godot-yin-qing/5.shu-xue-ku/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/godot-yin-qing/4.othercore/"/>
      <url>/2022/08/10/godot-yin-qing/4.othercore/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>ustirng</li><li>NodePath</li><li>rid</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/godot-yin-qing/3.rong-qi-shu-ju-jie-gou-jie-kou/"/>
      <url>/2022/08/10/godot-yin-qing/3.rong-qi-shu-ju-jie-gou-jie-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="容器">容器</h2><blockquote><ul><li>vector动态数组</li><li>table</li><li>set</li><li>map</li><li>array</li><li>dictionary</li></ul></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/godot-yin-qing/2.yuan-ma-fen-xi-os-zhi-nei-cun/"/>
      <url>/2022/08/10/godot-yin-qing/2.yuan-ma-fen-xi-os-zhi-nei-cun/</url>
      
        <content type="html"><![CDATA[<h2 id="os1之内存memory篇">OS(1)之内存Memory篇</h2><hr><p>title: 内存Memory<br>date: 2020-09-25 19:07:05<br>categories: 3d引擎<br>mathjax: false</p><hr><blockquote><p>主要文件 <a href="">core/os/memory.h</a> 、<a href="">core/os/memory.cpp</a></p><ol type="1"><li><p>封装原始的malloc、free、new、delete。好处是添加自定义引用头和内存统计分析等。</p></li><li><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>   <span class="co">//c 风格接口</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>   memalloc<span class="op">()</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>   memrealloc<span class="op">()</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   memfree<span class="op">()</span></span></code></pre></div></li><li><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//c++ 风格接口</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>memnew<span class="op">(</span> Class <span class="op">/</span> Class<span class="op">(</span>args<span class="op">)</span> <span class="op">)</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>memdelete<span class="op">(</span> instance <span class="op">)</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>memnew_arr<span class="op">(</span> Class <span class="op">,</span> amount <span class="op">)</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>memdelete_arr<span class="op">(</span> pointer to array <span class="op">)</span></span></code></pre></div></li><li><p>todo</p><ol type="1"><li>原子操作 加减。</li><li>动态内存 poolvector&lt;&gt;模板</li></ol></li></ol></blockquote><ol type="1"><li><p>使用类<code>Memory</code>静态成员，全局唯一统计和调用。</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Memory <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    Memory<span class="op">();</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef DEBUG_ENABLED</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">uint64_t</span> mem_usage<span class="op">;</span> <span class="co">// 内存使用量，申请和释放进行统计</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">uint64_t</span> max_usage<span class="op">;</span> <span class="co">//</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">uint64_t</span> alloc_count<span class="op">;</span><span class="co">//内存块个数，申请和释放进行统计</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span><span class="op">:</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">//封装原始申请函数，debug or p_pad_align为true 时进行统计</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">void</span> <span class="op">*</span>alloc_static<span class="op">(</span><span class="dt">size_t</span> p_bytes<span class="op">,</span> <span class="dt">bool</span> p_pad_align <span class="op">=</span> <span class="kw">false</span><span class="op">);</span> </span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">//封装原始申请函数，debug or p_pad_align为true 时进行统计</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">void</span> <span class="op">*</span>realloc_static<span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_memory<span class="op">,</span> <span class="dt">size_t</span> p_bytes<span class="op">,</span> <span class="dt">bool</span> p_pad_align <span class="op">=</span> <span class="kw">false</span><span class="op">);</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">//封装原始释放函数，debug or p_pad_align为true 时进行统计</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">void</span> free_static<span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_ptr<span class="op">,</span> <span class="dt">bool</span> p_pad_align <span class="op">=</span> <span class="kw">false</span><span class="op">);</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">uint64_t</span> get_mem_available<span class="op">();</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">uint64_t</span> get_mem_usage<span class="op">();</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="at">static</span> <span class="dt">uint64_t</span> get_mem_max_usage<span class="op">();</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div></li><li><p>Memory 实现</p><p>``` cpp</p><h1 id="ifdef-debug_enabled-debug-情况才有用并静态初始化">ifdefDEBUG_ENABLED // debug 情况才有用并静态初始化</h1><p>uint64_t Memory::mem_usage = 0;<br>uint64_t Memory::max_usage = 0;</p><h1 id="endif">endif</h1><p>uint64_t Memory::alloc_count = 0;</p><p>void *Memory::alloc_static(size_t p_bytes, bool p_pad_align) { #ifdef DEBUG_ENABLED bool prepad = true;</p><h1 id="else">else</h1><p>bool prepad = p_pad_align; # endif</p><p>//头部固定 16字节（可以容纳 四个个int32， 两个个int64） void *mem =malloc(p_bytes + (prepad ? PAD_ALIGN : 0));</p><p>//malloc 失败判断 ERR_FAIL_COND_V(!mem, nullptr);</p><p>//递增使用的内存块，volatile关键字限制，保证准确性，cpu缓存atomic_increment(&amp;alloc_count);</p><p>if (prepad) { //前8字节放用户使用的大小。 uint64_t <em>s = (uint64_t</em>)mem; <em>s = p_bytes; //内存头 s8 ， uint8_t 一个字节+PAD_ALIGN（16字节），偏移到用户地址，return uint8_t </em>s8 = (uint8_t*)mem;<br># ifdef DEBUG_ENABLED<br>//统计内存总字节数 atomic_add(&amp;mem_usage, p_bytes); //原子交换 todoatomic_exchange_if_greater(&amp;max_usage, mem_usage); # endif return s8+ PAD_ALIGN; } else { return mem; }</p><p>void _Memory::realloc_static(void _p_memory, size_t p_bytes, boolp_pad_align) { if (p_memory == nullptr) { return alloc_static(p_bytes,p_pad_align); } uint8_t mem = (uint8_t )p_memory;</p><p>#ifdef DEBUG_ENABLED bool prepad = true; #else bool prepad =p_pad_align; #endif if (prepad) { mem -= PAD_ALIGN; uint64_t s =(uint64_t )mem; #ifdef DEBUG_ENABLED if (p_bytes &gt; <em>s) {atomic_add(&amp;mem_usage, p_bytes - </em>s);atomic_exchange_if_greater(&amp;max_usage, mem_usage); } else {atomic_sub(&amp;mem_usage, <em>s - p_bytes); } #endif if (p_bytes == 0){ free(mem); return nullptr; } else { </em>s = p_bytes; mem = (uint8_t<em>)realloc(mem, p_bytes + PAD_ALIGN); ERR_FAIL_COND_V(!mem, nullptr);s = (uint64_t </em>)mem; <em>s = p_bytes; return mem + PAD_ALIGN; } }else { mem = (uint8_t </em>)realloc(mem, p_bytes); ERR_FAIL_COND_V(mem== nullptr &amp;&amp; p_bytes &gt; 0, nullptr); return mem; }<br>}</p></li></ol><p>void Memory::free_static(void *p_ptr, bool p_pad_align) {<br>ERR_FAIL_COND(p_ptr == nullptr);</p><pre><code>    uint8_t _mem = (uint8_t _)p_ptr;  # ifdef DEBUG_ENABLED  bool prepad = true;  # else  bool prepad = p_pad_align;  # endif  // 原子减 内存块数量       atomic_decrement(&amp;alloc_count);  if (prepad) {     // 跳到mem 原始头，进行free     mem -= PAD_ALIGN;  # ifdef DEBUG_ENABLED     uint64_t *s = (uint64_t *)mem;     // 原子减 内存字节数     atomic_sub(&amp;mem_usage, *s);  # endif     free(mem);  } else {      free(mem);    }}```</code></pre><ol start="3" type="1"><li><p>默认内存申请器</p><pre><code>``` cpp//简单的包一层的申请和释放器class DefaultAllocator {public:    _FORCE_INLINE_ static void *alloc(size_t p_memory) { return Memory::alloc_static(p_memory, false); }    _FORCE_INLINE_ static void free(void *p_ptr) { Memory::free_static(p_ptr, false); }};```</code></pre></li><li><p>重载 new、delete、new []、delete[], 目的是封装，最终都统一使用Memory'静态方法，调用malloc, free.</p><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">//1. new重载1</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span><span class="kw">operator</span> <span class="kw">new</span><span class="op">(</span><span class="dt">size_t</span> p_size<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">);</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span><span class="kw">operator</span> <span class="kw">new</span><span class="op">(</span><span class="dt">size_t</span> p_size<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">)</span> <span class="op">{</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> Memory<span class="op">::</span>alloc_static<span class="op">(</span>p_size<span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="co">//1. new重载2</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span><span class="kw">operator</span> <span class="kw">new</span><span class="op">(</span><span class="dt">size_t</span> p_size<span class="op">,</span> <span class="dt">void</span> <span class="op">*(*</span>p_allocfunc<span class="op">)(</span><span class="dt">size_t</span> p_size<span class="op">));</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span><span class="kw">operator</span> <span class="kw">new</span><span class="op">(</span><span class="dt">size_t</span> p_size<span class="op">,</span> <span class="dt">void</span> <span class="op">*(*</span>p_allocfunc<span class="op">)(</span><span class="dt">size_t</span> p_size<span class="op">))</span> <span class="op">{</span></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> p_allocfunc<span class="op">(</span>p_size<span class="op">);</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a><span class="co">//1. new重载3 暂时无用</span></span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="op">*</span><span class="kw">operator</span> <span class="kw">new</span><span class="op">(</span><span class="dt">size_t</span> p_size<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>p_pointer<span class="op">,</span> <span class="dt">size_t</span> check<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">);</span> </span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>_ALWAYS_INLINE_ <span class="dt">void</span> <span class="op">*</span><span class="kw">operator</span> <span class="kw">new</span><span class="op">(</span><span class="dt">size_t</span> p_size<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>p_pointer<span class="op">,</span> <span class="dt">size_t</span> check<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">)</span> <span class="op">{</span></span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">//void *failptr=0;</span></span><span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>  <span class="co">//ERR_FAIL_COND_V( check &lt; p_size , failptr); /** bug, or strange compiler, most likely */</span></span><span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> p_pointer<span class="op">;</span></span><span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a><span class="co">// 2. delete 重载1， 目的是限制直接使用delete, 使用统一的释放方法。</span></span><span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="kw">operator</span> <span class="kw">delete</span><span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_mem<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">);</span></span><span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="kw">operator</span> <span class="kw">delete</span><span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_mem<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">)</span> <span class="op">{</span></span><span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>  CRASH_NOW_MSG<span class="op">(</span><span class="st">"Call to placement delete should not happen."</span><span class="op">);</span></span><span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-27"><a href="#cb6-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-28"><a href="#cb6-28" aria-hidden="true" tabindex="-1"></a><span class="co">//2. delete 重载2， 目的是限制直接使用delete, 使用统一的释放方法。</span></span><span id="cb6-29"><a href="#cb6-29" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="kw">operator</span> <span class="kw">delete</span><span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_mem<span class="op">,</span> <span class="dt">void</span> <span class="op">*(*</span>p_allocfunc<span class="op">)(</span><span class="dt">size_t</span> p_size<span class="op">));</span></span><span id="cb6-30"><a href="#cb6-30" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="kw">operator</span> <span class="kw">delete</span><span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_mem<span class="op">,</span> <span class="dt">void</span> <span class="op">*(*</span>p_allocfunc<span class="op">)(</span><span class="dt">size_t</span> p_size<span class="op">))</span> <span class="op">{</span></span><span id="cb6-31"><a href="#cb6-31" aria-hidden="true" tabindex="-1"></a>  CRASH_NOW_MSG<span class="op">(</span><span class="st">"Call to placement delete should not happen."</span><span class="op">);</span></span><span id="cb6-32"><a href="#cb6-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-33"><a href="#cb6-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-34"><a href="#cb6-34" aria-hidden="true" tabindex="-1"></a><span class="co">//2. delete 重载3， 目的是限制直接使用delete, 使用统一的释放方法。</span></span><span id="cb6-35"><a href="#cb6-35" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="kw">operator</span> <span class="kw">delete</span><span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_mem<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>p_pointer<span class="op">,</span> <span class="dt">size_t</span> check<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">);</span></span><span id="cb6-36"><a href="#cb6-36" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> <span class="kw">operator</span> <span class="kw">delete</span><span class="op">(</span><span class="dt">void</span> <span class="op">*</span>p_mem<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>p_pointer<span class="op">,</span> <span class="dt">size_t</span> check<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_description<span class="op">)</span> <span class="op">{</span></span><span id="cb6-37"><a href="#cb6-37" aria-hidden="true" tabindex="-1"></a>  CRASH_NOW_MSG<span class="op">(</span><span class="st">"Call to placement delete should not happen."</span><span class="op">);</span></span><span id="cb6-38"><a href="#cb6-38" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-39"><a href="#cb6-39" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-40"><a href="#cb6-40" aria-hidden="true" tabindex="-1"></a><span class="co">// 3. new[] 操作， 地址--&gt; 记录len到头部数据-&gt;for eles</span></span><span id="cb6-41"><a href="#cb6-41" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span></span><span id="cb6-42"><a href="#cb6-42" aria-hidden="true" tabindex="-1"></a>T <span class="op">*</span>memnew_arr_template<span class="op">(</span><span class="dt">size_t</span> p_elements<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>p_descr <span class="op">=</span> <span class="st">""</span><span class="op">)</span> <span class="op">{</span></span><span id="cb6-43"><a href="#cb6-43" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(</span>p_elements <span class="op">==</span> <span class="dv">0</span><span class="op">)</span> <span class="op">{</span></span><span id="cb6-44"><a href="#cb6-44" aria-hidden="true" tabindex="-1"></a>      <span class="cf">return</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb6-45"><a href="#cb6-45" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span><span id="cb6-46"><a href="#cb6-46" aria-hidden="true" tabindex="-1"></a>  <span class="co">/** overloading operator new[] cannot be done , because it may not return the real allocated address (it may pad the 'element count' before the actual array). Because of that, it must be done by hand. This is the</span></span><span id="cb6-47"><a href="#cb6-47" aria-hidden="true" tabindex="-1"></a><span class="co">  same strategy used by std::vector, and the Vector class, so it should be safe.*/</span></span><span id="cb6-48"><a href="#cb6-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-49"><a href="#cb6-49" aria-hidden="true" tabindex="-1"></a>  <span class="dt">size_t</span> len <span class="op">=</span> <span class="kw">sizeof</span><span class="op">(</span>T<span class="op">)</span> <span class="op">*</span> p_elements<span class="op">;</span></span><span id="cb6-50"><a href="#cb6-50" aria-hidden="true" tabindex="-1"></a>  <span class="dt">uint64_t</span> <span class="op">*</span>mem <span class="op">=</span> <span class="op">(</span><span class="dt">uint64_t</span> <span class="op">*)</span>Memory<span class="op">::</span>alloc_static<span class="op">(</span>len<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb6-51"><a href="#cb6-51" aria-hidden="true" tabindex="-1"></a>  T <span class="op">*</span>failptr <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span> <span class="co">//get rid of a warning</span></span><span id="cb6-52"><a href="#cb6-52" aria-hidden="true" tabindex="-1"></a>  ERR_FAIL_COND_V<span class="op">(!</span>mem<span class="op">,</span> failptr<span class="op">);</span></span><span id="cb6-53"><a href="#cb6-53" aria-hidden="true" tabindex="-1"></a>  <span class="op">*(</span>mem <span class="op">-</span> <span class="dv">1</span><span class="op">)</span> <span class="op">=</span> p_elements<span class="op">;</span></span><span id="cb6-54"><a href="#cb6-54" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-55"><a href="#cb6-55" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span><span class="fu">__has_trivial_constructor</span><span class="op">(</span>T<span class="op">))</span> <span class="op">{</span></span><span id="cb6-56"><a href="#cb6-56" aria-hidden="true" tabindex="-1"></a>      T <span class="op">*</span>elems <span class="op">=</span> <span class="op">(</span>T <span class="op">*)</span>mem<span class="op">;</span></span><span id="cb6-57"><a href="#cb6-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-58"><a href="#cb6-58" aria-hidden="true" tabindex="-1"></a>      <span class="co">/* call operator new */</span></span><span id="cb6-59"><a href="#cb6-59" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">size_t</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> p_elements<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span><span id="cb6-60"><a href="#cb6-60" aria-hidden="true" tabindex="-1"></a>          <span class="kw">new</span> <span class="op">(&amp;</span>elems<span class="op">[</span>i<span class="op">],</span> <span class="kw">sizeof</span><span class="op">(</span>T<span class="op">),</span> p_descr<span class="op">)</span> T<span class="op">;</span></span><span id="cb6-61"><a href="#cb6-61" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span><span id="cb6-62"><a href="#cb6-62" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span><span id="cb6-63"><a href="#cb6-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-64"><a href="#cb6-64" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> <span class="op">(</span>T <span class="op">*)</span>mem<span class="op">;</span></span><span id="cb6-65"><a href="#cb6-65" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb6-66"><a href="#cb6-66" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-67"><a href="#cb6-67" aria-hidden="true" tabindex="-1"></a><span class="co">// 4. delete []，new[] 逆向顺序。</span></span><span id="cb6-68"><a href="#cb6-68" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">typename</span> T<span class="op">&gt;</span></span><span id="cb6-69"><a href="#cb6-69" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> memdelete_arr<span class="op">(</span>T <span class="op">*</span>p_class<span class="op">)</span> <span class="op">{</span></span><span id="cb6-70"><a href="#cb6-70" aria-hidden="true" tabindex="-1"></a>  <span class="dt">uint64_t</span> <span class="op">*</span>ptr <span class="op">=</span> <span class="op">(</span><span class="dt">uint64_t</span> <span class="op">*)</span>p_class<span class="op">;</span></span><span id="cb6-71"><a href="#cb6-71" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-72"><a href="#cb6-72" aria-hidden="true" tabindex="-1"></a>  <span class="cf">if</span> <span class="op">(!</span><span class="fu">__has_trivial_destructor</span><span class="op">(</span>T<span class="op">))</span> <span class="op">{</span></span><span id="cb6-73"><a href="#cb6-73" aria-hidden="true" tabindex="-1"></a>      <span class="dt">uint64_t</span> elem_count <span class="op">=</span> <span class="op">*(</span>ptr <span class="op">-</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb6-74"><a href="#cb6-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-75"><a href="#cb6-75" aria-hidden="true" tabindex="-1"></a>      <span class="cf">for</span> <span class="op">(</span><span class="dt">uint64_t</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> elem_count<span class="op">;</span> i<span class="op">++)</span> <span class="op">{</span></span><span id="cb6-76"><a href="#cb6-76" aria-hidden="true" tabindex="-1"></a>          p_class<span class="op">[</span>i<span class="op">].~</span>T<span class="op">();</span></span><span id="cb6-77"><a href="#cb6-77" aria-hidden="true" tabindex="-1"></a>      <span class="op">}</span></span><span id="cb6-78"><a href="#cb6-78" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span><span id="cb6-79"><a href="#cb6-79" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-80"><a href="#cb6-80" aria-hidden="true" tabindex="-1"></a>  Memory<span class="op">::</span>free_static<span class="op">(</span>ptr<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb6-81"><a href="#cb6-81" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p>统一使用接口</p><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">//统一接口 memalloc、memrealloc、memfree</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define memalloc</span><span class="op">(</span><span class="va">m_size</span><span class="op">)</span><span class="pp"> </span>Memory<span class="op">::</span>alloc_static<span class="op">(</span><span class="va">m_size</span><span class="op">)</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#define memrealloc</span><span class="op">(</span><span class="va">m_mem</span><span class="op">,</span><span class="pp"> </span><span class="va">m_size</span><span class="op">)</span><span class="pp"> </span>Memory<span class="op">::</span>realloc_static<span class="op">(</span><span class="va">m_mem</span><span class="op">,</span><span class="pp"> </span><span class="va">m_size</span><span class="op">)</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define memfree</span><span class="op">(</span><span class="va">m_size</span><span class="op">)</span><span class="pp"> </span>Memory<span class="op">::</span>free_static<span class="op">(</span><span class="va">m_size</span><span class="op">)</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="co">// memdelete，prehandler(目前空实现)--&gt; 析构函数 --&gt; 统一free接口</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> T<span class="op">&gt;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> memdelete<span class="op">(</span>T <span class="op">*</span>p_class<span class="op">)</span> <span class="op">{</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>predelete_handler<span class="op">(</span>p_class<span class="op">))</span> <span class="op">{</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span> <span class="co">// doesn't want to be deleted</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span><span class="fu">__has_trivial_destructor</span><span class="op">(</span>T<span class="op">))</span> <span class="op">{</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        p_class<span class="op">-&gt;~</span>T<span class="op">();</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    Memory<span class="op">::</span>free_static<span class="op">(</span>p_class<span class="op">,</span> <span class="kw">false</span><span class="op">);</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="co">//指定内存申请器进行释放。</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> T<span class="op">,</span> <span class="kw">class</span> A<span class="op">&gt;</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> memdelete_allocator<span class="op">(</span>T <span class="op">*</span>p_class<span class="op">)</span> <span class="op">{</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>predelete_handler<span class="op">(</span>p_class<span class="op">))</span> <span class="op">{</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span> <span class="co">// doesn't want to be deleted</span></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span><span class="fu">__has_trivial_destructor</span><span class="op">(</span>T<span class="op">))</span> <span class="op">{</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        p_class<span class="op">-&gt;~</span>T<span class="op">();</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>    A<span class="op">::</span>free<span class="op">(</span>p_class<span class="op">);</span></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="kw">template</span> <span class="op">&lt;</span><span class="kw">class</span> T<span class="op">,</span> <span class="kw">class</span> A<span class="op">&gt;</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> memdelete_allocator<span class="op">(</span>T <span class="op">*</span>p_class<span class="op">)</span> <span class="op">{</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>predelete_handler<span class="op">(</span>p_class<span class="op">))</span> <span class="op">{</span></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span><span class="op">;</span> <span class="co">// doesn't want to be deleted</span></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span><span class="fu">__has_trivial_destructor</span><span class="op">(</span>T<span class="op">))</span> <span class="op">{</span></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>        p_class<span class="op">-&gt;~</span>T<span class="op">();</span></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>    A<span class="op">::</span>free<span class="op">(</span>p_class<span class="op">);</span></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/godot-yin-qing/1.yuan-ma-gou-jian/"/>
      <url>/2022/08/10/godot-yin-qing/1.yuan-ma-gou-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="构建godot">构建godot</h2><blockquote><p>godot 使用 <a href="https://scons.org/">scons系统构建</a>，支持多平台。</p></blockquote><ol type="1"><li><p>环境准备 (Windows)</p><ol type="1"><li><a href="https://www.python.org/downloads/release/python-385/">Python3.5+</a></li><li><a href="https://scons.org/">SCons</a></li><li><a href="https://yasm.tortall.net/">yasm</a> 可选</li></ol></li><li><p>检查环境</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">python</span> <span class="at">--version</span> <span class="co">#检查python</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="ex">scons</span> <span class="at">--version</span>  <span class="co">#检查scons</span></span></code></pre></div></li><li><p>安装 vs2017 or vs2019, 并选择 安装c++开发环境。</p></li><li><p>下载 <a href="https://github.com/godotengine/godot">Godot源码</a>,网速慢的话可以使用 <a href="https://gitee.com/">gitee仓库</a>搜索Godot。</p></li><li><p>编译Godot编辑器</p><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="bu">cd</span> c:/godot  <span class="co">#进入自己的文件目录</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="co">#以下二选一</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="ex">scons</span> <span class="at">-j6</span> p=windows  <span class="co"># 1. 直接生成</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="ex">scons</span> <span class="at">-j6</span> p=windows vsproj=yes <span class="co">#2. 生成vs，可以通过vs生成。</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/c-yu-yan-cpp/2.hong-ding-yi/"/>
      <url>/2022/08/10/c-yu-yan-cpp/2.hong-ding-yi/</url>
      
        <content type="html"><![CDATA[<pre><code>UNIX   _unix       or         _unix_Linux   _linux      or        _linux_Windows32       _WIN32Windows64       _WIN64IOS              __APPLE__android        __ANDROID__GCC                         __GNUC__Visual C++               _MSC_VERBorland C++            __BORLANDC__</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/c-yu-yan-cpp/1.jin-cheng-jian-tong-xin/"/>
      <url>/2022/08/10/c-yu-yan-cpp/1.jin-cheng-jian-tong-xin/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://www.cnblogs.com/zgq0/p/8780893.html">进程间通信</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/android/5.profileapk/"/>
      <url>/2022/08/10/android/5.profileapk/</url>
      
        <content type="html"><![CDATA[<h1 id="性能分析">性能分析</h1><p>如果一个应用程序<code>响应缓慢</code>、<code>动画不稳定</code>、<code>死机</code>、<code>崩溃</code>或<code>消耗大量电力</code>，那么它就被认为是性能差的。为了避免这些性能问题，可以使用本文中列出的分析和基准测试工具来识别应用程序在哪些地方低效地使用了资源，如<strong>CPU、内存、图形、网络和设备电池</strong>。</p><h2 id="profiler">Profiler</h2><blockquote><p>Android Studio 3.0 及更高版本中的 Android Profiler 取代了 AndroidMonitor 工具。Android Profiler 工具可提供实时数据，帮助您了解应用的CPU、内存、网络和电池资源使用情况。 Android Profiler 与 Android 5.0（API级别 21）及更高版本兼容。</p></blockquote><p>View &gt; Tool Windows &gt; Profiler，或点击工具栏中的 Profile 图标。如果 Select Deployment Target对话框提示，请选择要在哪个设备上分析应用的性能。如果您通过 USB连接了某个设备但系统未列出该设备，请确保您<code>已启用 USB 调试</code>。<strong>如果您使用的是Android 模拟器或已取得 root 权限的设备，Android Profiler将列出所有正在运行的进程，即使这些进程可能无法调试也会列出</strong>。当您启动可调试的应用时，默认情况下会选择该进程。</p><p>Android Profiler 会持续收集性能分析数据，直到您断开设备连接或点击 EndSession。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/android/4.googleandroid/"/>
      <url>/2022/08/10/android/4.googleandroid/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://developer.android.com/google/play/expansion-files#java">Google分包</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/android/3.apk-fan-bian-yi/"/>
      <url>/2022/08/10/android/3.apk-fan-bian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="apk反编译">Apk反编译</h2><ol type="1"><li><a href="https://cloud.tencent.com/developer/article/1004543">apktool</a></li><li><a href="https://bitbucket.org/JesusFreke/smali/downloads/">smali</a>、<a href="https://github.com/JesusFreke/smalidea">smali github</a></li><li><a href="https://www.52pojie.cn/thread-648530-1-1.html">android反编译课程</a></li><li><a href="https://github.com/0xd4d/dnSpy/releases">dnSpy</a></li><li><a href="https://blog.csdn.net/lanyang123456/article/details/56497264">so反编译到c代码</a></li><li><a href="https://blog.csdn.net/zplxl99/article/details/80376298">Android so详解</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/android/2.android/"/>
      <url>/2022/08/10/android/2.android/</url>
      
        <content type="html"><![CDATA[<h2 id="android相关">Android相关</h2><ol type="1"><li><a href="http://hukai.me/android-training-course-in-chinese/index.html?utm_source=androiddevtools&amp;utm_medium=website">Android官方培训课程</a></li><li><a href="https://blog.csdn.net/strivero/article/details/53169679">AndroidJar开发</a></li><li><a href="https://www.cnblogs.com/pbq-dream/p/5364614.html">Android保存图片到相册</a></li><li><a href="https://docs.oracle.com/javase/8/docs/">Java 文档</a>、<a href="http://jcs.mobile-utopia.com/">Java 源码</a>、<a href="http://androidxref.com/8.0.0_r4/xref/frameworks/">Android源码</a></li><li><a href="https://blog.csdn.net/supernovaExp/article/details/78335363">native和Java调用</a></li><li><a href="https://blog.csdn.net/jlq_diligence/article/details/88884945">安装Java没有jre解决</a></li><li><a href="https://www.cnblogs.com/kuku19940613/p/10861460.html">aapt查看apk信息</a></li><li><a href="https://developer.android.com/studio/build/multidex#mdex-gradle">方法超过64k</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/android/1.adb/"/>
      <url>/2022/08/10/android/1.adb/</url>
      
        <content type="html"><![CDATA[<h2 id="adb相关操作">ADB相关操作</h2><blockquote><p>adb shell</p><p>​ 可选参数 -s 设备id, 多个设备都连接时很有用。</p></blockquote><ol type="1"><li><p>连接设备</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> adb connect ip</span></code></pre></div></li><li><p>查看连接的设备</p><pre><code>adb devices</code></pre></li><li><p>安装卸载包</p><pre><code>adb install/uninstall 包路径</code></pre></li><li><p>查看已经安装的包</p><pre><code>adb shell pm list packages</code></pre></li><li><p>传输文件</p><pre><code>adb shell pull 手机文件路径 本地路径adb shell push 本地文件路径 手机路径</code></pre></li><li><p>截屏</p><ol type="1"><li><p>截屏保存在手机</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> adb shell screencap <span class="at">-p</span> /sdcard/图片名称.png <span class="co">#路径自己起</span></span></code></pre></div></li><li><p>截屏保存在链接的电脑</p><div class="sourceCode" id="cb7"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="ex">$</span> adb exec-out screencap <span class="at">-p</span> <span class="op">&gt;</span> C:\Users\Administrator\Desktop\face\aaa.png <span class="co">#路径自己起</span></span></code></pre></div></li></ol></li><li><p>录屏</p><blockquote><p>adb shell screenrecord /sdcard/video.mp4</p></blockquote><ol type="1"><li>--size 1280*720 尺寸</li><li>--time-limit 200 时长限制</li><li>-bit-rate 500000 码率 单位大小</li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/yan-se-kong-jian/readme/"/>
      <url>/2022/08/10/yan-se-kong-jian/readme/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/yan-se-kong-jian/2.gamma-zhi-de-li-jie/"/>
      <url>/2022/08/10/yan-se-kong-jian/2.gamma-zhi-de-li-jie/</url>
      
        <content type="html"><![CDATA[<h1 id="gamma值的理解">Gamma值的理解</h1><h2 id="什么是gamma">什么是Gamma</h2><p>以前在CRT和早期LCD监视器中的Gamma与电压直接相关，是在显示器上准确再现图像的重要因素。在当前的LCD监视器中，Gamma可以被认为是在观看显示器时，捕获的数据的亮度（输入）与如何影响人眼对颜色（输出）的总体感知之间的关系的调节器。</p><p>从技术意义上讲，它是通过像素值中的颜色阴影平衡来校正图像颜色的亮度。像素的值介于0（黑色）到255（白色）之间，其间具有不同的灰度。我们的正常视觉（不是过暗或非常明亮的条件）对暗色调的变化更敏感，并且由于图像的捕捉过程，颜色可能被误传，由于我们从原始图像被捕获时感知亮度和亮度的方式不同。我们的眼睛以不成比例的方式捕捉亮度，例如，如果相机在极亮的环境中拍摄图像，我们的眼睛会感觉到光线只是亮度的一小部分。如果图像在没有伽马校正的情况下被处理并显示在桌面上，则用户将其视为褪色或太亮。<img src="images/Gamma-eye-camera.png" alt="输入亮度和人眼感受对比图"></p><h3 id="广义的gamma值">广义的Gamma值</h3><p>Gamma值的广义定义就是输入值和输出值的Gamma幂指数关系，用来补偿人眼对自然亮度的非线性感知。</p><p><img src="images/gamma_io.png" alt="输入和输出的关系可表达为：输出 = 输入gamma">Gamma=1，斜45°直线，不校正，输出=输入；Gamma大于1，曲线下压，输出值小于输入值；Gamma小于1，曲线上拱，输出值大于输入值。</p><h3 id="不同gamma值的图片">不同Gamma值的图片</h3><ul><li><p>gamma1.0 <img src="images/Gamma-eye10.jpg" alt="gamma1.0"></p></li><li><p>gamma1.8 <img src="images/Gamma-eye18.jpg" alt="gamma1.8"></p></li><li><p>gamma2.2 <img src="images/Gamma-eye22.jpg" alt="gamma2.2"></p></li><li><p>gamma4.0 <img src="images/Gamma-eye40.jpg" alt="gamma4.0"></p></li></ul><p>将此范围应用于颜色（RGB）时，可以在各种亮度级别生成颜色。值为192的红色像素将是可能亮度的四分之三，而值为10的红色像素是非常暗的，需要进行Gamma校正以响应人类视觉的特性，以产生真实的颜色。我们的眼睛以不成比例的方式捕捉亮度，例如，如果摄像机捕获图像并且它非常明亮，我们将感知光线只是亮度的一小部分。如果图像在没有伽马校正的情况下被处理并显示在桌面上，则用户看到的是太亮的图像。由于亮度不平衡，需要使用Gamma平衡输入关系以匹配桌面输出，从而创建逼真的颜色，Gamma曲线调整成为专业显示器生产的新规范。</p><p>目前<strong>Gamma 2.2一直是Windows和Apple的标准（自Mac OS X v10.6Snow Leopard以来）</strong>。使用Gamma2.2的显示器可以产生几乎最佳的颜色。此级别为真彩色提供了最佳平衡，并被用作图形和视频专业人员的标准。</p><h2 id="为什么要将输出和输入做gamma运算">为什么要将输出和输入做Gamma运算？</h2><p>上面提到，Gamma为了解决人眼对自然亮度非线性感知的问题，其二是因为记录存储的有限性。举个栗子：一间黑屋子中，点亮了一只灯泡A，人眼会感觉照亮整间屋子，持续点亮第2个、第2个……灯泡后，人眼会感觉屋子逐渐变得明亮，此时再点亮第N+1个灯泡，其实人眼没有什么感觉甚至微乎其微，为什么？*亮度对人眼的刺激是非线性的，第1个和最后一个灯泡点亮对人眼的刺激感觉是不同的；*人眼感觉黑-&gt;白范围“有限”，灯泡可以无限，但感觉会趋于一个有限制值；</p><h3 id="分析">分析</h3><p>此时输入是灯泡的强度，输出是人眼的感觉，大自然中，感觉的差别阈限随原来刺激量的变化而变化，这是著名的韦伯定律，下图显示了自然界的线性增长的亮度和人心里感觉的灰介关系图：<img src="images/l_i6.jpg" alt="自然亮度和人感知的亮度">当物理亮度达到白色的20%左右的时候，人的心目中已经感受到中灰色（即0.5处）的概念。而剩下的一半高光区的灰阶，需要用白色80%的物理能量才能照亮成白色。根据输入和输出的关系，可确定此时的Gamma大约在1.8~2.5，而现在大多数用2.2。所以，GAMMA值的应用非常多，如图像的拍摄中的相机的GAMMA、图像显示中的显示器的GAMMA、图像输出中的打印机、印刷机等GAMMA等，不同设备的GAMMA描述的都是此设备的信号值对应的亮暗关系，而且，这些关系都是非线性的。</p><h2 id="显示器的gamma值">显示器的Gamma值</h2><p>显示器的Gamma值表示了输入信号的颜色值以及发光的亮度之间的关系，也就是输出时从黑到白的亮度过渡。同样，其也是非线性关系的。使用不同的Gamma值：1.0(线性响应)，1.8~2.2(较暗的图像)，3.0(过暗的图像)显示同一幅图像：<img src="images/l_i6.jpg" alt="同一幅图片的不同Gamma值">可见，较低的Gamma值(1.0)有一个较亮，较平稳的显示；而较高的Gamma值(2.2)有更高对比度的较暗的显示。现在显示器一般用8位深的RGB来记录数字图像，所以最大的数据存储量就是28* 28 * 28 =16,777,216，如果使用线性的方式进行存储自然中的亮度，那可能根本不够用。所以拍摄的图像先用GAMMA进行压缩，保留了大部分的中间和暗调细节，再通过GAMMA释放（校正）并显示，展示给人眼看见，保证了人眼在显示器上感觉和自然中相同。</p><h2 id="什么是gamma值为1.0线性响应">什么是Gamma值为1.0线性响应?</h2><p>对于采集设备，如相机或者扫描仪，Gamma为1.0的时候，图像不存在压缩和释放，直接将原自然高动态亮度1:1输出为高动态显示信号，如果不对图像进行GAMMA校正，整体图像会显得更亮，会失去更多的中间调和暗调，同时图像<code>文件的大小也会更大</code>。如我们熟知的RAW工作流程就是一种线性GAMMA流程。</p><h2 id="显示器的gamma值标准是多少">显示器的Gamma值标准是多少?</h2><p>GAMMA值没有标准，如果要正确的找到GAMMA的标准，只能通过每台显示器的调整GAMMA更适合人眼的感觉，即感觉白-黑之间的渐变平滑，而且中间灰处于0.5中间的位置，如下图（8位深的RGB编码模式下）：<img src="images/l_i6.jpg"></p><p>一般而言，显示器的GAMMA值会在1.8~2.5之间。由于最初的CRT显示器的GAMMA采用2.2，所以现在大部分显示器还是沿用2.2作为推荐的GAMMA值，但Mac中使用1.8。没有对与错，最正确的方法则是通过灰介自己找到最佳的GAMMA值。<img src="images/gamma_compare.jpg"></p><h2 id="打印机印刷机gamma值">打印机、印刷机Gamma值?</h2><p>流程中的所有设备都有它们自己独有的Gamma特性，这也是为什么用Gamma查找表(LUTs)来生成显示器的Gamma以匹配其它设备的Gamma。如专业的扫描仪的Gamma值一直都是1.0，这样可以在扫描过程中得到最大的线性响应，而便宜的扫描仪则使用较高的Gamma值来避免多余的暗调噪声。</p><p>对于胶印，GAMMA是CMYK比例和人眼的亮度刺激关系，也就是密度值大小，所以我们通常使用“网点扩大”或者“TVI”，而不是“Gamma”，但是两者同理。它是设备的阶调响应以及中间调的主要影响因素，这点与Gamma类似。印刷机的网点扩大有点像1.7，1.8的Gamma。但是实际的值取决于印刷机、纸张、油墨等。相关的因素比显示器的GAMMA校正多很多。</p><h2 id="印刷机gamma与显示器的gamma的比较">印刷机Gamma与显示器的Gamma的比较</h2><p>事实上，如果观察一幅印刷图像，你实际会看到低亮度和高光部分的压缩，因此，在曲线图上，印刷图像的色调曲线或Gamma曲线会呈现S形。<img src="images/press_monitor.jpg"><strong>显示器的Gamma曲线在端点只会沿着一个方向伸展，这取决于显示器的模拟状况。这就是为什么显示器上的图像一直比印刷图像呈现出更大的对比度的原因。</strong></p><!-- > 以前在CRT和早期LCD监视器中的Gamma与电压直接相关，是在显示器上准确再现图像的重要因素。在当前的LCD监视器中，Gamma可以被认为是在观看显示器时，捕获的数据的亮度（输入）与如何影响人眼对颜色（输出）的总体感知之间的关系的调节器。 -->]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/yan-se-kong-jian/1.unity-de-yan-se-kong-jian-guan-li-yu-zhuan-huan/"/>
      <url>/2022/08/10/yan-se-kong-jian/1.unity-de-yan-se-kong-jian-guan-li-yu-zhuan-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="unity的颜色空间管理与转换">Unity的颜色空间管理与转换</h1><blockquote><ol type="1"><li>纹理取消选中 sRGB (Color Texture)， 则可以绕过sRGB 采样</li><li>Unity光照计算都是在线性空间中</li><li>老版本的gui系统 贴图导入时不会移除其伽马校正。</li><li>可以在线性空间shader中手动进行gamma矫正。<strong>尽量使用内置函数,因为Unity处理了图片,参数之类的需要一致性</strong></li></ol></blockquote><h2 id="两种颜色空间的介绍">两种颜色空间的介绍</h2><blockquote><p>Unity引擎支持两种颜色空间: 伽马(Gamma) 和 线性(Liner)伽马颜色空间是<strong>历史悠久的标准格式</strong>，但线性颜色空间渲染可提供<strong>更精确的结果</strong>。</p></blockquote><p><img src="images/LinearLighting-LinearGradients.png">由于历史原因，监视器和显示器具有相同的特性。向监视器发送线性信号会导致看起来像上图右侧的渐变，人眼观察感觉是错误的。为了弥补这一点，需要发送经校正的信号来确保监视器能够呈现出看起来自然的图像。这种校正称为伽马校正。</p><p><strong>Unity伽马和线性颜色空间同时存在的原因是，光照计算应该在线性空间中进行，以便确保数学上的正确性，但结果应该在伽马空间中呈现以便让人眼看起来正确。</strong>在帧缓冲格式限制为每通道 8位的旧硬件上，计算光照时使用伽马曲线可在人类可感知的范围内提供更高的精度。在人眼最敏感的范围内，使用的位数最多。即使当今的监视器是数字显示器，它们仍然采用伽马编码信号作为输入信号。图像文件和视频文件显式编码到伽马空间（这意味着它们带有伽马编码值，而不是线性强度）。这便是标准；一切数值都在伽马空间内。伽马空间的公认标准称为 sRGB（请参阅Wikipedia）。该标准定义了它与线性空间之间的一个映射，使得人眼能充分利用8 位/通道的精度。下面是此映射的图表。 <img src="images/LinearRenderingMapping.png">线性渲染指的是渲染场景的过程，此情况下的所有输入都是线性的，也就是说，没有经过伽马校正以适合人眼观察或输出到显示器。</p><h2 id="unity线性和伽马工作流程">Unity线性和伽马工作流程</h2><p>纹理倾向于保存在伽马颜色空间中，而着色器期望使用线性颜色空间。因此，在着色器中对纹理进行采样时，基于伽马的值会导致不准确的结果。为了解决此问题，可将Unity 设置为使用 RGB采样器从伽马采样跨越到线性采样。这样确保了线性工作流程中的着色器的所有输入和输出都在正确的颜色空间中，从而产生正确的结果。</p><h3 id="切换gamma-和liner-选项模式">切换Gamma 和Liner 选项模式</h3><p>要指定伽马或线性工作流程，请选择<code>Edit</code> &gt;<code>Project Settings</code>，再选择 <code>Player</code> 类别，导航到<code>Other Settings</code>，打开 <code>Rendering</code>部分，然后根据偏好将 Color Space 更改为 <code>Linear</code> 或<code>Gamma</code>。</p><p>需要注意：Android平台需要注意的是, Liner 模式不支持<code>OpenGLES2</code>, 自然也不支持<code>Auto Graphic API</code>选项</p><h2 id="需要注意的项">需要注意的项</h2><h3 id="gamma空间模式">Gamma空间模式</h3><p>即使这些值在伽马空间中，Unity Editor的所有着色器计算仍然按照在线性空间中的方式处理它们的输入。为了确保获得可接受的最终结果，Editor在将着色器输出写入帧缓冲区时进行调整以处理不匹配的格式，并且不对最终结果应用伽马校正。</p><h3 id="liner空间模式">Liner空间模式</h3><p>如果纹理是在线性或伽马颜色空间中创建的，则可使用线性颜色空间。向线性颜色空间着色器程序提供的伽马颜色空间纹理将在移除伽马校正后输入给着色器。</p><h2 id="unity线性和伽马空间的纹理">Unity线性和伽马空间的纹理</h2><p>Unity 在<strong>默认情况下使用 GPU 的 sRGB采样器从伽马颜色空间跨越到线性颜色空间。如果纹理是在线性颜色空间内创建的，则需要绕过sRGB 采样</strong>。</p><h3 id="采用线性渲染的-gamma-纹理">采用线性渲染的 Gamma 纹理</h3><p>如果纹理位于线性颜色空间内，需要禁用 sRGB 采样。</p><p>线性渲染为渲染的场景提供不同的外观。如果创作的项目在伽马空间中渲染时看起来很好，那么更改为线性渲染时，视觉效果不太会仍然保持良好。因此，如果从伽马渲染更改为线性渲染，您可能需要一些时间来调整项目，使其看起来像以前一样好。不过，这种转变最终可实现更加一致和逼真的渲染。您可能需要调整纹理、材质和光照。</p><h4 id="光照贴图">光照贴图</h4><p>光照贴图中的光照计算始终在线性空间中完成。<strong>光照贴图始存储在伽马空间中。这意味着，无论是在伽马还是线性颜色空间中，光照贴图纹理都是相同的。</strong>位于线性颜色空间时，纹理样本在纹理采样时会从伽马空间转换为线性空间。位于伽马颜色空间时则不需要转换。<strong>因此，在更改颜色空间设置后，必须重新烘焙光照贴图：当Unity的光照设置为自动烘焙（默认设置）时，此过程会自动激活。</strong></p><p>Unity 创建的光照贴图 EXR文件中的数据位于线性空间内。导入过程中它将被转换到伽马空间。从外部光照贴图中引入光照贴图时，<strong>请将光照贴图的Texture Type 设置为 Lightmap。此设置可确保在导入时绕过 sRGB采样。</strong></p><h4 id="线性渲染支持的平台">线性渲染支持的平台</h4><ul><li>Windows、Mac OS X 和 Linux（独立平台）</li><li>Xbox One</li><li>PlayStation 4</li><li>Android</li><li>iOS</li><li>WebGL</li></ul><p>当设备不支持线性渲染时，不会回退到伽马空间。在这种情况下，播放器将退出。通过在脚本中查找QualitySettings.activeColorSpace 即可核实有效的颜色空间。如果平台或硬件不支持给定的颜色空间，则最终实际使用的颜色空间可能会有所不同 *QualitySettings.desiredColorSpace : 用户指定的颜色空间rending *QualitySettings.activeColorSpace : 实际使用的颜色空间rending</p><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">namespace</span> UnityEngine</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 摘要:</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">//     Color space for player settings.</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">enum</span> ColorSpace</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">//</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 摘要:</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">//     Uninitialized color space.</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        Uninitialized <span class="op">=</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">//</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 摘要:</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">//     Gamma color space.</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        Gamma <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">//</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 摘要:</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">//     Linear color space.</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        Linear <span class="op">=</span> <span class="dv">1</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>在 Android上，线性渲染<code>至少需要 OpenGL ES 3.0 图形 API 和 Android 4.3。</code>在 iOS 上，线性渲染需要 Metal 图形 API。 在 WebGL 上，线性渲染至少需要WebGL 2.0 图形 API。</p><h4 id="线性颜色空间和-hdr">线性颜色空间和 HDR</h4><p>使用 HDR时，渲染在线性空间中执行到浮点缓冲区。这些缓冲区具有足够的精度，无论何时访问缓冲区，都不需要转换到伽马空间或从伽马空间转换。这意味着，在线性模式下渲染时，您使用的帧缓冲区会将颜色存储在线性空间中。因此，所有混合效果和后处理效果均在线性空间中隐式执行。当写入最终后备缓冲区时，将应用伽马校正。</p><h4 id="线性颜色空间和非-hdr">线性颜色空间和非 HDR</h4><p>启用线性颜色空间但未启用 HDR 时，将使用一种特殊的帧缓冲类型，它支持sRGB 读取和 sRGB写入（读取时从伽马转换为线性，而写入时从线性转换为伽马）。当此帧缓冲区用于混合，或将其绑定为纹理时，值在使用前将转换为线性空间。写入这些缓冲区时，所写入的值将从线性空间转换为伽马空间。如果在线性模式和非HDR 模式下进行渲染，则所有后处理效果都会创建其源缓冲区和目标缓冲区并启用sRGB 读写权限，以便在线性空间中进行后处理和后处理混合。</p><h3 id="使用线性纹理">使用线性纹理</h3><p>当纹理处于伽马颜色空间时，sRGB 采样允许 Unity Editor在线性颜色空间中渲染着色器。<strong>当您选择使用线性颜色空间时，Editor默认使用 sRGB采样。如果纹理处于线性颜色空间，则需要使用线性颜色空间并为每个纹理禁用sRGB 采样</strong>。</p><ul><li>旧版本 gui不会移除 sRGB 对旧版 GUI系统元素的渲染始终在伽马空间中完成。Editor GUI and Legacy GUI的纹理在导入时不会移除其伽马校正。</li></ul><h4 id="线性创作的纹理">线性创作的纹理</h4><p>同样重要的是，如果查找纹理、遮罩和其他纹理<strong>存在有特殊意义且未应用伽马校正的RGB 值，则必须绕过 sRGB采样。</strong>这样可以防止被采样纹理的值在用于着色器之前删除不存在的伽马校正，确保使用磁盘上存储的原始值进行计算。Unity假设 GUI 纹理和法线贴图纹理都是在线性空间中创作的。</p><h2 id="unity-shder-中进行手动矫正">Unity Shder 中进行手动矫正</h2><h3 id="使用内置函数">使用内置函数</h3><ul><li>包含 <code>UnityCG.cginc</code><ul><li>内置的 liner转换 gamma函数</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">inline</span> half3 LinearToGammaSpace <span class="op">(</span>half3 linRGB<span class="op">)</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        linRGB <span class="op">=</span> max<span class="op">(</span>linRGB<span class="op">,</span> half3<span class="op">(</span><span class="fl">0.</span><span class="er">h</span><span class="op">,</span> <span class="fl">0.</span><span class="er">h</span><span class="op">,</span> <span class="fl">0.</span><span class="er">h</span><span class="op">));</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">// An almost-perfect approximation from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> max<span class="op">(</span><span class="fl">1.055</span><span class="er">h</span> <span class="op">*</span> pow<span class="op">(</span>linRGB<span class="op">,</span> <span class="fl">0.416666667</span><span class="er">h</span><span class="op">)</span> <span class="op">-</span> <span class="fl">0.055</span><span class="er">h</span><span class="op">,</span> <span class="fl">0.</span><span class="er">h</span><span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Exact version, useful for debugging.</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return half3(LinearToGammaSpaceExact(linRGB.r), LinearToGammaSpaceExact(linRGB.g), LinearToGammaSpaceExact(linRGB.b));</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ul><li>内置的 gamma 转换liner函数</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">inline</span> half3 GammaToLinearSpace <span class="op">(</span>half3 sRGB<span class="op">)</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Approximate version from http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> sRGB <span class="op">*</span> <span class="op">(</span>sRGB <span class="op">*</span> <span class="op">(</span>sRGB <span class="op">*</span> <span class="fl">0.305306011</span><span class="er">h</span> <span class="op">+</span> <span class="fl">0.682171111</span><span class="er">h</span><span class="op">)</span> <span class="op">+</span> <span class="fl">0.012522878</span><span class="er">h</span><span class="op">);</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Precise version, useful for debugging.</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//return half3(GammaToLinearSpaceExact(sRGB.r), GammaToLinearSpaceExact(sRGB.g), GammaToLinearSpaceExact(sRGB.b));</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li>对最终的颜色进行运算</li></ul><div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// Unity built-in shader source. Copyright (c) 2016 Unity Technologies. MIT license (see license.txt)</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Name"</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    Properties</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">//...</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        Pass</span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>           <span class="co">//...</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma fragment frag</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#include </span><span class="im">"UnityUI.cginc"</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ...</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>            fixed4 frag<span class="op">(</span>v2f IN<span class="op">)</span> <span class="op">:</span> SV_Target</span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>                half4 color <span class="op">=</span> <span class="co">// ...;</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>                <span class="co">//将线性运算的结果进行 gamma矫正</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>                color<span class="op">.</span>rgb <span class="op">=</span> LinearToGammaSpace<span class="op">(</span>color<span class="op">.</span>rgb<span class="op">);</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>                <span class="co">// ...</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> color<span class="op">;</span></span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/wang-luo-dai-li-he-ji/1.wang-luo-dai-li-he-ji/"/>
      <url>/2022/08/10/wang-luo-dai-li-he-ji/1.wang-luo-dai-li-he-ji/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li>nodejs 插件下载过慢<code>bash         npm config set registry https://registry.npm.taobao.org # 设置taobao镜像地址         npm config get registry #查看已经设置的镜像地址</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/wang-luo/1.http-ji-chu/"/>
      <url>/2022/08/10/wang-luo/1.http-ji-chu/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://www.cnblogs.com/testyao/p/6548261.html">响应状态</a></li><li><a href="http://www.skywind.me/blog/topics/network">传输优化</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/wang-luo/0.wireshark/"/>
      <url>/2022/08/10/wang-luo/0.wireshark/</url>
      
        <content type="html"><![CDATA[<h2 id="wireshark">Wireshark</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/tu-xing-jiao-cheng-bi-ji/1.opengl-dai-zheng-li/"/>
      <url>/2022/08/10/tu-xing-jiao-cheng-bi-ji/1.opengl-dai-zheng-li/</url>
      
        <content type="html"><![CDATA[<h1 id="opengl-待整理">OpenGL 待整理</h1><ol type="1"><li>纹理上传立即模式。 相同图片不同图片对象buffer也会重复上传。</li><li>OUT_OF_MEMORY状态没办法处理，因为查询状态可能true，但是使用的时候状态可能变了，OS有多个程序使用。</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/tu-xing-jiao-cheng-bi-ji/0.xian-dai-ji-suan-ji-tu-xing-xue-ru-men-yan-ling-qi/"/>
      <url>/2022/08/10/tu-xing-jiao-cheng-bi-ji/0.xian-dai-ji-suan-ji-tu-xing-xue-ru-men-yan-ling-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="线性代数">线性代数</h1><p>图形学默认向量为 列向量 <span class="math display">\[A =\begin{bmatrix}x\\y\\z\end{bmatrix}, \]</span> 也可以转换为行向量 <span class="math display">\[ A^T = \begin{bmatrix}x &amp;y&amp;z\end{bmatrix}, \]</span></p><h2 id="点乘法dot">点乘法dot</h2><p>向量点成 dot， <span class="math display">\[ a . b  = |a||b|\cos\theta \]</span> , 几何意义投影。 向量点乘， <span class="math display">\[ a . b  =\begin{bmatrix}a_x\\a_y\\a_z\end{bmatrix}\begin{bmatrix}b_x\\b_y\\b_z\end{bmatrix}= a_x* b_x + a_y* b_y + a_z* b_z\]</span></p>矩阵向量点乘， $ a . b =<span class="math display">\[\begin{bmatrix}a_x &amp; a_y &amp;a_z\end{bmatrix}\begin{bmatrix} b_x \\ b_y \\ b_z \end{bmatrix}\]</span><p>= a_x* b_x + a_y* b_y + a_z* b_z $$</p><h2 id="叉乘-cross">叉乘 cross</h2><p>(MxN)(NxP) = MxP, Eij = RowAi Cross ColumnBj.</p><p>axb = - bxa., <strong>前提是 a的列等于b的行</strong> 大小： <span class="math display">\[|axb| = |a||b|\sin\theta\]</span> 方向：右手螺旋定则 拇指方向。 <strong>满足结合律和交换律</strong></p><h3 id="叉乘应用">叉乘应用</h3><ol type="1"><li>判定b向量在a向量左右，** a叉乘b 看z 如果大于0 则在左 **</li><li>判定p 在三角形内，</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/she-ji-mo-shi/1.she-ji-mo-shi/"/>
      <url>/2022/08/10/she-ji-mo-shi/1.she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://gpp.tkchu.me/architecture-performance-and-games.html">设计模式教程</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/ruan-jian-yi-ji-po-jie/2.ruan-jian-shi-yong-wen-ti-jie-jue/"/>
      <url>/2022/08/10/ruan-jian-yi-ji-po-jie/2.ruan-jian-shi-yong-wen-ti-jie-jue/</url>
      
        <content type="html"><![CDATA[<h2 id="软件使用问题解决">软件使用问题解决</h2><ol type="1"><li><p>SVN</p><ol type="1"><li><p>Svn 更新命令冲突时使用theirs</p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">svn</span> cleanup</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="fu">svn</span> revert <span class="at">-R</span> <span class="at">-q</span> ./</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="fu">svn</span> up <span class="at">--force</span> <span class="at">--accept</span> tc</span></code></pre></div></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/ruan-jian-yi-ji-po-jie/1.ruan-jian-yi-ji-po-jie/"/>
      <url>/2022/08/10/ruan-jian-yi-ji-po-jie/1.ruan-jian-yi-ji-po-jie/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://www.52pojie.cn/forum.php?mod=viewthread&amp;tid=796683&amp;page=1">StarUML</a></li><li>sublime text3 激活码<code>c         ----- BEGIN LICENSE -----         Member J2TeaM         Single User License         EA7E-1011316         D7DA350E 1B8B0760 972F8B60 F3E64036         B9B4E234 F356F38F 0AD1E3B7 0E9C5FAD         FA0A2ABE 25F65BD8 D51458E5 3923CE80         87428428 79079A01 AA69F319 A1AF29A4         A684C2DC 0B1583D4 19CBD290 217618CD         5653E0A0 BACE3948 BB2EE45E 422D2C87         DD9AF44B 99C49590 D2DBDEE1 75860FD2         8C8BB2AD B2ECE5A4 EFC08AF2 25A9B864         ------ END LICENSE ------​</code></li><li><a href="https://www.ainiseo.com/question/8170.html">VMwareWorkstation Pro15</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/ji-suan-ji-ji-chu/2.nei-cun-zhi-shi/"/>
      <url>/2022/08/10/ji-suan-ji-ji-chu/2.nei-cun-zhi-shi/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://blog.csdn.net/qq_36894974/article/details/102779264">内存知识</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/ji-suan-ji-ji-chu/1.cpu-huan-cun/"/>
      <url>/2022/08/10/ji-suan-ji-ji-chu/1.cpu-huan-cun/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="http://cenalulu.github.io/linux/all-about-cpu-cache/">cpucache</a></li><li><a href="https://zhuanlan.zhihu.com/p/31859105">cpu cache</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/hui-bian/2.vs-fan-hui-bian-gong-ju/"/>
      <url>/2022/08/10/hui-bian/2.vs-fan-hui-bian-gong-ju/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://docs.microsoft.com/zh-cn/dotnet/framework/tools/ildasm-exe-il-disassembler">ildasm</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/hui-bian/1.il-zhi-ling-xiang-jie/"/>
      <url>/2022/08/10/hui-bian/1.il-zhi-ling-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="il指令">IL指令</h2><ol type="1"><li><a href="https://www.cnblogs.com/zery/p/3368460.html">IL指令</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/gou-jian-xi-tong/2.doxygen-wen-dang/"/>
      <url>/2022/08/10/gou-jian-xi-tong/2.doxygen-wen-dang/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="http://ftp.kaist.ac.kr/doxygen/">doxygen文档</a></li><li><a href="https://www.cnblogs.com/silencehuan/p/11169084.html">doxygen注释</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/gou-jian-xi-tong/1.gradle/"/>
      <url>/2022/08/10/gou-jian-xi-tong/1.gradle/</url>
      
        <content type="html"><![CDATA[<h2 id="gradle构建">Gradle构建</h2><ol type="1"><li><a href="https://guides.gradle.org">Gradle官网</a></li><li><a href="https://services.gradle.org/distributions/">Gradle下载</a></li><li><a href="https://blog.csdn.net/u010349644/article/details/84715076">maven仓库</a></li><li><a href="https://groovy-lang.org/index.html">Groovy</a>、<a href="https://docs.gradle.org/current/dsl/">DSL</a></li><li><a href="https://www.2cto.com/kf/201712/702944.html">多渠道构建配置</a></li><li><a href="https://blog.csdn.net/chouhuan1877/article/details/100808667">Gradle编译</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/du-shu-bi-ji/shi-shi-xuan-ran-di-si-ban/5.shadingbasics/"/>
      <url>/2022/08/10/du-shu-bi-ji/shi-shi-xuan-ran-di-si-ban/5.shadingbasics/</url>
      
        <content type="html"><![CDATA[<h1 id="实时渲染第四版">实时渲染第四版</h1><p>@(翻译&amp;笔记)[Real-time Rendering|实时渲染|图形]</p><hr><p>[TOC]</p><h2 id="前言">前言</h2><p> 渲染三维对象的图像时，模型不仅仅应具有适当的几何形状，还具有所需的视觉外观。根据应用的不同，这可以从图片写实主义到处于创造性的原因而选择的各种类型的风格化外观。</p><h2 id="着色模型">5.1 着色模型</h2><p> 确定渲染对象外观的第一步是选择着色模型，以描述对象的颜色应如何根据曲面方向，视图方向和照明方向等因素而变化。 例如，我们将使用'Gooch shading model'。这是非真实渲染的一种形式。 古式着色模型的基本思想是将曲面发现与灯光的位置进行比较。如果发现指向灯光，则使用较暖的色调为曲面着色。<span class="math display">\[     C_{shaded} = s ( C_{highlight}) + (1 - s)(t C_{warm} + (1- t)C_{cool})    \]</span></p><p> 着色模型通常具有用于控制外观变化的属性。设置这些属性的值是确定对象外观的下一步。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/du-shu-bi-ji/2.tu-jie-http/"/>
      <url>/2022/08/10/du-shu-bi-ji/2.tu-jie-http/</url>
      
        <content type="html"><![CDATA[<h1 id="图解http">图解Http</h1><h1 id="web以及网络基础">Web以及网络基础</h1><h2 id="网络基础tcp">网络基础Tcp</h2><ul><li>通常 互联网相关联的协议集合起来总称为 TCP/IP。也有说法认为，TCP/IP是指 TCP 和 IP 这两种协议。还有一种说法认为，TCP/IP 是在 IP协议的通信过程中，使用到的协议族的统称。</li></ul><h3 id="tcpip-分层管理">tcp/ip 分层管理</h3><p>TCP/IP 协议族按层次分别分为以下 4层：应用层、传输层、网络层和数据链路层。</p><ul><li><p>应用层，应用层决定了向用户提供应用服务时通信的活动。 TCP/IP协议族内预存了各类通用的应用服务。比如，FTP（FileTransferProtocol，文件传输协议）和 DNS（Domain NameSystem，域名系统）服务就是其中两类。HTTP 协议也处于该层。</p></li><li><p>传输层，传输层对上层应用层，提供处于网络连接中的两台计算机之间的数据传输。在传输层有两个性质不同的协议：TCP（Transmission ControlProtocol，传输控制协议）和 UDP（User DataProtocol，用户数据报协议）。</p></li><li><p>网络层（又名网络互连层），网络层用来处理在网络上流动的数据包。数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（所谓的传输路线）到达对方计算机，并把数据包传送给对方。与对方计算机之间通过多台计算机或网络设备进行传输时，网络层所起的作用就是在众多的选项内选择一条传输路线。</p></li><li><p>数据链路层（又名数据链路层，网络接口层），用来处理连接网络的硬件部分。包括控制操作系统、硬件的设备驱动、NIC（NetworkInterfaceCard，网络适配器，即网卡），及光纤等物理可见部分（还包括连接器等一切传输媒介）。硬件上的范畴均在链路层的作用范围之内。</p></li></ul><h3 id="tcpip-通信传输流">Tcp/ip 通信传输流</h3><p><img src="/imgs/通信模型.png"> <img src="/imgs/通信模型2.png"></p><h3 id="与http-相关的-iptcpdns">与Http 相关的 IP、TCP、DNS</h3><h4 id="ip">ip</h4><ul><li><p>TCP/IP 协议族中的 IP指的就是网际协议，协议名称中占据了一半位置，其重要性可见一斑。可能有人会把“IP”和“IP地址”搞混，“IP”其实是一种协议的名称。</p></li><li><p>IP协议的作用是把各种数据包传送给对方。而要保证确实传送到对方那里，则需要满足各类条件。其中两个重要的条件是IP 地址和 MAC地址（Media Access Control Address）。 IP地址指明了节点被分配到的地址，MAC 地址是指网卡所属的固定地址。IP地址可以和 MAC 地址进行配对。IP 地址可变换，但MAC地址基本上不会更改。</p></li></ul><p><img src="/imgs/tp路由.png"></p><h3 id="确保可靠性的-tcp-协议">确保可靠性的 TCP 协议</h3><p>所谓的字节流服务（Byte StreamService）是指，为了方便传输，将大块数据分割成以报文段（segment）为单位的数据包进行管理。而可靠的传输服务是指，能够把数据准确可靠地传给对方。一言以蔽之，TCP协议为了更容易传送大数据才把数据分割，而且 TCP协议能够确认数据最终是否送达到对方。</p><p>为了准确无误地将数据送达目标处，TCP 协议采用了三次握手（three-wayhandshaking）策略。</p><p><img src="/imgs/Tcp三次握手.png"></p><h4 id="负责域名解析的dns服务">负责域名解析的DNS服务</h4><p>DNS（Domain Name System）服务是和 HTTP协议一样位于应用层的协议。它提供域名到 IP地址之间的解析服务。计算机既可以被赋予 IP地址，也可以被赋予主机名和域名。</p><p>但要让计算机去理解名称，相对而言就变得困难了。因为计算机更擅长处理一长串数字。为了解决上述的问题，DNS服务应运而生。</p><p><img src="/imgs/DNS应用.png"></p><h4 id="小结">小结</h4><p><img src="/imgs/各种协议.png"></p><h3 id="uri-和-url">URI 和 URL</h3><p>与 URI（统一资源标识符）相比，我们更熟悉 URL（Uniform ResourceLocator，统一资源定位符）。 URI 用字符串标识某一互联网资源，而URL表示资源的地点（互联网上所处的位置）。 URL是 URI 的子集。</p><p><img src="/imgs/URL格式.png"></p><ul><li><p>方案名： 使用 http: 或 https:等协议方案名获取访问资源时要指定协议类型。不区分字母大小写，最后附一个冒号（:）。也可使用data: 或 javascript: 这类指定数据或脚本程序的方案名。</p></li><li><p>登录信息（认证）指定用户名和密码作为从服务器端获取资源时必要的登录信息（身份认证）。此项是可选项。</p></li><li><p>服务器地址 使用绝对 URI必须指定待访问的服务器地址。地址可以是类似hackr.jp 这种 DNS可解析的名称，或是 192.168.1.1 这类 IPv4 地址名，还可以是[0:0:0:0:0:0:0:1] 这样用方括号括起来的 IPv6 地址名。</p></li><li><p>服务器端口号指定服务器连接的网络端口号。此项也是可选项，若用户省略则自动使用默认端口号。</p></li><li><p>带层次的文件路径</p></li><li><p>查询字符串针对已指定的文件路径内的资源，可以使用查询字符串传入任意参数。此项可选。</p></li><li><p>片段标识符使用片段标识符通常可标记出已获取资源中的子资源（文档内的某个位置）。但在RFC 中并没有明确规定其使用方法。该项也为可选项。</p></li></ul><h2 id="http-协议">Http 协议</h2><p>请求报文：是由请求方法、请求URI、协议版本、可选的请求首部字段和内容实体构成的。</p><p><img src="/imgs/HttpGet.png"></p><p>响应报文：基本上由协议版本、状态码（表示请求成功或失败的数字代码）、用以解释状态码的原因短语、可选的响应首部字段以及实体主体构成。</p><p><img src="/imgs/HttpResp.png"></p><p>HTTP 是一种不保存状态，即无状态（stateless）协议。HTTP协议自身不对请求和响应之间的通信状态进行保存。也就是说在 HTTP这个级别，协议对于发送过的请求或响应都不做持久化处理。 HTTP/1.1虽然是无状态协议，但为了实现期望的保持状态功能，于是引入了 Cookie技术。有了 Cookie 再用 HTTP 协议通信，就可以管理状态了。</p><p><img src="/imgs/Http支持的方法.png"></p><p>HTTP 协议的初始版本中，每进行一次 HTTP 通信就要断开一次 TCP连接。为解决上述 TCP 连接的问题，HTTP/1.1 和一部分的 HTTP/1.0想出了持久连接（HTTP Persistent Connections，也称为 HTTP keep-alive或HTTP connectionreuse）的方法。持久连接的特点是，只要任意一端没有明确提出断开连接，则保持TCP 连接状态。</p><h2 id="响应状态码">响应状态码</h2><p><img src="/imgs/响应状态码.png"></p><h3 id="xx-成功">2xx 成功</h3><ul><li><p>200 ok 表示从客户端发来的请求在服务器端被正常处理了。</p></li><li><p>204 请求成功,但没有资源返回一般在只需要从客户端往服务器发送信息，而对客户端不需要发送新信息内容的情况下使用。</p></li><li><p>206 该状态码表示客户端进行了范围请求，而服务器成功执行了这部分的GET 请求。</p></li></ul><h3 id="xx-重定向">3xx 重定向</h3><ul><li><p>301 永久性重定向。该状态码表示请求的资源已被分配了新的URI，以后应使用资源现在所指的 URI。</p></li><li><p>302 临时性重定向。该状态码表示请求的资源已被分配了新的URI，希望用户（本次）能使用新的 URI 访问。</p></li><li><p>303 该状态码表示由于请求对应的资源存在着另一个 URI，应使用GET方法定向获取请求的资源。</p></li></ul><p><strong>当 301、302、303 响应状态码返回时，几乎所有的浏览器都会把POST改成 GET，并删除请求报文内的主体，之后请求会自动再次发送。301、302标准是禁止将 POST 方法改变成 GET方法的，但实际使用时大家都会这么做。</strong></p><ul><li><p>304 该状态码表示客户端发送附带条件的请求 2时，服务器端允许请求访问资源，但未满足条件的情况。</p></li><li><p>307 临时重定向。该状态码与 302 Found 有着相同的含义。</p></li></ul><h3 id="xx-客户端错误">4XX 客户端错误</h3><ul><li><p>400该状态码表示请求报文中存在语法错误。当错误发生时，需修改请求的内容后再次发送请求。另外，浏览器会像200 OK 一样对待该状态码。</p></li><li><p>401 该状态码表示发送的请求需要有通过 HTTP 认证（BASIC认证、DIGEST 认证）的认证信息。另外若之前已进行过 1 次请求，则表示用户认证失败。</p></li><li><p>403该状态码表明对请求资源的访问被服务器拒绝了。服务器端没有必要给出拒绝的详细理由，但如果想作说明的话，可以在实体的主体部分对原因进行描述，这样就能让用户看到了。</p></li><li><p>404该状态码表明服务器上无法找到请求的资源。除此之外，也可以在服务器端拒绝请求且不想说明理由时使用。</p></li></ul><h3 id="xx-服务器错误">5XX 服务器错误</h3><p><strong>状态码和状况的不一致不少返回的状态码响应都是错误的，但是用户可能察觉不到这点。比如Web 应用程序内部发生错误，状态码依然返回 200OK，这种情况也经常遇到。</strong></p><ul><li><p>500 该状态码表明服务器端在执行请求时发生了错误。也有可能是Web应用存在的 bug 或某些临时的故障。</p></li><li><p>503该状态码表明服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。如果事先得知解除以上状况需要的时间，最好写入RetryAfter首部字段再返回给客户端。</p></li></ul><h2 id="http-首部字段">HTTP 首部字段</h2><p>HTTP 首部字段是由首部字段名和字段值构成的，中间用冒号“:” 分隔。</p><h3 id="种-http-首部字段类型">4 种 HTTP 首部字段类型</h3><ul><li><p>通用首部字段（General Header Fields）请求报文和响应报文两方都会使用的首部。</p></li><li><p>请求首部字段（Request Header Fields）从客户端向服务器端发送请求报文时使用的首部。补充了请求的附加内容、客户端信息、响应内容相关优先级等信息。</p></li><li><p>响应首部字段（Response Header Fields）从服务器端向客户端返回响应报文时使用的首部。补充了响应的附加内容，也会要求客户端附加额外的内容信息。</p></li><li><p>实体首部字段（Entity Header Fields）针对请求报文和响应报文的实体部分使用的首部。补充了资源内容更新时间等与实体有关的信息。</p></li></ul><p>通用首部字段 <img src="/imgs/Http通用首部字段.png" alt="通用首部字段"></p><p>请求首部字段 <img src="/imgs/Http请求首部字段.png" alt="请求首部字段"></p><p>响应首部字段 <img src="/imgs/Http响应首部字段.png" alt="响应首部字段"></p><p>实体首部字段 <img src="/imgs/Http实体首部字段.png" alt="响应首部字段"></p><h4 id="常用首部字段">常用首部字段</h4><ol type="1"><li>首部字段 Cache-Control 能够控制缓存的行为</li></ol><pre><code>Cache-Control: private, max-age=0, no-cache</code></pre><figure><img src="/imgs/http缓存控制.png" alt="响应首部字段"><figcaption aria-hidden="true">响应首部字段</figcaption></figure><ol start="2" type="1"><li>Connection 首部字段具备如下两个作用。<ul><li>控制不再转发给代理的首部字段</li><li>管理持久连接</li></ul></li></ol><pre><code>Connection: close// Connection: Keep-Alive</code></pre><ol start="3" type="1"><li><p>首部字段 Date 表明创建 HTTP 报文的日期和时间。</p></li><li><p>Transfer-Encoding 首部字段 Transfer-Encoding规定了传输报文主体时采用的编码方式。</p></li><li><p>Via. 使用首部字段 Via是为了追踪客户端与服务器之间的请求和响应报文的传输路径。Via首部是为了追踪传输路径，所以经常会和 TRACE 方法一起使用。</p></li><li><p>Accept-Charset. Accept-Charset首部字段可用来通知服务器用户代理支持的字符集及字符集的相对优先顺序。另外，可一次性指定多种字符集。与首部字段Accept 相同的是可用权重 q 值来表示相对优先级。</p></li></ol><h4 id="websocket-和-http-2.0">WebSocket 和 Http 2.0</h4><p>为配合扩展的方法，状态码也随之扩展。 102 Processing：可正常处理请求，但目前是处理中状态 207 Multi-Status ：存在多种状态 422Unprocessible Entity ：格式正确，内容有误 423 Locked ：资源已被加锁 424Failed Dependency ：处理与某请求关联的请求失败，因此不再维 507Insufficient Storage ：保存空间不足</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/du-shu-bi-ji/1.gpu-bian-cheng-yu-cg-yu-yan/"/>
      <url>/2022/08/10/du-shu-bi-ji/1.gpu-bian-cheng-yu-cg-yu-yan/</url>
      
        <content type="html"><![CDATA[<h2 id="gpu编程与cg语言"># GPU编程与CG语言</h2><p>title: 1.GPU编程与CG语言 date: 2020-09-25 19:20:05 author: lyg cover:true mathjax: true categories: 图形 tags: - 图形 - Graphics ---</p><h2 id="绪论">绪论</h2><h3 id="gpu-vs-cpu">GPU Vs CPU</h3><p><img src="imgs/CPU_GPU"></p><ul><li>GPU 并行结构。速度快于CPU。但是，数据之间没有依赖，所以需要极强的依赖性算法 代替数据依赖。</li><li>CPU 控制器更多。控制流方面 GPU 弱于CPU</li></ul><h2 id="gpu-图形绘制管线">GPU 图形绘制管线</h2><h3 id="解释1">解释1</h3><p>三个主要阶段： 应用程序阶段、几何阶段、光栅化阶段。</p><ul><li><p>应用程序阶段。 使用高级语言进行开发，主要和内存、CPU打交道。例如碰撞检测，场景图建立、空间八叉树更新、<strong>视椎体裁剪</strong>等。在该阶段末端，几何体数据（顶点坐标、法向量、纹理坐标、纹理等）通过<code>数据总线</code>传输给图形硬件。</p></li><li><p>几何阶段。主要负责顶点坐标变换、光照、裁剪、投影以及屏幕映射，该阶段基于 GPU进行运算，在该阶段末端得到了经过变换和投影之后的顶点坐标、颜色、以及纹理坐标。</p></li><li><p>光栅化阶段。基于几何极端的输出数据，为像素（Pixel）正确配色，以便于绘制完整图像，该阶段进行的都是单像素的操作，每个像素的信息树村在颜色缓冲器（colorbuffer 或者 framebuffer）中。</p></li></ul><p>拓展： *数据总线：可以共享的通道，用于多个设备之间传输数据；端口是两个设备之间传输的通道；带宽用来描述端口或总线上的吞吐量，可以用每秒字节数（b/s）来度量。数据总线和端口将不同的功能模块<code>粘粘</code>在一起。由于端口和数据总线均具有传输能力，因此通常也将端口认为是数据总线。</p><ul><li><p>光照计算属于结合极端，因为光照计算涉及视点、光源和物体的世界坐标，所以通常放在<strong>世界坐标系</strong>中进行计算。</p></li><li><p>雾化以及涉及物体透明度的计算属于光栅化阶段,因为两种计算都需要深度值信息（Z值），而深度值是在几何极端计算并传递给光栅换阶段,<strong>提前深度则可以提前得知?</strong>。</p></li></ul><h4 id="几何阶段">几何阶段</h4><h5 id="坐标系">坐标系</h5><p><img src="imgs/坐标系.png"> <img src="imgs/坐标系0.png"></p><p>根据顶点坐标变换的先后顺序，主要有几个坐标空间，或者说坐标类型：模型坐标空间(Object space)、 世界坐标空间(World space)、观察坐标空间(Eye space/ View space)、 屏幕坐标空间/裁剪坐标空间(Clip AndProject space)。</p><p><img src="imgs/渲染管线.png"></p><p>模型空间（Object space）,需要明白的两个重要的含义： * object spacecoordinate 是模型空间的顶点值，模型文件导出的数据是 object spacecoordinate。 * object space coordinate与其他物体没有参照关系，因此不同模型置于同一个世界坐标系才相互位置有关联。</p><ul><li>模型空间转换到世界坐标空间<br>模型空间转换到世界坐标空间，通过 <code>Model Matrix</code> 完成 ？</li></ul><p>光照计算通常在世界坐标系中完成， 也可以在观察空间中完成，因为在同一观察空间中物体之间的相对关系是不变的。</p><p>顶点法向量在模型文件中属于 模型坐标，在GPU 顶点程序中必须将法向量转换到世界坐标才能用。<strong>与顶点转换到世界坐标不同的，法向量的转换矩阵是<code>Model matrix 的转置矩阵的逆矩阵</code></strong><a href="">潘李亮的 3D 变换中法向量变换矩阵的推导一文</a></p><ul><li>世界坐标空间转换到观察空间 所谓的 eye space/ view space,即以camera(视点或者相机)为原点， 由实现方向、视角和远近平面，共同组成的一个梯形的三维空间， 称之为视锥（viewing frustum）。金平面是梯形较小的矩形面，作为投影平面，在这个梯形体重的所有顶点数据是可见的，而超出这个梯形体之外的场景数据，会被视点去除（frustumCulling, 也称之为视椎裁剪）。所用的算法称之为裁剪算法。</li></ul><p><img src="imgs/视椎体.png"></p><ul><li>观察空间转换到裁剪空间(project and clip space)</li></ul><p>不少人觉得是“先裁减再投影”，不过事实并非如此。因为在 不规则的体（viewing frustum）中进行裁剪并非易事，所以经过图形学前辈们的精心分析，裁剪被安排到一个单位立方体中进行，该立方体的对角顶点分别是(-1,-1,-1)和(1,1,1)，通常称这个单位立方体为规范立方体（ Canonical viewvolume, CVV）。 CVV 的近平面（梯形体较小的矩形面）的 X、 Y坐标对应屏幕像素坐标（左下角是 0、 0）， Z坐标则是代表画面像素深度。</p><h4 id="光栅化阶段">光栅化阶段</h4><p>光栅化：决定哪些像素被集合图元覆盖的过程（ Rasterization is theprocess of determining the set of pixels covered by a geometricprimitive）经过上面诸多坐标 转换之后，现在我们得到了每个点的屏幕坐标值（Screen coordinate），也知道我们需要绘制的图元（点、线、面）。但此时还存在两个问题：</p><p>问题一：点的屏幕坐标值是浮点数，但像素都是由整数点来表示的，如果确定屏幕坐标值所对应的像素？问题二：在屏幕上需要绘制的有点、线、面，如何根据两个已经确定位置的 2个像素点绘制一条线段，如果根据已经确定了位置的 3 个像素点绘制一个三角形面片？</p><p>问题一，“绘制的位置只能接近两指定端点间的实际线段位置，例如，一条线段的位置是（10.48， 20.51），转换为像素位置则是（ 10， 21） ”</p><p>问题二涉及到具体的画线算法，以及区域图元填充算法。通常的画线算法有DDA 算法、 Bresenham 画线算法；区域图元填充算法有，扫描线多边形填充算法、边界填充算法等</p><p>Pixel operation 又称为 Raster Operation（RasterOperation），是在更新帧缓存之前，执行最后一系列针对每个片段的操作，其目的是：计算出每个像素的颜色值。</p><p><img src="imgs/Raster.png"></p><p>Shader 编成是基于计算机图形硬件的，这其中就包括 GPU 上的寄存器类型，glsl 和 hlsl 的着色虚拟机版本就是基于 GPU 的寄存器和指令集而区分的。</p><p><img src="imgs/GPU储存架构.png"></p><ul><li>深度缓冲(depth buffer/z buffer)</li></ul><p>Z buffer 应该是大家最为熟悉的缓冲区类型，又称为 depthbuffer，即深度缓冲区，其中存放的是视点到每个像素所对应的空间点的距离衡量，称之为Z 值或者深度值。可见物体的 Z 值范围位于【 0，1】区间，默认情况下，最接近眼睛的顶点（近裁减面上）其 Z 值为0.0，离眼睛最远的顶点（远裁减面上）其 Z值为 1.0。 使用 z buffer可以用来判断空间点的遮挡关系，著名的深度缓冲区算法（ depth-buffermethod，又称 Z 缓冲区算法）就是对投影平面上每个像素所对应的 Z值进行比较的。</p><p>Z 值并非真正的笛卡儿空间坐标系中的欧几里德距离（ Euclideandistance），而是一种“顶点到视点距离”的相对度量。所谓相对度量，即这个值保留了与其他同类型值的相对大小关系。</p><p><img src="imgs/zbuffer0.png"> <img src="imgs/zbuffer1.png"></p><p>其中 f 表示视点到远裁减面的空间距离， n表示视点到近裁减面的空间距离， z 表示视点到顶点的空间距离， N 表示 Z值精度。大多数人所忽略的是， z buffer 中存放的 z值不一定是线性变化的。在正投影中同一图元相邻像素的 Z值是线性关系的，但在透视投影中却不是的。在透视投影中这种关系是非线性的，而且非线性的程度随着空间点到视点的距离增加而越发明显。</p><p>FrameBuffer</p><p>Frame buffer，称为帧缓冲器，用于存放显示输出的数据，这个 buffer中的数据一般是像素颜色值。 Frame buffer 有时也被认为是 colorbuffer（颜色缓冲器）和 z buffer 的组合（《实时计算机图形学（第二版）》12 页）。那么 frame buffer 位于什么地方呢？在 webMediaBrands网站上摘录了一段英文说明，即 framebuffer通常都在显卡上，<strong>但是有时显卡会集成到主板上，所以这种情况下frame buffer被放在内存区域（ general main memory）</strong>。</p><h2 id="光照模型">光照模型</h2><h3 id="漫反射与lambert">漫反射与Lambert</h3><p>粗糙的物体表面向各个方向等强度地反射光，这种等同地向各个方向散射的现象称为光的漫反射（diffusereflection）。产生光的漫反射现象的物体表面称为理想漫反射体，也称为朗伯（Lambert）反射体。</p><p>漫反射体与环境光交互反射的光强. <span class="math display">\[    I_{ambdiff} = k_{d}I_{a}, I_{a} 表示光强，k_{d}表示材质对环境光的反射系数，  I_{ambdiff}是漫反射体与环境光交互反射的光强\]</span></p><p>当方向光照射到朗伯反射体上时，漫反射光的光强与入射光的方向和入射点表面法向夹角的余弦成正比，这称之为Lambert 定律，并由此构造出 Lambert 漫反射模型：</p><p><span class="math display">\[    I_{ldiff} = k_{d}I_{l}\cos\theta  I_{l}是方向光源强度，\theta是入射光方向与顶点法线的夹角，称为入射 (0≤θ≤90°)，I_{ldiff}是漫反射体与方向光交互反射的光强。入射角为零时，说明光线垂直于物体表面，漫反射光强最大；90°时光线与物体表面平行，物体接收不到任何光线。\]</span></p><p>综合考虑环境光和方向光，公式为：</p><p>若N为顶点单位法向量，L表示从顶点指向光源的单位向量（注意，是由顶点指向光源，不要弄反了），则cosθ等价于N与L的点积。 <span class="math display">\[    I_{diff} = I_{ambdiff} + I_{ldiff} = k_{d}I_{a} +k_{d}I_{l}\cos\theta = k_{d}I_{a} + k_{d}I_{l}(N.L),\]</span></p><h3 id="镜面反射与phong">镜面反射与Phong</h3><p>Lambert 模型较好地表现了粗糙表面上的光照现象，如石灰粉刷的墙壁、纸张等，但在用于诸如金属材质制成的物体时，则会显得呆板，表现不出光泽，主要原因是该模型没有考虑这些表面的镜面反射效果。一个光滑物体被光照射时，可以在某个方向上看到很强的反射光，这是因为在接近镜面反射角的一个区域内，反射了入射光的全部或绝大部分光强，该现象称为镜面反射。 Phong BuiTuong 提出一个计算镜面反射光强的经验模型，称为 phong模型，认为镜面反射的光强与<strong>反射光线和视线的夹角</strong>相关，其数学表达如公式(9-5)所示：</p><p><span class="math display">\[    I_{spec} = K_{s} + I_{l}(V.R)^{n_{s}},  K_{s}为材质的镜面反射系数，n_{s}是高光指数，V 表示从顶点到观察点的方向，R代表反射光方向\]</span></p><p>高光指数反映了物体表面的光泽程度。 s n 越大，反射光越集中，当偏离反射方向时，光线衰减的越厉害，只有当视线方向与反射光线方向非常接近时才能看到镜面反射的高光现象，此时，镜面反射光将会在反射方向附近形成亮且小的光斑； s n越小，表示物体越粗糙，反射光分散，观察到的光斑区域小，强度弱。</p><p>反射光的方向R可以通过入射光方向L（从顶点指向光源）和物体法向量N求出： <span class="math display">\[    R + L = (2N.L).N, 所以 R =  (2N.L).N - L\]</span></p><h3 id="blinn-phong">Blinn-Phong</h3><p>Blinn-Phong 光照模型，又称为 Blinn-phong 反射模型（Blinn–Phongreflection model）或者 phong 修正模型（modified Phong reflectionmodel）,和传统 phong 光照模型相比， Blinn-phong 光照模型混合了 Lambert的漫射部分和标准的高光，渲染效果有时 比 Phong高光更柔和、更平滑，此外它在速度上相当快，因此成为许多CG软件中的默认光照渲染方法。</p><p>phong 光照模型中，必须计算VR• 的值，其中R为反射光线方向单位向量，V为视线方向单位向量，但是在 Blinn-phong 光照模型中，用NH• 的值取代了 VR•。Blinn-phong 光照模型公式为：</p><p><span class="math display">\[    I_{spec} = K_{s} + I_{l}(N.H)^{n_{s}},其中N是入射点的单位法向量，H是“光入射方向L和视点方向V的中间向量”，通常也称之为半角向量。\]</span></p><p>注意：半角向量被广泛用于各类光照模型，原因不但在于半角向量蕴含的信息价值，也在于计算半角向量是一件简单、耗时不多的工作</p><p><span class="math display">\[    H = \frac{L + V}{L.V},\]</span></p><h3 id="全局光照模型与-rendering-equation">全局光照模型与 RenderingEquation</h3><p>Kajia 在 1986 年提出 rendering equation：</p><p><span class="math display">\[    L_{0}(x, w_{0}) = L_{e}(x, w_{0})  + \int_{}^{omega}f_{r}(x, w_{i},w_{0})L_{i}(x, w_{i})(n.w_{i})dw_{i}, 其中x表示入射点；    L_{0}(x, w_{0}) 即从物体表面x点，沿方向 w_{0} 反射的光强；    L_{e}(x, w_{0})  表示从物体表面x以方向 w_{0}发射出去光强，该值仅对自发光体有效；    f_{r}(x, w_{i}, w_{0}) 为，入射光线方向为 w_{i}照射到点x上，然后从w_{0} 方向反射出去的 BRDF 值。是一种函数类型。    L_{i}(x, w_{i}) 为入射方向为 w_{i}, 照射到 x 上的 入射光强；    n 表示 x 出的法向量。    然后对入射方向进行积分(对不同方向入射进行计算，在相加)，计算的结果就是从观察方向上看到的辐射绿。    为入射方向为 i w 方向反射出去的 w，照射到点x上入射光强；n表示点x处的法向量。然后对入射方向进行积分（因为光线入射的方向是四面八方的，积分的意义是对每个方向进行一遍计算后进行相加），计算的结果就是“从观察方向上看到的辐射率”。\]</span></p><h3 id="cook-torrance">Cook-Torrance</h3><p>Cook-Torrance 光照模型将物体粗糙表面（rough surface）看作由很多微小平面（微平面）组成，每一个微平面都被看作一个理想的镜面反射体，物体表面的粗糙度由微平面斜率的变化来衡量。一个粗糙表面由一系列斜率变化很大的微平面组成，而在相对平滑的表面上微平面斜率变化较小。</p><p>Cook-Torrance模型将光分为两个方面考虑：漫反射光强和镜面反射光强。</p><p><span class="math display">\[I_{c-t} = I_{diff} + I_{spec} = I_{diff} + k_{s}I_{l}R_{s}, 其中I_{diff} 是漫反射光强， 该部分你的计算方法和前面的所讲的相同，k_{s}I_{l}R_{s} 是镜面反射光强的计算方法。\]</span></p><p>从公式上可以看出: cook_Torrance 模型与phong、blinn-phong三中高光照模型本质的区别在于<strong>使用不同的数学表达式计算<span class="math display">\[R_{s}\]</span></strong></p><p><span class="math display">\[R_{s} = \frac{F*D*G}{(N.V)*(N.L)}\]</span></p><p>, 其中F 是Fresnel 反射系数， 表示反射光想上的光强占原始光前的比率； D表示位平面分布函数， 返回的是给定方向上的位平面的分数值；G是集合衰减系数， 衡量位平面自身的遮蔽光强的影响。 N、V、L分别表示法向量、视线方向（从顶点到视点） 和入射方向（从顶点向外）。</p><p>schlich 给出了 Fresnel 反射系数的一个近似，精度在1% 范围内的公式：<span class="math display">\[    F = f_{0} + (1-f_{0})(1- V.H)^5,  f_{0}为入社角度近似0(入社方向靠近法向量)时的 Fresnel 反射系数， V时指向视点的向量， H为半角向量。\]</span></p><p>位平面分布函数： 根据给定的半角向量 H，微平面分布函数返回微平面的分数值。最常使用的微平面分布函数时 Backmann分布函数：</p><p><span class="math display">\[    D = \frac{1}{m^2\cos^2\alpha}e^{-\frac{\tan^2\alpha}{m^2}}\]</span></p><p>m 值用于度量表面的粗糙程度， 较大的m 值对应粗糙平面， 较小的m值对应光滑平面，a 时顶点法向量 N 和半角向量 H 的夹角。 其中</p><p><span class="math display">\[    -\frac{\tan^2\alpha}{m^2} =-\frac{\frac{1-\cos^2\alpha}{\cos^2\alpha}}{m^2} = \frac{\cos^2\alpha-1}{m^2*\cos^2\alpha} = \frac{(N.H)^2 - 1}{m^2*(N*H)^2}\]</span></p><p>所以Backmann 微平面分布函数的最终函数表达为公式：</p><p><span class="math display">\[    D = \frac{1}{m^2\cos^2\alpha}e^{\frac{(N.H)^2 -1}{m^2*(N.H)^2}} =\frac{1}{m^2(N.H)^4}e^{\frac{(N.H)^2 -1}{m^2*(N.H)^2}}\]</span></p><p>微平面上反射的光可能出现三种情况：入射光未被遮挡，此时到达观察者的光强为 1；入射光部分被遮挡；反射光部分被遮挡。几何衰减系数被定义为：到达观察者的光的最小强度。所以</p><p><span class="math display">\[    G = min(1, G_{1}, G_{2}) \\    G_{1} = \frac{2(N.H)(N.L)}{V.H} \\    G_{2} = \frac{2(N.H)(N.V)}{V.H} \\\]</span></p><p>所以最终的 Cook-Torrance 光照模型的 specular term的最终数学表达为：</p><p><span class="math display">\[    I_{c-t} = I_{diff} + I_{spec} = k_{d}I_{l}(N.L) + k_{s}I_{l}R_{s} =k_{d}I_{l}(N.L) + k_{s}I_{l}\frac{(f_{0} + (1-f_{0})(1-V.H)^5)\frac{1}{m^2\cos^4\alpha}e^{\frac{(N.H)^2 -1}{m^2*(N.H)^2}}min(1, \frac{2(N.H)(N.L)}{V.H},\frac{2(N.H)(N.V)}{V.H})}{V.N}\]</span></p><p>Cook-Torrance 提出之前，微平面分布函数使用的是高斯分布（即正态分布）函数。</p><h3 id="brdf">BRDF</h3><p>双向反射分布函数(Bindirectional Reflectance Distribution Function).该函数面熟了入射光纤在非透明物体表面如何进行反射。BRDF的结果是一个没有单位的数值，表示在给定入射条件下，某个出射方向上反射光的相对能量，也可以理解为“入射光以特定方向离开的概率”</p><p>BRDF值表示：光线以 Wi 方向入射 ，然后以 W0 方向出射的概率，或者光强。依据光学原理， BRDF 的计算公式为：</p><p><span class="math display">\[    f_{r}(w_{i}, w_{0}) = \frac{dL_{r}(w_{0})}{dE_{i}(w_{i})} =\frac{dL_{r}(w_{0})}{L_{i}(w_{i})\cos\theta_{i}dw_{i}}, 其中L_{r}(w_{0}) 表示从 w_{0}  方向发射的光线的辐射亮度，E_{i}(w_{i}) 表示从w_{i} 方向入射的光照的辐射照度。\]</span></p><p>辐射亮度：没单位立体角在垂直于给定方向的平面上的单位正投影面积上的功率。辐射照度则是整个入射表面的功率，等于投射在包括该点的一个面元的辐射通量<span class="math display">\[d\varphi\]</span> 除以该面元的面积 <span class="math display">\[dA\]</span>, 从物理光学上我们可以将 公式理解为：BRDF函数计算的是“特定反射方向的光强与入射光强的比例”。</p><p>各向异性(anisotropy)与均向性相反，是指在不同方向具有不同行为的性质，也就是其行为与方向有关。如在物理学上，沿着材料做不同方向的量测，若会出现不同行为，通常称该材料具有某种“各向异性”，这样的材料表面称为各向异性表面（anisotropic surface）；</p><p>由于材质有组织的细微凹凸结构的不同，各向异性也分为基本的三种类型: 1.线性各向异性； 2. 径向各向异性； 3.圆柱形各向异性，实际上线性各向异性，单被映像为圆柱形。</p><h3 id="bank-brdf-经验模型">Bank BRDF 经验模型</h3><p>Bank BRDF 属于经验模型，由于其计算简单，且效果良好，所以该模型在各向异性光照效果的模拟方面非常有用。Bank BRDF的镜面反射部分可以表达为公式的形式：</p><p><span class="math display">\[    f= k_{s}(\sqrt{1 - (L.T)^2} \sqrt{1 - (V.T)^2} - (L.T)(V.T))^{n_{s}}\]</span></p><p><span class="math display">\[ k_{s}、 n_{s}\]</span>分别表示镜面反射系数和高光系数； L表示入射光纤的方向、 V表示视线观察方向、T表示该店的切向量。尤其要注意切向量的计算方法，因为一个三维空间点可能存在无数个切向量，通常我采用“顶点的法向量和视线方向做叉积，其结果作为 T。</p><h2 id="透明光照模型与环境贴图">透明光照模型与环境贴图</h2><p>材质和光的交互除了反射现象，对于透明物体还存在透射现象。模拟光的透射现象通常是一个比较头痛的问题，因为需要至少计算光的两次透射方向，首先计算光从介质一进入介质二的透射方向，然后计算光从介质二进入介质一的透射方象。此外，光在透明物体内穿越的距离以及被穿越的材质，直接关系到光的衰减程度；加上，还有很复杂的透明材质的次表面散射现象，即光线渗透到透明材质中，在内部发生散射，最后射出物体并进入视野中产生的现象。总而言之，不论在CPU上还是在GPU上，想要精确完善的模拟光透现象是一件相当复杂的事情。</p><h3 id="snell-与-fresbel">Snell 与 Fresbel</h3><p>折射率<span class="math display">\[ n\]</span>,等于光在真空中的速度<span class="math display">\[ c\]</span>与在透明介质中的速度 <span class="math display">\[v\]</span>之比。 <span class="math display">\[n = \frac{c}{v}\]</span></p><p>常见折射率:</p><table><thead><tr class="header"><th style="text-align: left;">材质</th><th style="text-align: left;">折射率</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">真空/空气</td><td style="text-align: left;">1.0/1.0003</td></tr><tr class="even"><td style="text-align: left;">水</td><td style="text-align: left;">1.333</td></tr><tr class="odd"><td style="text-align: left;">玻璃</td><td style="text-align: left;">1.5-1.7</td></tr><tr class="even"><td style="text-align: left;">钻石</td><td style="text-align: left;">2.417</td></tr><tr class="odd"><td style="text-align: left;">冰</td><td style="text-align: left;">1.309</td></tr></tbody></table><ul><li>Snell定律Snell定律描述光纤从一个介质传播到另一个介质时，入射角、折射角和介质折射率的关系(等式方程)。</li></ul><p><span class="math display">\[    \sin\theta_{i}*n_{i} = \sin\theta_{t}*n_{t}, 入射角 \theta_{i}, i对t 的折射率为 n_{i}， 折射率角度为\theta_{t}, t    对 i的折射率为n_{i}。\]</span></p><ul><li>色散</li></ul><p>正常色散的经验公式，柯西公式。</p><ul><li>Fresbel定律</li></ul><p>光线照射到透明物体上时，一部分发生反射，一部分进入物体内部并在介质交界处发生折射，被反射和折射的光通量存在一定的比率关系，这个比率关系可以通过 Fresnel 定律进行计算。</p><p>一个完整的 fresnel 公式依赖于折射率、消光率和入射角度等因素，该公式的推导本质上是属于物理光学的部分。 Fresnel 系数的简易推导方式，近似度在1%。</p><p><span class="math display">\[    F = f_{0} + (1 - f_{0})(1 - V.H)^5\]</span> <span class="math display">\[f_{0} \]</span>为入射角度接近0（入射方向靠近法向量）时的 Fresnel 反射系数，V是指向视点的观察方向，H为半角向量。观察公式，可以得出一个结论：随着入射角趋近 90，反射系数趋近1，即擦地入射时，所有入射光都被反射。</p><p>fresnel 反射系数计算公式:</p><p><span class="math display">\[    F \approx  \frac{(n_{i} - n_{t})^2}{(n_{i} + n_{t})^2} +\frac{4n_{1}n_{2}}{(n_{i} + n_{t})^2} *(1 - V.H)^5\]</span></p><p>程序中为了提高性能，通常使用入射角接近 0 时的fresnel系数。精度不高，但是计算速度快，便于硬件实现：</p><p><span class="math display">\[    F \approx  (1 - V.H)^4\]</span></p><h3 id="简单透明光照模型">简单透明光照模型</h3><p>简单透明光照模型不考虑透明物体对光的第二次折射、次表面散射，以及光在穿越透明物体时的强度衰减，只是简单的使用颜色调和的方法，即我们最终所看到的颜色，是物体表面的颜色和背景颜色的叠加。</p><h2 id="投影纹理映射">投影纹理映射</h2><p>投影纹理映射不需要在应用程序中指定顶点纹理坐标，实际上，投影纹理映射中使用的纹理坐标是在顶点着色程序中通过视点矩阵和投影矩阵计算得到的，通常也被称作投影纹理坐标(coordinatesin projective space)。</p><p>齐次纹理坐标通常表示为（s,t,r,q）,以区别于物体位置齐次坐标(x, y, z,w)。一维纹理常用 s 坐标表示，二维纹理常用(s, t)坐标表示，目前忽略 r坐标， q 坐标的作用与齐次坐标点中的 w 坐标非常类似。值一般为1。</p><p>和顶点着色流程基本一样，唯一的区别在于求取顶点投影坐标后的归一化不一样：计算投影纹理坐标需要将投影顶点坐标归一化到【0，1】空间中，实现这一步，可以在需要左乘矩阵normalMatrix, 也可以在着色程序中对顶点投影坐标的每个分量先乘以1/2然后再加上1/2。</p><p>tex2DProj函数与tex2D函数的区别就在于：前者会对齐次纹理坐标除以最后一个分量q，然后再进行纹理检索！</p><h2 id="shadow-map">Shadow Map</h2><p>Shadow Map 是一种基于深度图（depthmap）的阴影生成方法，该方法的主要思想是：在第一遍渲染场景时，将场景的深度信息存放在纹理图片上，这个纹理图片称为深度图；然后在第二次渲染场景时，将深度图中的信息<span class="math display">\[l enth_{1} \]</span>取出，和当前顶点与光源的距离<span class="math display">\[lenth_{2} \]</span>做比较，如果 <span class="math display">\[lenth_{1} \]</span> 小于 <span class="math display">\[lenth_{2} \]</span>，则说明当前顶点被遮挡处于阴影区，然后在片段着色程序中，将该顶点设置为阴影颜色。</p><h3 id="depth-map">depth map</h3><p>深度图是一张 2D 图片，每个像素都记录了从光源到遮挡物（遮挡物就是阴影生成物体）的距离，并且这些像素对应的顶点对于光源而言是“可见的”。</p><h2 id="光线投射算法">光线投射算法</h2><h2 id="other">Other</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/windows/1.windows/"/>
      <url>/2022/08/10/windows/1.windows/</url>
      
        <content type="html"><![CDATA[<h2 id="windows">Windows</h2><ol type="1"><li><p><a href="https://blog.csdn.net/qq_25166683/article/details/81352868">自定义右键菜单</a></p></li><li><p><a href="https://www.cnblogs.com/Wayou/p/3359993.html">注册表</a></p></li><li><p><a href="https://blog.csdn.net/qq_34352738/article/details/79433197">安装msi问题</a></p></li><li><p><a href="https://zhuanlan.zhihu.com/p/29161824">C#调用WindowsAPI</a></p></li><li><p>FreePic2Pdf. 软件 格式为<code>\t</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/xiao-guo-shi-xian/1.2-ping-mian-yin-ying-fang-an/"/>
      <url>/2022/08/10/unity/xiao-guo-shi-xian/1.2-ping-mian-yin-ying-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="平面阴影实现">平面阴影实现</h1><blockquote><p>最近项目优化低端机的渲染性能，对于阴影的处理一方面是关闭阴影，另一方面是简化原有的Shader阴影部分的实现。就在刚才王者打吐之际，闲来无事写个简化版阴影Shader,。</p></blockquote><p>思路很简单：脚下为平面，进行平面投射。没错就是这么简单。因为简单所以高效。</p><p><img src="imgs/design.png"></p><p>由于时刻跟随脚下，所以遇见非平面会镶嵌里面或者伸出。但这并不影响，主要目的是低端机的替代品。</p><p>如果帮助到你，实属荣幸。如果你有更好的方案（主要兼顾性能，其次表现）欢迎留言讨论。</p><p>最后附上效果图 和 全部代码，代码的渲染pass 自己实现，阴影部分可以复制代码，或者usepass 。</p><p>时候不早了, 睡觉， 早安各位！</p><p><img src="imgs/result0.png"></p><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Shadows/LowPassShadow"</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    Properties</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        _ShadowOffset<span class="op">(</span><span class="st">"ShadowOffset"</span><span class="op">,</span> vector<span class="op">)</span> <span class="op">=</span> <span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        _ShadowColor<span class="op">(</span><span class="st">"ShadowColor"</span><span class="op">,</span> Color<span class="op">)</span> <span class="op">=</span> <span class="op">(</span><span class="fl">0.3</span><span class="op">,</span> <span class="fl">0.3</span><span class="op">,</span> <span class="fl">0.3</span><span class="op">,</span> <span class="dv">1</span><span class="op">)</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">[</span>Enum<span class="op">(</span>UnityEngine<span class="op">.</span>Rendering<span class="op">.</span>BlendMode<span class="op">)]</span> _SrcBlend<span class="op">(</span><span class="st">"Src Blend Mode"</span><span class="op">,</span> Float<span class="op">)</span> <span class="op">=</span> <span class="dv">1</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">[</span>Enum<span class="op">(</span>UnityEngine<span class="op">.</span>Rendering<span class="op">.</span>BlendMode<span class="op">)]</span> _DstBlend<span class="op">(</span><span class="st">"Dst Blend Mode"</span><span class="op">,</span> Float<span class="op">)</span> <span class="op">=</span> <span class="dv">10</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        Tags <span class="op">{</span> <span class="st">"RenderType"</span><span class="op">=</span><span class="st">"Opaque"</span> <span class="op">}</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        LOD <span class="dv">100</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">//简单阴影Pass</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        Pass</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>            Name <span class="st">"SampleShadow"</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>            Tags<span class="op">{</span><span class="st">"LightMode"</span> <span class="op">=</span> <span class="st">"ForwardBase"</span><span class="op">}</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>            ZWrite off</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>            <span class="co">//Blend Srcalpha OneminusSrcAlpha</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>            Blend <span class="op">[</span>_SrcBlend<span class="op">]</span> <span class="op">[</span>_DstBlend<span class="op">]</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>            CGPROGRAM</span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma vertex vert</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma fragment frag</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#include </span><span class="im">"UnityCG.cginc"</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#include </span><span class="im">"Lighting.cginc"</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma shader_feature _Off_Shadow</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>            float3 _ShadowOffset<span class="op">;</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>            float4 _ShadowColor <span class="op">=</span> float4<span class="op">(</span><span class="fl">0.3</span><span class="op">,</span> <span class="fl">0.3</span><span class="op">,</span> <span class="fl">0.3</span><span class="op">,</span> <span class="fl">0.5</span><span class="op">);</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>            <span class="dt">const</span> float4 farPosition <span class="op">=</span> float4<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>            float4 vert<span class="op">(</span>float4 vertex<span class="op">:</span>POSITION<span class="op">):</span>SV_POSITION</span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>                float3 light2ObjectDirection <span class="op">=</span> UnityWorldSpaceLightDir<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>                </span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 自己控制光线不要出现仰角</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>                <span class="co">/*</span></span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a><span class="co">                if (light2ObjectDirection.y &lt;= 0.4)</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a><span class="co">                {</span></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a><span class="co">                    return farPosition;</span></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a><span class="co">                }</span></span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a><span class="co">                */</span></span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>                float3 objectWorldPosition <span class="op">=</span> mul<span class="op">(</span>unity_ObjectToWorld<span class="op">,</span> vertex<span class="op">);</span></span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>                float3 objectButtomWorldPosition <span class="op">=</span> mul<span class="op">(</span>unity_ObjectToWorld<span class="op">,</span> float4<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> vertex<span class="op">.</span>w<span class="op">));</span></span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>                float3 outPosition <span class="op">=</span> objectWorldPosition <span class="op">+</span> <span class="op">(</span>objectWorldPosition <span class="op">-</span> objectButtomWorldPosition<span class="op">).</span>y <span class="op">/</span> <span class="op">(-</span>light2ObjectDirection<span class="op">.</span>y<span class="op">)</span> <span class="op">*</span> light2ObjectDirection<span class="op">;</span></span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifdef _Off_Shadow  </span></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> farPosition<span class="op">;</span></span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a><span class="pp">#else</span></span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> mul<span class="op">(</span>UNITY_MATRIX_VP<span class="op">,</span> float4<span class="op">(</span>outPosition <span class="op">-</span> _ShadowOffset<span class="op">,</span> <span class="fl">1.0</span><span class="op">));</span></span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>            float4 frag<span class="op">(</span>float4 position<span class="op">:</span> SV_POSITION<span class="op">)</span> <span class="op">:</span>COLOR</span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> _ShadowColor<span class="op">;</span></span><span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>            ENDCG</span><span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/xiao-guo-shi-xian/1.1-yin-ying-shi-xian-fang-an/"/>
      <url>/2022/08/10/unity/xiao-guo-shi-xian/1.1-yin-ying-shi-xian-fang-an/</url>
      
        <content type="html"><![CDATA[<h1 id="阴影实现算法">阴影实现算法</h1><p><a href="https://zhuanlan.zhihu.com/p/104687855">https://zhuanlan.zhihu.com/p/104687855</a><a href="https://blog.csdn.net/weixin_39845825/article/details/111340354">https://blog.csdn.net/weixin_39845825/article/details/111340354</a></p><p><a href="https://blog.csdn.net/pizi0475/article/details/7934712">https://blog.csdn.net/pizi0475/article/details/7934712</a></p><h2 id="一垂直拉长生成面mesh阴影">一、垂直拉长生成面Mesh阴影</h2><ul><li>[ x ] 平面阴影方案 ## 二、常规Shadowmap</li></ul><h2 id="三pcf">三、PCF</h2><h2 id="四csm">四、CSM</h2><h2 id="五vsm">五、VSM</h2><h2 id="六esm">六、ESM</h2><h2 id="七pcss">七、PCSS</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/xiao-guo-shi-xian/0.yu-ye-xiao-guo/"/>
      <url>/2022/08/10/unity/xiao-guo-shi-xian/0.yu-ye-xiao-guo/</url>
      
        <content type="html"><![CDATA[<h1 id="雨夜效果">雨夜效果</h1><h2 id="特症">特症</h2><ol type="1"><li>长长的高光反射。 不限于夜晚，潮湿的表面也会出现。</li><li>高光反射根据表面粗糙度，呈现出多样性。（越粗糙越暗）。</li><li>高光大小依赖于视角。各向异性反射似乎遵循Blinn-Phong行为(同时Blinn-Phong模型不允许拉伸太多):，然而，当表面是光滑的，我们有一个完美的反射(左)，无论距离，遵循Phong行为</li><li>反射模糊度取决于视角、光线角度、折射率(即镜面)、表面粗糙度和距离光源的距离(但仅在粗糙表面的情况下，对于光滑表面的模糊度不变化):</li><li>：不仅明亮的光源会被反射，所有的东西都会被反射，即使在夜晚反射也是有颜色的(通常黑暗的地方避免看到彩色的反射，因为没有足够的反射光):</li><li>水会在堆积在深处。当有足够的水积累，我们可以看到一层薄的水或一个深的水坑表现出双层行为。我们可以看到水层和下面的表层:</li><li>水层的反射遵循菲涅耳定律。这意味着你在掠射角度(0°)有全反射，而在垂直于表面(90°)时有低反射(事实上每个表面都有菲涅尔反射，但这在水的情况下更明显):</li><li>潮湿表面整体变暗，镜面更明亮</li></ol><p><img src="/imgs/rainnight.jpg"></p><h2 id="实现潮湿的地表">实现潮湿的地表</h2><p>主要分为: * 干燥的区域 *潮湿，但是没有积水的区域，<strong>建议反射系数为5~10， 漫反射Spencular0.1~0.3</strong> * 有积水，但是还没有形成水坑，或者在水坑边缘的区域。 *水坑区域</p><p>潮湿但没有积水的地面， 地面变暗， 镜面反射更明亮，高光凝聚更高。设定WetLevel： 0 为干燥， 1 为湿润， 通过潮湿成都 WetLevel 来控制 gloss高光参数， 压暗 diffuse 颜色。</p><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> DoWetShading<span class="op">(</span>inout float3 albedo<span class="op">,</span> inout <span class="dt">float</span> gloss<span class="op">,</span> <span class="dt">float</span> wetLevel<span class="op">)</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 越潮湿，地面越暗</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        albedo <span class="op">*=</span> lerp<span class="op">(</span><span class="fl">1.0</span><span class="op">,</span> <span class="fl">0.3</span><span class="op">,</span> wetLevel<span class="op">);</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        gloss <span class="op">=</span> min<span class="op">(</span>gloss <span class="op">*</span> lerp<span class="op">(</span><span class="fl">1.0</span><span class="op">,</span> <span class="fl">2.5</span><span class="op">,</span> wetLevel<span class="op">),</span> <span class="fl">1.0</span><span class="op">)</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>再加上一个Mask贴图， 表示水坑的深度和大小。 再加上环境反射和菲尼尔反射。</p><h2 id="菲尼尔反射">菲尼尔反射</h2><blockquote><p>当光到达介质表面，一部分光反射，一部分光折射，当视线垂直于表面，反射会变得非常弱，当视线接近平行于介质表面，反射会变得非常强。比如在湖边，你远远看去，湖面波光粼粼，低头直视湖面，就清澈见底。我们常用的是菲涅尔的近似公式：</p></blockquote><p><span class="math display">\[    F_{Schlick}(n, v, F_0) = F_0 + (1 - F_0)(1 - (n*v))^5  \]</span></p><p>其中F(0)表示当光纤垂直， 0度角摄入介质的基础反射率、常见的菲尼尔 F0反射率： <img src="/imgs/feinier.jpg"></p><p>设置一个积水系数 **_AccumulateWater**. 设BrickF0 为地面的F0值， 0.02为谁的F0 值。</p><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> f0 <span class="op">=</span> lerp<span class="op">(</span>_BrickF0<span class="op">,</span> <span class="fl">0.02</span><span class="op">,</span> _AccumulateWater<span class="op">);</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> frensel <span class="op">=</span> f0 <span class="op">+</span> <span class="op">(</span><span class="dv">1</span><span class="op">-</span> f0<span class="op">)*</span>pow<span class="op">((</span> <span class="dv">1</span><span class="op">-</span> dotNV<span class="op">),</span> <span class="dv">5</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    float3 specular <span class="op">=</span> frensel <span class="op">*</span> <span class="op">((</span>specularPower <span class="op">+</span><span class="fl">2.0</span><span class="op">)/</span> <span class="fl">8.0</span><span class="op">)</span> <span class="op">*</span> pow<span class="op">(</span>dotNH<span class="op">,</span> specularPower<span class="op">)*</span> dotNL<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    float3 reflection <span class="op">=</span> reflect<span class="op">(</span>viewDir<span class="op">,</span> normal<span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    float3 reflCol <span class="op">=</span> texCUBE<span class="op">(</span>_CubeMap<span class="op">,</span> reflection<span class="op">)</span> <span class="op">*</span> glossParam<span class="op">;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    float3 ambient <span class="op">=</span> saturate<span class="op">(</span>_ReflectFactor <span class="op">+</span>frensel<span class="op">)</span> <span class="op">*</span> reflCol<span class="op">;</span></span></code></pre></div><h2 id="地表睡眠涟漪">地表睡眠涟漪</h2><blockquote><p>大部分游戏使用一个动态的ripple法线贴图来实现这个效果。每帧生成一个新的ripple 法线贴图。​生成波纹比较简单的方法是使用动画纹理，缺点就是显示形式比较固定。本文选择程序化纹理方式来实现。从而避免显示重复和比物理模拟成本更低。</p></blockquote><p>我们从纹理中生成不一样大小的动画圆形波纹。文章里的算法会生成不同大小的圆圈，用了一张很特殊的纹理来生成不一样大小的圆形涟漪。</p><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>float3 ComputeRipple<span class="op">(</span>float2 uv<span class="op">,</span> <span class="dt">float</span> currentTime<span class="op">,</span> <span class="dt">float</span> weight<span class="op">)</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    float4 ripple <span class="op">=</span> tex2D<span class="op">(</span>_MainTex<span class="op">,</span>uv<span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//gb 通道从[0,1]变成[-1,1]</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    ripple<span class="op">.</span>yz <span class="op">=</span> ripple<span class="op">.</span>yz <span class="op">*</span> <span class="fl">2.0</span> <span class="op">-</span> <span class="fl">1.0</span><span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//rippleTex的w通道（Alpha通道）圆圈外面都是0</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">//加上时间偏移。dropFrac 限制在[0,1)</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> dropFrac <span class="op">=</span> frac<span class="op">(</span>ripple<span class="op">.</span>w <span class="op">+</span>currentTime<span class="op">);</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">//timeFrac限制在[-1,1],dropFrac - 1.0,可以确保圆圈的外面(ripple.x=0),timeFrac&lt;=0.</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">//从而波纹外面的法线是垂直的。也就是水平的。</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> timeFrac <span class="op">=</span> dropFrac <span class="op">-</span> <span class="fl">1.0</span> <span class="op">+</span> ripple<span class="op">.</span>x<span class="op">;</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 波纹随着时间扩大(dropFrac 变大)，dropFator越小，波纹慢慢变平</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> dropFator <span class="op">=</span> saturate<span class="op">(</span><span class="fl">0.2</span> <span class="op">+</span> weight <span class="op">*</span> <span class="fl">0.8</span> <span class="op">-</span> dropFrac<span class="op">);</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">//从波纹出现开始，时间越大(dropFrac 变大)，dropFator 越小，final 越小，波纹越平。</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">//sin(clamp(timeFrac * 9.0,0.0,3.0)PI)：0-3PI之间，sin就是一个波峰-波谷-波峰的函数图像，</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">//在0-3*PI之外sin函数皆为0.9.0是一个把timeFrac参数放大的因子。</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">//波纹圈内的值，比如波纹中心值，经过sin函数的计算，变成0.也就是说波纹中心点也是平的。这个平的区域，</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 随着时间变大，慢慢扩大，（时间越大，只有红色通道部分越小的地方(红色通道ripple.x渐变到0)，</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">//sin函数才不为0.所有波纹就会有慢慢变大的效果</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> final <span class="op">=</span> dropFator <span class="op">*</span> ripple<span class="op">.</span>x <span class="op">*</span> sin<span class="op">(</span>clamp<span class="op">(</span>timeFrac <span class="op">*</span> <span class="fl">9.0</span><span class="op">,</span><span class="fl">0.0</span><span class="op">,</span><span class="fl">3.0</span><span class="op">)*</span>PI<span class="op">);</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> float3<span class="op">(</span>ripple<span class="op">.</span>yz <span class="op">*</span> final <span class="op">*</span> <span class="fl">0.35</span><span class="op">,</span><span class="fl">1.0</span><span class="op">);</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>输出发现特图</p><div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="cf">return</span> float4<span class="op">(</span>normalize<span class="op">(</span>N<span class="op">)</span> <span class="op">*</span> <span class="fl">0.5</span> <span class="op">+</span> <span class="fl">0.5</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span> </span></code></pre></div><h2 id="涟漪法线贴图和地面混合">涟漪法线贴图和地面混合</h2><p>我们可以利用生成的涟漪法线和地表原本的法线做一次线性插值。</p><div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// ripple tex</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>            float3 rippleNormal <span class="op">=</span> tex2D<span class="op">(</span>_RippleTex<span class="op">,</span>i<span class="op">.</span>uv <span class="op">*</span> _RippleDensity<span class="op">).</span>xyz <span class="op">*</span> <span class="dv">2</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            float3 wRippleNormal <span class="op">=</span> normalize<span class="op">(</span>mul<span class="op">(</span>matToW<span class="op">,</span>rippleNormal<span class="op">));</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            float3 normal <span class="op">=</span> lerp<span class="op">(</span>wNormal<span class="op">,</span>wRippleNormal<span class="op">,</span>_AccumulateWater<span class="op">);</span></span></code></pre></div><h2 id="凹凸间隙积水">凹凸间隙积水</h2><p>​为了模拟出在地表凹凸间隙的水积累效果，文章用高度图表现砖缝的高度变化，用顶点颜色表现水坑深度（这里我们用mask图来控制水坑的深度）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/cha-jian-gou-jian/1.bian-yi-android-cha-jian/"/>
      <url>/2022/08/10/unity/cha-jian-gou-jian/1.bian-yi-android-cha-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="unity构建android插件">Unity构建Android插件</h2><ol type="1"><li><a href="https://blog.csdn.net/zp288105109a/article/details/81569079">AAR包构建</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unity-xuan-ran-tan-jiu/1.unity-yin-ying-tan-jiu/"/>
      <url>/2022/08/10/unity/unity-xuan-ran-tan-jiu/1.unity-yin-ying-tan-jiu/</url>
      
        <content type="html"><![CDATA[<h1 id="阴影探究">阴影探究</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unitysrp/5.api/"/>
      <url>/2022/08/10/unity/unitysrp/5.api/</url>
      
        <content type="html"><![CDATA[<h1 id="api-学习记录">API 学习记录</h1><h2 id="一渲染管线">一、渲染管线</h2><h3 id="renderpipelineasset">1. RenderPipelineAsset</h3><blockquote><p>namespace UnityEngine.Rendering</p></blockquote><blockquote><p>用来创建特殊的<code>IRenderPipeline</code> 资源类型。默认继承自<code>IRenderPipelineAsset</code>. 管理此资源类型的生命周期,也可以用来管理创建以及修改的事件等。</p></blockquote><ul><li><p>抽象方法<code>protected abstract RenderPipeline CreatePipeline()</code>,用来创建 <code>IRenderPipeline</code> 对象。</p></li><li><p>其他默认Shader 和材质。</p></li></ul><h3 id="renderpipeline">2. RenderPipeline</h3><blockquote><p>namespace UnityEngine.Rendering</p></blockquote><blockquote><p>定义一系列命令，用来设置一帧的渲染.默认继承自<code>IRenderPipelineAsset</code>. 管理此资源类型的生命周期,也可以用来管理创建以及修改的事件等。</p></blockquote><ul><li><p>渲染回调函数。 protected override voidRender(ScriptableRenderContext context, Camera[] cameras)。自定义渲染入口函数。</p></li><li><p>void ProcessRenderRequests(ScriptableRenderContext context,Camera camera, List&lt;Camera.RenderRequest&gt; renderRequests)</p></li></ul><h3 id="scriptablerendercontext">3. ScriptableRenderContext</h3><blockquote><p>定义自定义渲染管线使用的状态和绘制命令。</p></blockquote><ul><li><p>BeginRenderPass<br>开始执行一个新的渲染通道。<strong>任何时候只能激活一个渲染通道。</strong></p></li><li><p>BeginScopedRenderPass 使用 <code>Using</code> 语法包裹, 代替再写EndRenderPass。<strong>任何时候只能激活一个渲染通道。</strong></p></li><li><p>BeginScopedSubPass<br>在一个RenderPass 下 调用一个新的<code>子</code>Pass。 使用<code>Using</code> 语法包裹, 代替再写EndRenderSubPass。<strong>任何时候只能激活一个<code>子</code>渲染通道。</strong></p></li><li><p>BeginSubPass<br>开始执行一个新的子渲染通道。<strong>任何时候只能激活一个子渲染通道。</strong></p></li><li><p>Cull<br>根据<code>ScriptableCullingParameters</code>执行筛选，这些参数通常是从当前渲染的摄像机中获得的。<code>Camera.TryGetCullingParameters</code></p></li><li><p>DrawGizmos<br>Schedules the drawing of a subset of Gizmos (before or afterpost-processing) for the given Camera. 在后处理前或者后处理后执行相机绘制 Gizmos子集合。 'PreImageEffects, PostImageEffects'</p></li><li><p>DrawRenderers执行绘制一组可见对象，并可选择重写GPU的渲染状态</p></li><li><p>DrawShadows<br>执行为一个光源绘制阴影投射。</p></li><li><p>DrawSkybox<br>绘制 skybox</p></li><li><p>DrawUIOverlay 绘制 UI overlay.</p></li><li><p>DrawWireOverlay<br>使用 Scene View Camer 绘制 <code>wireframe overlay</code></p></li><li><p>EndRenderPass Schedules the end of a currently active renderpass.</p></li><li><p>EndSubPass<br>结束当前激活的 subpass</p></li><li><p>ExecuteCommandBuffer<br>执行自定义渲染的 commandbuffer</p></li><li><p>ExecuteCommandBufferAsync 异步执行自定义的渲染 commandbuffer，队列顺序由<code>ComputeQueueType</code>决定。</p></li><li><p>InvokeOnRenderObjectCallback<br>执行<code>Monobehaviour</code>脚本的 <code>OnRenderObject</code>回调函数。</p></li><li><p>SetupCameraProperties 将相机的参数设置到Shader的全局参数。</p></li><li><p>StartMultiEye Schedules a fine-grained beginning of stereorendering on the ScriptableRenderContext.</p></li><li><p>StereoEndRender<br>Schedule notification of completion of stereo rendering on a singleframe.</p></li><li><p>StopMultiEye<br>Schedules a stop of stereo rendering on theScriptableRenderContext.</p></li><li><p>Submit<br>提交所有绘制命令</p></li><li><p>EmitGeometryForCamera Emits UI geometry for rendering for thespecified camera.</p></li><li><p>EmitWorldGeometryForSceneView Emits UI geometry into the Sceneview for rendering.</p></li></ul><h2 id="二渲染">二、渲染</h2><h3 id="基础设置">1. 基础设置</h3><pre><code>    // 裁剪参数    if (!camera.TryGetCullingParameters(out var cullingParameters)) return;    //重新设置    // 裁剪参数    CullingResults cullingResults = context.Cull(ref cullingParameters);    // 设置相机参数 到Shader 全局变量。    context.SetupCameraProperties(camera);    //光照 阴影。    //</code></pre><ul><li>ScriptableCullingParameters 裁剪参数。</li><li>CullingResults 裁剪Results参数。</li></ul><h3 id="绘制">2. 绘制</h3><ul><li><p>public void DrawRenderers(Rendering.CullingResultscullingResults, ref Rendering.DrawingSettings drawingSettings, refRendering.FilteringSettings filteringSettings);</p></li><li><p>public void DrawRenderers(Rendering.CullingResultscullingResults, ref Rendering.DrawingSettings drawingSettings, refRendering.FilteringSettings filteringSettings, refRendering.RenderStateBlock stateBlock);</p></li><li><p>public void DrawRenderers(Rendering.CullingResultscullingResults, ref Rendering.DrawingSettings drawingSettings, refRendering.FilteringSettings filteringSettings, NativeArray<shadertagid>renderTypes, NativeArray<renderstateblock> stateBlocks);</renderstateblock></shadertagid></p></li></ul><blockquote><p>绘制子对象集合。</p></blockquote><blockquote><p>cullingResults 裁剪剔除后的可见对象。 drawingSettings设置如何绘制物体 filteringSettings指定渲染管道应该如何进一步过滤场景中的渲染器。 stateBlock 重定义渲染状态renderTypes 选择渲染的RenderType 集合 stateBlocks 重定义渲染状态集合</p></blockquote><ul><li>DrawingSettings<ul><li>ShaderTagId</li><li>SortingSettings</li></ul></li><li>SortingCriteria<ul><li>SortingLayer 通过<code>sorting layer</code> 排序.</li><li>RenderQueue 通过<code>render queue</code> 排序.</li><li>BackToFront 通过<code>从后往前</code> 排序</li><li>QuantizedFrontToBack 通过<code>从前往后</code> 排序.</li><li>OptimizeStateChanges 对对象进行排序以减少绘制状态的变化.</li><li>CanvasOrder 通过Canvas顺序排序渲染器.</li><li>RendererPriority 通过<code>renderer priority</code>排序渲染器.</li><li>CommonOpaque 典型的不透明对象排序。</li><li>CommonTransparent 典型的透明度排序。</li></ul><blockquote><p>可组合排序</p></blockquote></li><li>SetShaderPassName Set the shader passes that this draw call canrender.</li><li>FilteringSettings<ul><li>excludeMotionVectorObjects true当前渲染的对象排除在外，默认false.</li><li>layerMask 只渲染此layermask</li><li>renderingLayerMask The rendering layer mask to use when filteringavailable renderers for drawing.</li><li>renderQueueRange 渲染QueueRange的设置</li><li>sortingLayerRange 渲染 sortinglayer Range的设置。</li></ul></li></ul><h3 id="drawcall-api">3. Drawcall API</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unitysrp/4.yin-ying/"/>
      <url>/2022/08/10/unity/unitysrp/4.yin-ying/</url>
      
        <content type="html"><![CDATA[<h1 id="阴影">阴影</h1><blockquote><p>计算光照影响，需要重要的参数<code>法线</code> 和 <code>光</code>以及<code>材质属性</code>。 法线长度？</p></blockquote><h2 id="基础修改">基础修改</h2><ol type="1"><li>添加 Pass'Tag</li></ol><pre><code>Tags {    "LightMode" = "CustomLit"}</code></pre><ol start="2" type="1"><li>添加绘制代码</li></ol><pre><code>litShaderTagId = new ShaderTagId("CustomLit");//...drawingSettings.SetShaderPassName(1, litShaderTagId);</code></pre><ol start="3" type="1"><li>着色器结构添加法线属性</li></ol><pre><code>struct a2v {    float3 position : POSITION;    float3 normal : NORMAL;    //...    UNITY_VERTEX_INPUT_INSTANCE_ID}struct v2f {    float3 position : SV_POSITION;    float3 normal : VAR_NORMAL;    //...    UNITY_VERTEX_INPUT_INSTANCE_ID}v2f vert(a2v input){    //...    output.normal = TransformObjectToWorldNormal(input.normal);    //...}float4 frag(v2f input):SV_Target{    float4 base = (1.0, 1.0, 1.0, 1.0);    // 使用法线长度进行显示    base.rgb = abs(length(input.normal) - 1.0) * 10.0;    return base;}</code></pre><h2 id="光照计算">光照计算</h2><h3 id="简单使用">简单使用</h3><ol type="1"><li>定义光照计算属性结构</li></ol><pre><code>struct Surface {    float3 normal;    float3 color;    float alpha;};</code></pre><ol start="2" type="1"><li>frag 进行属性填充和计算</li></ol><pre><code>//...    Surface surface;    surface.normal = normalize(input.normal);    surface.color = base.rgb;    surface.alpha = base.a;    return float4(surface.color, surface.alpha);//...</code></pre><ol start="3" type="1"><li>计算光照</li></ol><pre><code>float3 color = GetLighting(surface);return float4(color, surface.alpha);</code></pre><pre><code>// 基础版本 使用法线y分量 作为影响值。float3 GetLighting (Surface surface) {    return surface.normal.y * surface.color;}</code></pre><h3 id="光照计算-1">光照计算</h3><ol type="1"><li>定义光源属性</li></ol><pre><code>// 基础版本 颜色和方向。struct Light {    float3 color;    float3 direction;};</code></pre><ol start="2" type="1"><li>光照函数</li></ol><p>** saturate 截止在0-1 范围， 去掉负值，也就是背面影响。**</p><pre><code>// 使用光照在法线的分量 和 光照颜色 乘积作为影响因子float3 IncomingLight (Surface surface, Light light) {    return saturate(dot(surface.normal, light.direction)) * light.color;}// 融合光照影响和材质颜色属性。float3 GetLighting (Surface surface, Light light) {    return IncomingLight(surface, light) * surface.color;}// todo, 这个省却光照， 使用太阳光作为默认参数。float3 GetLighting (Surface surface) {    return GetLighting(surface, GetDirectionalLight());}</code></pre><ol start="3" type="1"><li>添加直线光数据给GPU</li></ol><p>Shader部分定义。</p><pre><code>CBUFFER_START(_CustomLight)    float3 _DirectionalLightColor;    float3 _DirectionalLightDirection;CBUFFER_ENDLight GetDirectionalLight () {    Light light;    light.color = _DirectionalLightColor;    light.direction = _DirectionalLightDirection;    return light;}</code></pre><p>C# 部分进行传输数据。 使用commandbuffer 进行设置</p><pre><code>sing UnityEngine;using UnityEngine.Rendering;public class Lighting {    // Shader 属性    static int        dirLightColorId = Shader.PropertyToID("_DirectionalLightColor"),        dirLightDirectionId = Shader.PropertyToID("_DirectionalLightDirection");    const string bufferName = "Lighting";    CommandBuffer buffer = new CommandBuffer {        name = bufferName    };        public void Setup (ScriptableRenderContext context) {        buffer.BeginSample(bufferName);        SetupDirectionalLight();        buffer.EndSample(bufferName);        context.ExecuteCommandBuffer(buffer);        buffer.Clear();    }        void SetupDirectionalLight () {        Light light = RenderSettings.sun; // **默认的太阳光，因此场景中必须至少有一个。也就是说光照设置中的`Sun Source`值不能为空。**        buffer.SetGlobalVector(dirLightColorId, light.color.linear * light.intensity); //**.linear 这个很重要**        buffer.SetGlobalVector(dirLightDirectionId, -light.transform.forward);    }}</code></pre><p>在Render 中进行调用</p><pre><code>Lighting lighting = new Lighting();//...lighting.Setup(context);</code></pre><h3 id="改进完善版本-使用剔除的可见光-和多光源">改进完善版本，使用剔除的可见光 和多光源</h3><ul><li>改进1，使用剔除的可见光，而不是直接使用 Sun。</li><li>改进2，传递光原数组 、颜色数组 和光源数量</li><li>改进3，传递数组，Shader也跟着改，并且混合多光源影响</li><li>改进4，使用Linear光照绘制。<code>GraphicsSettings.lightsUseLinearIntensity = true;</code></li></ul><p>同样问题， 至少有一个直线光。</p><pre><code>// 渲染管线设置`GraphicsSettings.lightsUseLinearIntensity = true;`</code></pre><pre><code>// Render调用修改lighting.Setup(context, cullingResults);</code></pre><pre><code>    // 光源设置数据修改    const int maxDirLightCount = 4;    // 对应Shader 属性    static int        dirLightCountId = Shader.PropertyToID("_DirectionalLightCount"),            dirLightColorsId = Shader.PropertyToID("_DirectionalLightColors"),        dirLightDirectionsId = Shader.PropertyToID("_DirectionalLightDirections");    static Vector4[]        dirLightColors = new Vector4[maxDirLightCount],        dirLightDirections = new Vector4[maxDirLightCount];    //    CullingResults cullingResults;    public void Setup (        ScriptableRenderContext context, CullingResults cullingResults    ) {        this.cullingResults = cullingResults;        buffer.BeginSample(bufferName);        //SetupDirectionalLight();        // 修改为使用多光源        SetupLights();        //…    }    //...    //    void SetupDirectionalLight (int index, VisibleLight visibleLight) {        dirLightColors[index] = visibleLight.finalColor;        dirLightDirections[index] = -visibleLight.localToWorldMatrix.GetColumn(2);    }    void SetupLights () {        NativeArray&lt;VisibleLight&gt; visibleLights = cullingResults.visibleLights;        for (int i = 0; i &lt; visibleLights.Length; i++) {            VisibleLight visibleLight = visibleLights[i];            // 只处理直线光影响 和最大数量支持以内的直线光。            if (visibleLight.lightType == LightType.Directional) {                ** 值类型拷贝会引起内存增长，因此改为ref形式 **                SetupDirectionalLight(dirLightCount++, ref visibleLight);                if (dirLightCount &gt;= maxDirLightCount) {                    break;                }            }        }        buffer.SetGlobalInt(dirLightCountId, visibleLights.Length);        buffer.SetGlobalVectorArray(dirLightColorsId, dirLightColors);        buffer.SetGlobalVectorArray(dirLightDirectionsId, dirLightDirections);    }</code></pre><p>Shader部分修改</p><pre><code>#define MAX_DIRECTIONAL_LIGHT_COUNT 4CBUFFER_START(_CustomLight)    //float4 _DirectionalLightColor;    //float4 _DirectionalLightDirection;    int _DirectionalLightCount;    float4 _DirectionalLightColors[MAX_DIRECTIONAL_LIGHT_COUNT];    float4 _DirectionalLightDirections[MAX_DIRECTIONAL_LIGHT_COUNT];CBUFFER_ENDint GetDirectionalLightCount () {    return _DirectionalLightCount;}Light GetDirectionalLight (int index) {    Light light;    light.color = _DirectionalLightColors[index].rgb;    light.direction = _DirectionalLightDirections[index].xyz;    return light;}// 使用 多光源混合float3 GetLighting (Surface surface) {    float3 color = 0.0;    for (int i = 0; i &lt; GetDirectionalLightCount(); i++) {        color += GetLighting(surface, GetDirectionalLight(i));    }    return color;}</code></pre><p>由于 <code>GetDirectionalLightCount();</code> 作为循环长度。而老版本OpenGL ES 2.0和WebGL 1.0图形api在默认情况下不能处理这样的循环，以及线性光照。所以使用<code>#pragma target 3.5</code>指令将着色器的目标级别提升到3.5。</p><pre><code>HLSLPROGRAM#pragma target 3.5//…ENDHLSL</code></pre><h3 id="brdf">BRDF</h3><p>前面使用简化的光照模型只能处理理想的细节，使用BRDF（双向反射分布函数） 可以处理更多样化的细节表面。 有很多种BRDF的实现，性能上有所不同， 可以使用 <code>Universal RP</code>版本的 BRDF实现。</p><p>理想的光线反射按照镜面反射。但是如果表面有更多的细节，不够平坦，那么就可能会向四周进行反射。因此无论相机在哪里，从表面接收到的漫射光的量是相同的。但这意味着我们观测到的光能远小于到达表面碎片的光能。</p><ol type="1"><li>添加细节控制属性</li></ol><pre><code>_Metallic ("Metallic", Range(0, 1)) = 0 // 金属度_Smoothness ("Smoothness", Range(0, 1)) = 0.5 //光滑度</code></pre><pre><code>UNITY_INSTANCING_BUFFER_START(UnityPerMaterial)    UNITY_DEFINE_INSTANCED_PROP(float4, _BaseMap_ST)    UNITY_DEFINE_INSTANCED_PROP(float4, _BaseColor)    UNITY_DEFINE_INSTANCED_PROP(float, _Cutoff)    // 添加至 Instanced 属性    UNITY_DEFINE_INSTANCED_PROP(float, _Metallic)    UNITY_DEFINE_INSTANCED_PROP(float, _Smoothness)UNITY_INSTANCING_BUFFER_END(UnityPerMaterial)</code></pre><pre><code>struct Surface {    float3 normal;    float3 color;    float alpha;    // 细节表面添加 金属度和光滑度 属性。    float metallic;    float smoothness;};</code></pre><pre><code>float4 frag(v2f input): SV_Target{    Surface surface;    surface.normal = normalize(input.normalWS);    surface.color = base.rgb;    surface.alpha = base.a;    // 赋值添加金属度和光滑度    surface.metallic = UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Metallic);    surface.smoothness =        UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Smoothness);        // ...}</code></pre><ol start="2" type="1"><li>测试代码，进行金属度和光滑度赋值</li></ol><pre><code>static int        baseColorId = Shader.PropertyToID("_BaseColor"),        cutoffId = Shader.PropertyToID("_Cutoff"),        metallicId = Shader.PropertyToID("_Metallic"),        smoothnessId = Shader.PropertyToID("_Smoothness");        //...        block.SetFloat(metallicId, metallic);        block.SetFloat(smoothnessId, smoothness);        GetComponent&lt;Renderer&gt;().SetPropertyBlock(block);</code></pre><ol start="3" type="1"><li>添加BRDF 结构，结构化 BRDF影响值</li></ol><pre><code>struct BRDF {    float3 diffuse;    float3 specular;    float roughness;};</code></pre><ol start="4" type="1"><li>添加 BRDF 光照函数</li></ol><pre><code>//简单使用， 只用 漫反射进行影响。BRDF GetBRDF (Surface surface) {    BRDF brdf;    brdf.diffuse = surface.color;    brdf.specular = 0.0;    brdf.roughness = 1.0;    return brdf;}float3 GetLighting (Surface surface, BRDF brdf, Light light) {    return IncomingLight(surface, light) * brdf.diffuse;}float3 GetLighting (Surface surface, BRDF brdf) {    float3 color = 0.0;    for (int i = 0; i &lt; GetDirectionalLightCount(); i++) {        color += GetLighting(surface, brdf, GetDirectionalLight(i));    }    return color;}// Shader中使用。BRDF brdf = GetBRDF(surface);float3 color = GetLighting(surface, brdf);</code></pre><ol start="5" type="1"><li>使用反射率 BRDF</li></ol><p>漫反射 和 高光</p><pre><code>#define MIN_REFLECTIVITY 0.04float OneMinusReflectivity (float metallic) {    float range = 1.0 - MIN_REFLECTIVITY;    return range - metallic * range;}//...float oneMinusReflectivity = OneMinusReflectivity(surface.metallic);brdf.diffuse = surface.color * oneMinusReflectivity;//brdf.specular = surface.color - brdf.diffuse; // 简单使用进出相等。// 使用金属度 进行差值 colorbrdf.specular = lerp(MIN_REFLECTIVITY, surface.color, surface.metallic);//...</code></pre><p>粗糙度</p><pre><code>// 使用 Universal RP 粗糙度转换#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonMaterial.hlsl"// 光滑度 转换为粗糙度 1 - 光滑度。float perceptualRoughness =        PerceptualSmoothnessToPerceptualRoughness(surface.smoothness);    // 粗糙度平方    brdf.roughness = PerceptualRoughnessToRoughness(perceptualRoughness);</code></pre><p>高光部分需要使用到 视线方向，原理是光照在 视线的分量。</p><pre><code>// 相机位置，后面会在cs中进行设置float3 _WorldSpaceCameraPos;</code></pre><pre><code>//表面细节添加 视线属性struct Surface {    float3 normal;    // 视线    float3 viewDirection;    float3 color;    float alpha;    float metallic;    float smoothness;};</code></pre><pre><code>struct v2f {    float3 position : SV_POSITION;    float3 positionWorld : VAR_POSITION; //储存worldPos    //...}v2f vert(a2v input){    //...    output.positionWorld = TransformObjectToWorld(input.position);    output.position = TransformWorldToHClip(output.positionWorld);    //...}float4 frag(v2f input): SV_Target{    surface.viewDirection = normalize(_WorldSpaceCameraPos - input.positionWorld);}</code></pre><p>高光强度计算, 使用简化版本的 <code>CookTorrance BRDF</code>，公式：BRDF TODO</p><h2 id="shadergui">ShaderGUI</h2><p>通过在 Shader 最后中指定 自定义的ShaderGUI</p><pre><code>Shader "ShaderName" {    //...    CustomEditor "CustomShaderGUI"}</code></pre><p>C#</p><pre><code>public class CustomShaderGUI : ShaderGUI {    public override void OnGUI (MaterialEditor materialEditor, MaterialProperty[] properties)    {        //base.OnGUI (materialEditor, properties);        Material targetMat = materialEditor.target as Material;        //...    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unitysrp/3.quan-ju-guang/"/>
      <url>/2022/08/10/unity/unitysrp/3.quan-ju-guang/</url>
      
        <content type="html"><![CDATA[<h1 id="全局光">全局光</h1><blockquote><p>计算光照影响，需要重要的参数<code>法线</code> 和 <code>光</code>以及<code>材质属性</code>。 法线长度？</p></blockquote><h2 id="基础修改">基础修改</h2><ol type="1"><li>添加 Pass'Tag</li></ol><pre><code>Tags {    "LightMode" = "CustomLit"}</code></pre><ol start="2" type="1"><li>添加绘制代码</li></ol><pre><code>litShaderTagId = new ShaderTagId("CustomLit");//...drawingSettings.SetShaderPassName(1, litShaderTagId);</code></pre><ol start="3" type="1"><li>着色器结构添加法线属性</li></ol><pre><code>struct a2v {    float3 position : POSITION;    float3 normal : NORMAL;    //...    UNITY_VERTEX_INPUT_INSTANCE_ID}struct v2f {    float3 position : SV_POSITION;    float3 normal : VAR_NORMAL;    //...    UNITY_VERTEX_INPUT_INSTANCE_ID}v2f vert(a2v input){    //...    output.normal = TransformObjectToWorldNormal(input.normal);    //...}float4 frag(v2f input):SV_Target{    float4 base = (1.0, 1.0, 1.0, 1.0);    // 使用法线长度进行显示    base.rgb = abs(length(input.normal) - 1.0) * 10.0;    return base;}</code></pre><h2 id="光照计算">光照计算</h2><h3 id="简单使用">简单使用</h3><ol type="1"><li>定义光照计算属性结构</li></ol><pre><code>struct Surface {    float3 normal;    float3 color;    float alpha;};</code></pre><ol start="2" type="1"><li>frag 进行属性填充和计算</li></ol><pre><code>//...    Surface surface;    surface.normal = normalize(input.normal);    surface.color = base.rgb;    surface.alpha = base.a;    return float4(surface.color, surface.alpha);//...</code></pre><ol start="3" type="1"><li>计算光照</li></ol><pre><code>float3 color = GetLighting(surface);return float4(color, surface.alpha);</code></pre><pre><code>// 基础版本 使用法线y分量 作为影响值。float3 GetLighting (Surface surface) {    return surface.normal.y * surface.color;}</code></pre><h3 id="光照计算-1">光照计算</h3><ol type="1"><li>定义光源属性</li></ol><pre><code>// 基础版本 颜色和方向。struct Light {    float3 color;    float3 direction;};</code></pre><ol start="2" type="1"><li>光照函数</li></ol><p>** saturate 截止在0-1 范围， 去掉负值，也就是背面影响。**</p><pre><code>// 使用光照在法线的分量 和 光照颜色 乘积作为影响因子float3 IncomingLight (Surface surface, Light light) {    return saturate(dot(surface.normal, light.direction)) * light.color;}// 融合光照影响和材质颜色属性。float3 GetLighting (Surface surface, Light light) {    return IncomingLight(surface, light) * surface.color;}// todo, 这个省却光照， 使用太阳光作为默认参数。float3 GetLighting (Surface surface) {    return GetLighting(surface, GetDirectionalLight());}</code></pre><ol start="3" type="1"><li>添加直线光数据给GPU</li></ol><p>Shader部分定义。</p><pre><code>CBUFFER_START(_CustomLight)    float3 _DirectionalLightColor;    float3 _DirectionalLightDirection;CBUFFER_ENDLight GetDirectionalLight () {    Light light;    light.color = _DirectionalLightColor;    light.direction = _DirectionalLightDirection;    return light;}</code></pre><p>C# 部分进行传输数据。 使用commandbuffer 进行设置</p><pre><code>sing UnityEngine;using UnityEngine.Rendering;public class Lighting {    // Shader 属性    static int        dirLightColorId = Shader.PropertyToID("_DirectionalLightColor"),        dirLightDirectionId = Shader.PropertyToID("_DirectionalLightDirection");    const string bufferName = "Lighting";    CommandBuffer buffer = new CommandBuffer {        name = bufferName    };        public void Setup (ScriptableRenderContext context) {        buffer.BeginSample(bufferName);        SetupDirectionalLight();        buffer.EndSample(bufferName);        context.ExecuteCommandBuffer(buffer);        buffer.Clear();    }        void SetupDirectionalLight () {        Light light = RenderSettings.sun; // **默认的太阳光，因此场景中必须至少有一个。也就是说光照设置中的`Sun Source`值不能为空。**        buffer.SetGlobalVector(dirLightColorId, light.color.linear * light.intensity); //**.linear 这个很重要**        buffer.SetGlobalVector(dirLightDirectionId, -light.transform.forward);    }}</code></pre><p>在Render 中进行调用</p><pre><code>Lighting lighting = new Lighting();//...lighting.Setup(context);</code></pre><h3 id="改进完善版本-使用剔除的可见光-和多光源">改进完善版本，使用剔除的可见光 和多光源</h3><ul><li>改进1，使用剔除的可见光，而不是直接使用 Sun。</li><li>改进2，传递光原数组 、颜色数组 和光源数量</li><li>改进3，传递数组，Shader也跟着改，并且混合多光源影响</li><li>改进4，使用Linear光照绘制。<code>GraphicsSettings.lightsUseLinearIntensity = true;</code></li></ul><p>同样问题， 至少有一个直线光。</p><pre><code>// 渲染管线设置`GraphicsSettings.lightsUseLinearIntensity = true;`</code></pre><pre><code>// Render调用修改lighting.Setup(context, cullingResults);</code></pre><pre><code>    // 光源设置数据修改    const int maxDirLightCount = 4;    // 对应Shader 属性    static int        dirLightCountId = Shader.PropertyToID("_DirectionalLightCount"),            dirLightColorsId = Shader.PropertyToID("_DirectionalLightColors"),        dirLightDirectionsId = Shader.PropertyToID("_DirectionalLightDirections");    static Vector4[]        dirLightColors = new Vector4[maxDirLightCount],        dirLightDirections = new Vector4[maxDirLightCount];    //    CullingResults cullingResults;    public void Setup (        ScriptableRenderContext context, CullingResults cullingResults    ) {        this.cullingResults = cullingResults;        buffer.BeginSample(bufferName);        //SetupDirectionalLight();        // 修改为使用多光源        SetupLights();        //…    }    //...    //    void SetupDirectionalLight (int index, VisibleLight visibleLight) {        dirLightColors[index] = visibleLight.finalColor;        dirLightDirections[index] = -visibleLight.localToWorldMatrix.GetColumn(2);    }    void SetupLights () {        NativeArray&lt;VisibleLight&gt; visibleLights = cullingResults.visibleLights;        for (int i = 0; i &lt; visibleLights.Length; i++) {            VisibleLight visibleLight = visibleLights[i];            // 只处理直线光影响 和最大数量支持以内的直线光。            if (visibleLight.lightType == LightType.Directional) {                ** 值类型拷贝会引起内存增长，因此改为ref形式 **                SetupDirectionalLight(dirLightCount++, ref visibleLight);                if (dirLightCount &gt;= maxDirLightCount) {                    break;                }            }        }        buffer.SetGlobalInt(dirLightCountId, visibleLights.Length);        buffer.SetGlobalVectorArray(dirLightColorsId, dirLightColors);        buffer.SetGlobalVectorArray(dirLightDirectionsId, dirLightDirections);    }</code></pre><p>Shader部分修改</p><pre><code>#define MAX_DIRECTIONAL_LIGHT_COUNT 4CBUFFER_START(_CustomLight)    //float4 _DirectionalLightColor;    //float4 _DirectionalLightDirection;    int _DirectionalLightCount;    float4 _DirectionalLightColors[MAX_DIRECTIONAL_LIGHT_COUNT];    float4 _DirectionalLightDirections[MAX_DIRECTIONAL_LIGHT_COUNT];CBUFFER_ENDint GetDirectionalLightCount () {    return _DirectionalLightCount;}Light GetDirectionalLight (int index) {    Light light;    light.color = _DirectionalLightColors[index].rgb;    light.direction = _DirectionalLightDirections[index].xyz;    return light;}// 使用 多光源混合float3 GetLighting (Surface surface) {    float3 color = 0.0;    for (int i = 0; i &lt; GetDirectionalLightCount(); i++) {        color += GetLighting(surface, GetDirectionalLight(i));    }    return color;}</code></pre><p>由于 <code>GetDirectionalLightCount();</code> 作为循环长度。而老版本OpenGL ES 2.0和WebGL 1.0图形api在默认情况下不能处理这样的循环，以及线性光照。所以使用<code>#pragma target 3.5</code>指令将着色器的目标级别提升到3.5。</p><pre><code>HLSLPROGRAM#pragma target 3.5//…ENDHLSL</code></pre><h3 id="brdf">BRDF</h3><p>前面使用简化的光照模型只能处理理想的细节，使用BRDF（双向反射分布函数） 可以处理更多样化的细节表面。 有很多种BRDF的实现，性能上有所不同， 可以使用 <code>Universal RP</code>版本的 BRDF实现。</p><p>理想的光线反射按照镜面反射。但是如果表面有更多的细节，不够平坦，那么就可能会向四周进行反射。因此无论相机在哪里，从表面接收到的漫射光的量是相同的。但这意味着我们观测到的光能远小于到达表面碎片的光能。</p><ol type="1"><li>添加细节控制属性</li></ol><pre><code>_Metallic ("Metallic", Range(0, 1)) = 0 // 金属度_Smoothness ("Smoothness", Range(0, 1)) = 0.5 //光滑度</code></pre><pre><code>UNITY_INSTANCING_BUFFER_START(UnityPerMaterial)    UNITY_DEFINE_INSTANCED_PROP(float4, _BaseMap_ST)    UNITY_DEFINE_INSTANCED_PROP(float4, _BaseColor)    UNITY_DEFINE_INSTANCED_PROP(float, _Cutoff)    // 添加至 Instanced 属性    UNITY_DEFINE_INSTANCED_PROP(float, _Metallic)    UNITY_DEFINE_INSTANCED_PROP(float, _Smoothness)UNITY_INSTANCING_BUFFER_END(UnityPerMaterial)</code></pre><pre><code>struct Surface {    float3 normal;    float3 color;    float alpha;    // 细节表面添加 金属度和光滑度 属性。    float metallic;    float smoothness;};</code></pre><pre><code>float4 frag(v2f input): SV_Target{    Surface surface;    surface.normal = normalize(input.normalWS);    surface.color = base.rgb;    surface.alpha = base.a;    // 赋值添加金属度和光滑度    surface.metallic = UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Metallic);    surface.smoothness =        UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _Smoothness);        // ...}</code></pre><ol start="2" type="1"><li>测试代码，进行金属度和光滑度赋值</li></ol><pre><code>static int        baseColorId = Shader.PropertyToID("_BaseColor"),        cutoffId = Shader.PropertyToID("_Cutoff"),        metallicId = Shader.PropertyToID("_Metallic"),        smoothnessId = Shader.PropertyToID("_Smoothness");        //...        block.SetFloat(metallicId, metallic);        block.SetFloat(smoothnessId, smoothness);        GetComponent&lt;Renderer&gt;().SetPropertyBlock(block);</code></pre><ol start="3" type="1"><li>添加BRDF 结构，结构化 BRDF影响值</li></ol><pre><code>struct BRDF {    float3 diffuse;    float3 specular;    float roughness;};</code></pre><ol start="4" type="1"><li>添加 BRDF 光照函数</li></ol><pre><code>//简单使用， 只用 漫反射进行影响。BRDF GetBRDF (Surface surface) {    BRDF brdf;    brdf.diffuse = surface.color;    brdf.specular = 0.0;    brdf.roughness = 1.0;    return brdf;}float3 GetLighting (Surface surface, BRDF brdf, Light light) {    return IncomingLight(surface, light) * brdf.diffuse;}float3 GetLighting (Surface surface, BRDF brdf) {    float3 color = 0.0;    for (int i = 0; i &lt; GetDirectionalLightCount(); i++) {        color += GetLighting(surface, brdf, GetDirectionalLight(i));    }    return color;}// Shader中使用。BRDF brdf = GetBRDF(surface);float3 color = GetLighting(surface, brdf);</code></pre><ol start="5" type="1"><li>使用反射率 BRDF</li></ol><p>漫反射 和 高光</p><pre><code>#define MIN_REFLECTIVITY 0.04float OneMinusReflectivity (float metallic) {    float range = 1.0 - MIN_REFLECTIVITY;    return range - metallic * range;}//...float oneMinusReflectivity = OneMinusReflectivity(surface.metallic);brdf.diffuse = surface.color * oneMinusReflectivity;//brdf.specular = surface.color - brdf.diffuse; // 简单使用进出相等。// 使用金属度 进行差值 colorbrdf.specular = lerp(MIN_REFLECTIVITY, surface.color, surface.metallic);//...</code></pre><p>粗糙度</p><pre><code>// 使用 Universal RP 粗糙度转换#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonMaterial.hlsl"// 光滑度 转换为粗糙度 1 - 光滑度。float perceptualRoughness =        PerceptualSmoothnessToPerceptualRoughness(surface.smoothness);    // 粗糙度平方    brdf.roughness = PerceptualRoughnessToRoughness(perceptualRoughness);</code></pre><p>高光部分需要使用到 视线方向，原理是光照在 视线的分量。</p><pre><code>// 相机位置，后面会在cs中进行设置float3 _WorldSpaceCameraPos;</code></pre><pre><code>//表面细节添加 视线属性struct Surface {    float3 normal;    // 视线    float3 viewDirection;    float3 color;    float alpha;    float metallic;    float smoothness;};</code></pre><pre><code>struct v2f {    float3 position : SV_POSITION;    float3 positionWorld : VAR_POSITION; //储存worldPos    //...}v2f vert(a2v input){    //...    output.positionWorld = TransformObjectToWorld(input.position);    output.position = TransformWorldToHClip(output.positionWorld);    //...}float4 frag(v2f input): SV_Target{    surface.viewDirection = normalize(_WorldSpaceCameraPos - input.positionWorld);}</code></pre><p>高光强度计算, 使用简化版本的 <code>CookTorrance BRDF</code>，公式：BRDF TODO</p><h2 id="shadergui">ShaderGUI</h2><p>通过在 Shader 最后中指定 自定义的ShaderGUI</p><pre><code>Shader "ShaderName" {    //...    CustomEditor "CustomShaderGUI"}</code></pre><p>C#</p><pre><code>public class CustomShaderGUI : ShaderGUI {    public override void OnGUI (MaterialEditor materialEditor, MaterialProperty[] properties)    {        //base.OnGUI (materialEditor, properties);        Material targetMat = materialEditor.target as Material;        //...    }}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unitysrp/2.1.srp-zhao-se-qi-he-batcher/"/>
      <url>/2022/08/10/unity/unitysrp/2.1.srp-zhao-se-qi-he-batcher/</url>
      
        <content type="html"><![CDATA[<h1 id="srp着色器和batcher">SRP着色器和Batcher</h1><h2 id="ulitshader-使用hlslprogram-和endhlsl-包裹">UlitShader,使用<code>HLSLPROGRAM</code> 和<code>ENDHLSL</code> 包裹</h2><p>包含文件可以像c/c++ 一样使用。 防止重复编译使用 <code>#if</code>条件编译。 #include 包含路径相对于文件夹路径。</p><p>Unlit.shader</p><pre><code>Shader "Custom RP/Unlit"{    Properties    {        _BaseColor("BaseColor", Color) = (1, 1, 1, 1)    }        SubShader    {        Tags { "RenderType" = "Opaque" }        Pass        {            HLSLPROGRAM            #pragma vertex UnlitPassVertex            #pragma fragment UnlitPassFragment            #include "UnlitPass.hlsl"            ENDHLSL        }    }}</code></pre><p>UnlitPass.hlsl</p><pre><code>#ifndef CUSTOM_UNLIT_PASS_INCLUDED#define CUSTOM_UNLIT_PASS_INCLUDED#include "../ShaderLibrary/Common.hlsl"float4 _BaseColor;float4 unity_LODFade;real4 unity_WorldTransformParams;CBUFFER_ENDfloat4 UnlitPassVertex(float3 positionOS : POSITION) : SV_POSITION{    float3 positionWS = TransformObjectToWorld(positionOS);    return TransformWorldToHClip(positionWS);}float4 UnlitPassFragment() : SV_TARGET{    return _BaseColor;}#endif</code></pre><pre><code>#ifndef CUSTOM_COMMON_INCLUDED#define CUSTOM_COMMON_INCLUDED#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"#include "UnityInput.hlsl"#define UNITY_MATRIX_M unity_ObjectToWorld#define UNITY_MATRIX_I_M unity_WorldToObject#define UNITY_MATRIX_V unity_MatrixV#define UNITY_MATRIX_VP unity_MatrixVP#define UNITY_MATRIX_P glstate_matrix_projectionfloat3 TransformObjectToWorld(float3 positionOS) {    return mul(unity_ObjectToWorld, float4(positionOS, 1.0)).xyz;}float4 TransformWorldToHClip(float3 positionWS) {    return mul(unity_MatrixVP, float4(positionWS, 1.0));}#endif</code></pre><p>UnityInput.hlsl</p><pre><code>#ifndef CUSTOM_UNITY_INPUT_INCLUDED#define CUSTOM_UNITY_INPUT_INCLUDEDfloat4x4 unity_ObjectToWorld;float4x4 unity_WorldToObject;real4 unity_WorldTransformParams;float4x4 unity_MatrixVP;float4x4 unity_MatrixV;float4x4 glstate_matrix_projection;#endif</code></pre><h2 id="现在使用-这个着色器-渲染多个对象-出现drawcall过多问题">现在使用这个着色器 渲染多个对象 出现drawcall过多问题</h2><p>每次绘制调用都需要CPU和GPU之间的通信。如果需要发送大量数据到GPU，那么它可能会浪费时间。当CPU忙于发送数据时，它不能做其他事情。这两个问题都可以降低帧速率。目前我们的方法很简单:每个对象都有自己的draw调用。这是最糟糕的方法，尽管我们最终只发送了很少的数据，所以现在还好。</p><h3 id="srp-batcher">SRP Batcher</h3><p>批处理是结合draw调用的过程，减少了花费在CPU和GPU之间的通信时间。最简单的方法是启用SRP批处理程序。然而，<strong>这只适用于兼容的着色器</strong>，而我们的Unlit着色器不是。您可以在检查器中选择它来验证这一点。有一个表示不兼容的SRP批处理程序行，其中给出了一个原因。</p><p><img src="/imgs/SRP_Batcher.png"></p><p>SPR batch 采用的方法不是减少 draw calls的数量，而是采用了更精简的办法。它把材质的属性先缓存到GPU中，因此这样每个Drawcall就不用发送同样的数据了。这大大减少了GPU与 CPU 的 交流中使用的数据。但是使用这种方式的话会有严格的要求条件：数据是Uniform 类型的结构体。</p><pre><code>CBUFFER_START(UnityPerMaterial)float4 _BaseColor;CBUFFER_END</code></pre><pre><code>CBUFFER_START(UnityPerDraw)    float4x4 unity_ObjectToWorld;    float4x4 unity_WorldToObject;    float4 unity_LODFade;    real4 unity_WorldTransformParams;CBUFFER_END</code></pre><p>如果使用 <code>MaterialPropertyBlock</code> 进行赋值， drawcall又回到 未合批状态。</p><h2 id="gpu-instanced">GPU Instanced</h2><h3 id="添加pragma-multi_compile_instancing指令">添加<code>#pragma multi_compile_instancing</code>指令</h3><p>因为GPUInstanced需要通过数组提供数据，我们的着色器目前不支持它。第一步是添加<code>#pragma multi_compile_instancing</code>指令到我们的着色器的通道块的顶点和片段编译的上方。</p><p><code>#pragma multi_compile_instancing</code></p><p><img src="/imgs/gpu-instancing-material.png"></p><h3 id="添加-gpuinstance-内置">添加 gpuinstance 内置</h3><p><code>#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/UnityInstancing.hlsl"</code></p><h3 id="instance-属性">instance 属性</h3><p>被 UNITY_INSTANCING_BUFFER_START(xxx) 和UNITY_INSTANCING_BUFFER_END（xxx) 包裹， 使用<code>UNITY_DEFINE_INSTANCED_PROP(type, name)</code> 声明。</p><pre><code> //float4 _BaseColor; 改为 UNITY_INSTANCING_BUFFER_START(UnityPerMaterial) UNITY_DEFINE_INSTANCED_PROP(float4, _BaseColor) UNITY_INSTANCING_BUFFER_END(UnityPerMaterial)</code></pre><h3 id="instance-id">instance id</h3><p>顶点输入结构和输出结构分别添加<code>UNITY_VERTEX_INPUT_INSTANCE_ID</code> 属性。</p><p>着色器函数 获取instanceid<code>UNITY_SETUP_INSTANCE_ID(input);</code>。</p><p>通过 <code>UNITY_ACCESS_INSTANCED_PROP(结构名， 字段名)</code>获取属性。</p><pre><code>struct a2v {    float3 position : POSITION;    UNITY_VERTEX_INPUT_INSTANCE_ID};struct v2f {    float3 position : SV_POSITION;    UNITY_VERTEX_INPUT_INSTANCE_ID};v2f vert(a2v input){    v2f output;    UNITY_SETUP_INSTANCE_ID(input);    UNITY_TRANSFER_INSTANCE_ID(input, output);    float3 worldPos = TransformObjectToWorld(input.position);    output.position = TransformWorldToHClip(worldPos);    return output;}float4 frag(v2f input): SV_Target{    UNITY_SETUP_INSTANCE_ID(input);    float4 baseColor = UNITY_ACCESS_INSTANCED_PROP(UnityPerMaterial, _BaseColor);    return baseColor;}</code></pre><p><strong>GPU Instanced需要多少个draw调用取决于平台，因为每个draw调用的最大缓冲区大小是不同的。</strong></p><h2 id="动态合批dynamic-batching">动态合批（Dynamic Batching）</h2><p>还有第三种减少draw调用的方法，称为动态批处理。这是一个古老的技术，将多个共享相同材质的小网格合并成一个更大的网格。当使用每个对象的材质属性时（MaterialBlock），这也不起作用。根据需要生成较大的网格，所以它只适用于小网格。球体太大了，但是立方体就可以了。实例化设置为false， 动态合批设置为true。</p><pre><code>var drawingSettings = new DrawingSettings(unlitShaderTagId, sortingSettings){    enableDynamicBatching = useDynamicBatching,    enableInstancing = useGPUInstancing};</code></pre><h2 id="其他一些">其他一些，</h2><ul><li><p>贴图、采样器 不能作为实例化属性。</p></li><li><p>Shader支持的Aribute：</p><ul><li>[Enum(UnityEngine.Rendering.BlendMode)] ， 作为enum 在材质面板绘制，对应CSharp 枚举。</li><li>[Enum(Off, 0, On, 1)] ， key -v 形式的enum。</li><li>[Toggle(_CLIPPING)]</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unitysrp/2.0.hlsl-cg/"/>
      <url>/2022/08/10/unity/unitysrp/2.0.hlsl-cg/</url>
      
        <content type="html"><![CDATA[<h1 id="unity杂谈-srp为何再也不使用cg">Unity杂谈-SRP为何再也不使用CG</h1><p>首先看Unity前期为何使用Cg, 由于Cg能打通HLSL和GLSL.HLSL和Cg语言类似,差别部分能够用宏来处理,而Cg到HLSL能够由其余工具进行转换.Cg自己的编译器就能够提供Cg到GLSL的转换,<strong>可是, 生成的GLSL遵照的是NVIDIA的规矩, 对AMD,Intel的支持就有问题编译器</strong></p><p><img src="/imgs/HLSL_CG.jpg"> <img src="/imgs/HLSL_CG2.jpg"></p><p>再日后各类着色器语音不断发展, 而Cg则在2012年以后再无更新,在功能上,看看上图中被打叉的Hull Shader, Domain Shader和ComputeShader.在跨平台方面呢, 向Vulkan, Metal的线也难以链接.编译这个时候SPIR-V成为了链接全部着色语言新的桥梁.微软推出了DirectXShaderCompiler,能够把HLSL编译为SPIR-V, 可直接用于Vulkan和较新的OpenGL.KhronosGroup则推出了SPIRV-Cross, 能够把SPIR-V转换为OpenGL的GLSL, OpenGLES的ESSL, Metal的MSL.这样就把全部的着色语言链接了起来, 至于Cg, 很遗憾,已经没有它的位置了.</p><p>参考： <a href="https://www.cnblogs.com/yusjoel/p/13272524.html">https://www.cnblogs.com/yusjoel/p/13272524.html</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/unitysrp/1.ji-ben-srp-gong-zuo-fang-shi/"/>
      <url>/2022/08/10/unity/unitysrp/1.ji-ben-srp-gong-zuo-fang-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="unity-srp-工作方式">Unity SRP 工作方式</h1><h2 id="安装-universal-rp-包universal-通用">安装 Universal RP包(Universal: 通用)</h2><h2 id="定制-renderpipelineasset">定制 RenderPipelineAsset</h2><pre><code>[CreateAssetMenu(menuName = "Rendering/Custom Render Pipeline")]public class CustomRenderPipelineAsset : RenderPipelineAsset{    public bool useSRPBatcher    {        get { return m_UseSRPBatcher; }        set { m_UseSRPBatcher = value; }    }    [SerializeField] bool m_UseSRPBatcher = true;    protected override RenderPipeline CreatePipeline()    {        return new CustomRenderPipeline();    }}</code></pre><h2 id="定制-renderpipeline">定制 RenderPipeline</h2><pre><code>public class CustomRenderPipeline : RenderPipeline{    private CameraRenderer renderer = new CameraRenderer();    protected override void Render(ScriptableRenderContext context, Camera[] cameras)    {        foreach (var camera in cameras)        {            renderer.Render(context, camera);        }    }}</code></pre><h2 id="负责具体渲染事宜的工作render">负责具体渲染事宜的工作Render</h2><pre><code>using System.Collections;using System.Collections.Generic;using UnityEngine;using UnityEngine.Rendering;public partial class CameraRenderer {    static ShaderTagId unlitShaderTagId = new ShaderTagId("SRPDefaultUnlit");    const string bufferName = "Render Camera";    CommandBuffer buffer = new CommandBuffer() { name = bufferName };    private ScriptableRenderContext context;    private Camera camera;    CullingResults cullingResults;    public void Render(ScriptableRenderContext context, Camera camera)    {        this.context = context;        this.camera = camera;        PrepareBuffer();        PrepareForSceneWindow();        if (!Cull())        {            return;        }        Setup();        DrawVisibleGeometry();        DrawUnsupportedShaders();        DrawGizmos();        Submit();    }    private bool Cull()    {        if (camera.TryGetCullingParameters(out ScriptableCullingParameters p))        {            cullingResults = context.Cull(ref p);            return true;        }        return false;    }    private void Setup()    {        context.SetupCameraProperties(camera);        CameraClearFlags flags = camera.clearFlags;        buffer.ClearRenderTarget(flags &lt;= CameraClearFlags.Depth            , flags == CameraClearFlags.Color            , flags == CameraClearFlags.Color? camera.backgroundColor.linear: Color.clear);        buffer.BeginSample(SampleName);        ExecuteBuffer();    }    private void DrawVisibleGeometry()    {        var sortingSettings = new SortingSettings(camera) { criteria = SortingCriteria.CommonOpaque };        var drawingSettings = new DrawingSettings(unlitShaderTagId, sortingSettings);        var filteringSettings = new FilteringSettings(RenderQueueRange.opaque);        context.DrawRenderers(            cullingResults, ref drawingSettings, ref filteringSettings        );        if (drawingSettings.mainLightIndex &gt;= 0)        {            ShadowDrawingSettings shadowDrawingSettings = new ShadowDrawingSettings(cullingResults, drawingSettings.mainLightIndex);            context.DrawShadows(ref shadowDrawingSettings);        }        //context.DrawSkybox(camera);        if (camera.clearFlags == CameraClearFlags.Skybox &amp;&amp; RenderSettings.skybox != null)        {            context.DrawSkybox(camera);        }        sortingSettings.criteria = SortingCriteria.CommonTransparent;        drawingSettings.sortingSettings = sortingSettings;        filteringSettings.renderQueueRange = RenderQueueRange.transparent;        context.DrawRenderers(            cullingResults, ref drawingSettings, ref filteringSettings        );    }    private void Submit()    {        buffer.EndSample(SampleName);        ExecuteBuffer();        context.Submit();    }    private void ExecuteBuffer()    {        context.ExecuteCommandBuffer(buffer);        buffer.Clear();    }}</code></pre><h2 id="设置">设置</h2><ol type="1"><li><p>创建<code>.asset</code>作为资源的形式赋值给<code>ProjectSettings-&gt;Graphics</code>的 <code>Scriptable Render Pipeline Settings</code></p></li><li><p>代码形式<code>GraphicsSettings.renderPipelineAsset = asset;</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/7.ugui-xing-neng-you-hua/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/7.ugui-xing-neng-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui之性能优化">uGUI之性能优化</h2><ol type="1"><li>RaycastTarget，</li><li>Mask， 因为是模板实现，所以会单独Drawcall 模板，在一个drawcall自己。 Mask2D 使用 CanvasRender.clip</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/6.ugui-rebuild/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/6.ugui-rebuild/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui之rebuild">uGUI之Rebuild</h2><blockquote><p>UI的Rebuild.</p></blockquote><h2 id="一基础">一、基础</h2><h3 id="canvas-静态方法">Canvas 静态方法</h3><ul><li><p>Canvas.willRenderCanvases，事件 Canvas 渲染之前被调用</p></li><li><p>Canvas.ForceUpdateCanvases</p></li><li><p>Canvas.ForceUpdateCanvases</p></li></ul><h2 id="canvasrenderer">CanvasRenderer</h2><blockquote><p>GUI的渲染器。依赖于<code>Canvas</code>.</p></blockquote><ol type="1"><li>int absoluteDepth, 相对于Root Canvas的Render' depth</li><li>Vector2 clippingSoftness , 应用于Render的softness(软) 裁剪。</li><li>bool cull { get; set; }</li><li>bool cullTransparentMesh { get; set; }</li><li><strong>CanvasRenderer.DisableRectClipping</strong></li><li><strong>CanvasRenderer.EnableRectClipping(Rect rect);</strong></li></ol><h2 id="二ugui-rebuild设计">二、UGUI Rebuild设计</h2><blockquote><p>作用是监听Canvas.willRenderCanvases，在渲染Canvas之前，更新Mesh、Material、Color、Cull等。<code>CanvasUpdateRegistry</code>管理执行逻辑。 Rebuild对象是继承<code>ICanvasElement</code>接口</p></blockquote><ul><li>接口。</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">interface</span> ICanvasElement</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Rebuild the element for the given stage.</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"executing"</span><span class="kw">&gt;</span><span class="co">The current CanvasUpdate stage being rebuild.</span><span class="kw">&lt;/param&gt;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="fu">Rebuild</span><span class="op">(</span>CanvasUpdate executing<span class="op">);</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Get the transform associated with the ICanvasElement.</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    Transform transform <span class="op">{</span> <span class="kw">get</span><span class="op">;</span> <span class="op">}</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Callback sent when this ICanvasElement has completed layout.</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="fu">LayoutComplete</span><span class="op">();</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Callback sent when this ICanvasElement has completed Graphic rebuild.</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="fu">GraphicUpdateComplete</span><span class="op">();</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Used if the native representation has been destroyed.</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;returns&gt;</span><span class="co">Return true if the element is considered destroyed.</span><span class="kw">&lt;/returns&gt;</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> <span class="fu">IsDestroyed</span><span class="op">();</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li>监听事件</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">protected</span> <span class="fu">CanvasUpdateRegistry</span><span class="op">()</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    Canvas<span class="op">.</span><span class="fu">willRenderCanvases</span> <span class="op">+=</span> PerformUpdate<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li>主要的回调监听处理方式。</li></ul><p>处理步骤枚举定义</p><div class="sourceCode" id="cb3"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">enum</span> CanvasUpdate</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Called before layout.</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    Prelayout <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Called for layout.</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    Layout <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Called after layout.</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    PostLayout <span class="op">=</span> <span class="dv">2</span><span class="op">,</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Called before rendering.</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    PreRender <span class="op">=</span> <span class="dv">3</span><span class="op">,</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Called late, before render.</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    LatePreRender <span class="op">=</span> <span class="dv">4</span><span class="op">,</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Max enum value. Always last.</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    MaxUpdateValue <span class="op">=</span> <span class="dv">5</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li><p><code>PerformUpdate</code>主要步骤归纳</p><ol type="1"><li><p>第一个步骤：移除无用对象。<code>CleanInvalidItems()</code>;</p></li><li><p>LayoutRebuild列表对象 1.对<code>null</code>值的<code>ICanvasElement</code>进行移除 2.对<code>IsDestroyed()</code>的<code>ICanvasElement</code>进行移除，并回调LayoutComplete</p></li><li><p>GraphicRebuild列表对象 1.对<code>null</code>值的<code>ICanvasElement</code>进行移除 2.对<code>IsDestroyed()</code>的<code>ICanvasElement</code>进行移除，并回调LayoutComplete</p></li><li><p>第二步骤：对Layout列表执行<code>Prelayout</code>、<code>Layout</code>、<code>PostLayout</code>。也就是Layout的前中后三个子步骤，最后执行<code>LayoutComplete</code>回调。<code>这有个判断需要对象是</code>UnityEngine.Object<code>对象</code>。</p></li><li><p>Rebuild(CanvasUpdate.Prelayout)</p></li><li><p>Rebuild(CanvasUpdate.Layout)</p></li><li><p>Rebuild(CanvasUpdate.PostLayout)</p></li><li><p>LayoutComplete</p></li><li><p>第三个步骤：执行Cull。<code>ClipperRegistry.Cull()</code></p></li><li><p>第四步骤：对Graphic列表执行<code>PreRender</code>、<code>LatePreRender</code>。也就是Layout的前中后三个子步骤，最后执行<code>GraphicUpdateComplete</code>回调。<code>这有个判断需要对象是</code>UnityEngine.Object<code>对象</code>。</p></li><li><p>Rebuild(CanvasUpdate.PreRender)</p></li><li><p>Rebuild(CanvasUpdate.LatePreRender)</p></li><li><p>GraphicUpdateComplete</p></li></ol></li><li><p>统计主要接口和被使用的对象。</p></li></ul><ol type="1"><li>LayoutRebuild, 监听Layout Rebuild有两个方法。作用一样，区别是将返回值返回。</li><li>void RegisterCanvasElementForLayoutRebuild(ICanvasElement element)，1. ScrollRectBar 2. ScrollRect 3. Slider 4. Toggle</li><li>bool TryRegisterCanvasElementForLayoutRebuild(ICanvasElementelement) 1. LayoutRebuilder</li><li>GraphicRebuild,监听 GraphicRebuild，有两个方法。作用一样，区别是将返回值返回。</li><li>void RegisterCanvasElementForGraphicRebuild(ICanvasElement element)1. Graphic 2. InputField</li><li>bool TryRegisterCanvasElementForGraphicRebuild(ICanvasElementelement) 1. 没有用到</li><li>UnRegisterCanvasElementForRebuild, 取消监听LayoutRebuild和GraphicRebuild。</li></ol><h2 id="具体监听对象的实现">具体监听对象的实现。</h2><h3 id="layout部分">Layout部分。</h3><p>LayoutRebuilder， &gt; 这是一个中间件。 组件通过调用<code>MarkLayoutForRebuild</code>,然后内部通过一系列过滤,然后通过<code>TryRegisterCanvasElementForLayoutRebuild</code>进行注册。Rebuild回调再管理派发回调。</p><ul><li>MarkLayoutForRebuild 调用<ol type="1"><li>Graphic</li><li>AspectRatioFitter</li><li>ContentSizeFitter</li><li>HorzontalOrVertcalLayoutGroup</li><li>LayoutElement</li><li>LayoutGroup</li><li>ScrollRect</li></ol></li></ul><h4 id="注册-void-marklayoutforrebuildrecttransform-rect">注册 voidMarkLayoutForRebuild(RectTransform rect)。</h4><ol type="1"><li>对自己/父节点不包含有效的<code>ILayoutGroup</code>,且自己不包含有效的<code>ILayoutController</code>。的组件，执行Return。</li><li>对自己/父节点<strong>包含</strong>有效的<code>ILayoutGroup</code>，或者且自己<strong>包含</strong>有效的<code>ILayoutController</code>。执行MarkLayoutRootForRebuild(layoutRoot);，使用包含<code>ILayoutGroup</code>的组件进行添加Rebuild注册<code>CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(rebuilder)</code>。</li></ol><h4 id="回调">回调</h4><ol type="1"><li>Rebuild， 这里只处理<code>CanvasUpdate.Layout</code> 状态。</li><li>水平计算,ILayoutElement.CalculateLayoutInputHorizontal(),对于含有<code>ILayoutElement</code>/<code>ILayoutGroup</code>递归Child，在执行自己。</li><li>水平设置,ILayoutController.SetLayoutHorizontal(),<del><code>ILayoutController</code>、<code>ILayoutSelfController</code>、<code>ScrollRect</code></del>。</li><li>竖直计算，ILayoutElement.CalculateLayoutInputVertical(),对于含有<code>ILayoutElement</code>/<code>ILayoutGroup</code>递归Child，在执行自己。</li><li>竖直设置，ILayoutController.SetLayoutVertical(),<del><code>ILayoutController</code>、<code>ILayoutSelfController</code>、<code>ScrollRect</code></del>。</li><li>LayoutComplete, xx空缺。</li><li>GraphicUpdateComplete 空缺。</li></ol><h3 id="cull-部分">Cull 部分。</h3><blockquote><p>ClipperRegistry</p></blockquote><h4 id="注册取消注册裁剪">注册/取消注册裁剪</h4><blockquote><p>public static void Register(IClipper c)、public static voidUnregister(IClipper c)</p></blockquote><ol type="1"><li>RectMask2D</li></ol><h3 id="graphicrebuild-部分">GraphicRebuild 部分</h3><blockquote><p>InputField、Graphic</p></blockquote><h4 id="graphic">Graphic</h4><ul><li><p>Rebuid &gt; 只处理了CanvasUpdate.PreRender状态。</p><ol type="1"><li>m_VertsDirty 变化时，执行Mesh的生成。</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Text、Image、RawImage时， useLegacyMeshGeneration为true。</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>  <span class="kw">if</span> <span class="op">(</span>useLegacyMeshGeneration<span class="op">)</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      <span class="fu">DoLegacyMeshGeneration</span><span class="op">();</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="kw">else</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  <span class="op">{</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>      <span class="fu">DoMeshGeneration</span><span class="op">();</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>  <span class="co">//...</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>  <span class="co">//填充顶点、颜色、uv等信息。</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>  <span class="fu">OnPopulateMesh</span><span class="op">(</span>s_VertexHelper<span class="op">);</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">//...</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>  <span class="fu">GetComponents</span><span class="op">(</span><span class="kw">typeof</span><span class="op">(</span>IMeshModifier<span class="op">),</span> components<span class="op">);</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>  <span class="co">//通知监听者。主要有 BashMeshEffect、Outline、PositionAsUV1、Shadow。</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>  <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> components<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>      <span class="op">((</span>IMeshModifier<span class="op">)</span>components<span class="op">[</span>i<span class="op">]).</span><span class="fu">ModifyMesh</span><span class="op">(</span>s_VertexHelper<span class="op">);</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 填充和设置顶点。</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>  s_VertexHelper<span class="op">.</span><span class="fu">FillMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>  canvasRenderer<span class="op">.</span><span class="fu">SetMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span></code></pre></div><ol start="2" type="1"><li>m_MaterialDirty 变换时，执行</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cs"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>  canvasRenderer<span class="op">.</span><span class="fu">materialCount</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>  canvasRenderer<span class="op">.</span><span class="fu">SetMaterial</span><span class="op">(</span>materialForRendering<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>  canvasRenderer<span class="op">.</span><span class="fu">SetTexture</span><span class="op">(</span>mainTexture<span class="op">);</span></span></code></pre></div><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/5.ugui-eventsystem/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/5.ugui-eventsystem/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui之eventsystem">uGUI之EventSystem</h2><blockquote><p>UI的事件系统</p></blockquote><ol type="1"><li><p>EventSystem</p><blockquote><p>uGUI系统的事件监测派发系统</p><p>在update中监测执行, List<baseinputmodule>进行事件收集、监测、分发。</baseinputmodule></p></blockquote><ol type="1"><li><p>实现细节</p><blockquote><p>输入、监测+派发、处理</p><p>输入 InputModules, 基类 BaseInputModule，分别实现PointerInputModule、StandaloneInputModule、TouchInputModule事件的监测在InputModule的Process处理，使用Raycaster监测和输入事件数据生成, 并调用统一EventSystem的RaycastAll监测和分发。</p></blockquote><ol type="1"><li>处理系统</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Update</span><span class="op">()</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>           <span class="co">//虽然是列表，还是作为单例使用</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>current <span class="op">!=</span> <span class="kw">this</span><span class="op">)</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>           <span class="co">//更新 InputModules 列表</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>           <span class="co">//虽然是列表，还是作为单例使用</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            <span class="fu">TickModules</span><span class="op">();</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>            <span class="dt">bool</span> changedModule <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> m_SystemInputModules<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> module <span class="op">=</span> m_SystemInputModules<span class="op">[</span>i<span class="op">];</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>module<span class="op">.</span><span class="fu">IsModuleSupported</span><span class="op">()</span> <span class="op">&amp;&amp;</span> module<span class="op">.</span><span class="fu">ShouldActivateModule</span><span class="op">())</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>m_CurrentInputModule <span class="op">!=</span> module<span class="op">)</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>                        <span class="fu">ChangeEventModule</span><span class="op">(</span>module<span class="op">);</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>                        changedModule <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">break</span><span class="op">;</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>            <span class="co">// no event module set... set the first valid one...</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>m_CurrentInputModule <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>                <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> m_SystemInputModules<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> module <span class="op">=</span> m_SystemInputModules<span class="op">[</span>i<span class="op">];</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>module<span class="op">.</span><span class="fu">IsModuleSupported</span><span class="op">())</span></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>                        <span class="co">//调用pre 取消激活， model激活</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>                        <span class="fu">ChangeEventModule</span><span class="op">(</span>module<span class="op">);</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>                        changedModule <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">break</span><span class="op">;</span></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>           <span class="co">// 切换的需要等一帧，否则立即执行 Process</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>changedModule <span class="op">&amp;&amp;</span> m_CurrentInputModule <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>                m_CurrentInputModule<span class="op">.</span><span class="fu">Process</span><span class="op">();</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li><p>输入</p><ol type="1"><li><p>BaseInputModule，继承自UIBehaviour</p><div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>       <span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnEnable</span><span class="op">()</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">base</span><span class="op">.</span><span class="fu">OnEnable</span><span class="op">();</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>            m_EventSystem <span class="op">=</span> GetComponent<span class="op">&lt;</span>EventSystem<span class="op">&gt;();</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>            <span class="co">//更新EventSystem的BaseInputModule组件列表</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>            m_EventSystem<span class="op">.</span><span class="fu">UpdateModules</span><span class="op">();</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnDisable</span><span class="op">()</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">//更新EventSystem的BaseInputModule组件列表</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            m_EventSystem<span class="op">.</span><span class="fu">UpdateModules</span><span class="op">();</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>            <span class="kw">base</span><span class="op">.</span><span class="fu">OnDisable</span><span class="op">();</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a> <span class="co">// 主要的公开功能 ：</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">abstract</span> <span class="dt">void</span> <span class="fu">Process</span><span class="op">();</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">bool</span> <span class="fu">ShouldActivateModule</span><span class="op">()</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> enabled <span class="op">&amp;&amp;</span> gameObject<span class="op">.</span><span class="fu">activeInHierarchy</span><span class="op">;</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">DeactivateModule</span><span class="op">()</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="op">{}</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="co">/// Called when the module is activated. Override this if you want custom code to execute when you activate your module.</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">ActivateModule</span><span class="op">()</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="op">{}</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="co">/// Update the internal state of the Module.</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">UpdateModule</span><span class="op">()</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="op">{}</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="co">/// Check to see if the module is supported. Override this if you have a platform specific module (eg. TouchInputModule that you do not want to activate on standalone.)</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;returns&gt;</span><span class="co">Is the module supported.</span><span class="kw">&lt;/returns&gt;</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">bool</span> <span class="fu">IsModuleSupported</span><span class="op">()</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p>PointerInputModule 继承自 BaseInputModule</p><blockquote><p>鼠标输入：<code>左键</code>、<code>右键</code>、<code>中间键</code>、<code>模拟触摸键</code></p></blockquote><div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">//todo</span></span></code></pre></div></li><li><p>StandaloneInputModule</p><blockquote><p>鼠标键盘</p></blockquote><ol type="1"><li><p>ShouldActivateModule实现</p><div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// 监测是否有输入</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">bool</span> <span class="fu">ShouldActivateModule</span><span class="op">()</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// enabled &amp;&amp; gameObject.activeInHierarchy;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a> <span class="kw">if</span> <span class="op">(!</span><span class="kw">base</span><span class="op">.</span><span class="fu">ShouldActivateModule</span><span class="op">())</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>     <span class="kw">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a> <span class="dt">var</span> shouldActivate <span class="op">=</span> m_ForceModuleActive<span class="op">;</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    shouldActivate <span class="op">|=</span> input<span class="op">.</span><span class="fu">GetButtonDown</span><span class="op">(</span>m_SubmitButton<span class="op">);</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    shouldActivate <span class="op">|=</span> input<span class="op">.</span><span class="fu">GetButtonDown</span><span class="op">(</span>m_CancelButton<span class="op">);</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    shouldActivate <span class="op">|=</span> <span class="op">!</span>Mathf<span class="op">.</span><span class="fu">Approximately</span><span class="op">(</span>input<span class="op">.</span><span class="fu">GetAxisRaw</span><span class="op">(</span>m_HorizontalAxis<span class="op">),</span> <span class="fl">0.0f</span><span class="op">);</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    shouldActivate <span class="op">|=</span> <span class="op">!</span>Mathf<span class="op">.</span><span class="fu">Approximately</span><span class="op">(</span>input<span class="op">.</span><span class="fu">GetAxisRaw</span><span class="op">(</span>m_VerticalAxis<span class="op">),</span> <span class="fl">0.0f</span><span class="op">);</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    shouldActivate <span class="op">|=</span> <span class="op">(</span>m_MousePosition <span class="op">-</span> m_LastMousePosition<span class="op">).</span><span class="fu">sqrMagnitude</span> <span class="op">&gt;</span> <span class="fl">0.0f</span><span class="op">;</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    shouldActivate <span class="op">|=</span> input<span class="op">.</span><span class="fu">GetMouseButtonDown</span><span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> <span class="op">(</span>input<span class="op">.</span><span class="fu">touchCount</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>     shouldActivate <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="kw">return</span> shouldActivate<span class="op">;</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p>DeactivateModule 非激活状态清除当前储存的输入</p><div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">DeactivateModule</span><span class="op">()</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a> <span class="kw">base</span><span class="op">.</span><span class="fu">DeactivateModule</span><span class="op">();</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="fu">ClearSelection</span><span class="op">();</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">protected</span> <span class="dt">void</span> <span class="fu">ClearSelection</span><span class="op">()</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> baseEventData <span class="op">=</span> <span class="fu">GetBaseEventData</span><span class="op">();</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">foreach</span> <span class="op">(</span><span class="dt">var</span> pointer <span class="kw">in</span> m_PointerData<span class="op">.</span><span class="fu">Values</span><span class="op">)</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>                <span class="co">// clear all selection</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>                <span class="fu">HandlePointerExitAndEnter</span><span class="op">(</span>pointer<span class="op">,</span> <span class="kw">null</span><span class="op">);</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            m_PointerData<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            eventSystem<span class="op">.</span><span class="fu">SetSelectedGameObject</span><span class="op">(</span><span class="kw">null</span><span class="op">,</span> baseEventData<span class="op">);</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>ActivateModule</p><div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">//更新位置和选择物体</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">ActivateModule</span><span class="op">()</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>eventSystem<span class="op">.</span><span class="fu">isFocused</span> <span class="op">&amp;&amp;</span> <span class="fu">ShouldIgnoreEventsOnNoFocus</span><span class="op">())</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>            <span class="kw">base</span><span class="op">.</span><span class="fu">ActivateModule</span><span class="op">();</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>            m_MousePosition <span class="op">=</span> input<span class="op">.</span><span class="fu">mousePosition</span><span class="op">;</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>            m_LastMousePosition <span class="op">=</span> input<span class="op">.</span><span class="fu">mousePosition</span><span class="op">;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> toSelect <span class="op">=</span> eventSystem<span class="op">.</span><span class="fu">currentSelectedGameObject</span><span class="op">;</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>toSelect <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>                toSelect <span class="op">=</span> eventSystem<span class="op">.</span><span class="fu">firstSelectedGameObject</span><span class="op">;</span></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            eventSystem<span class="op">.</span><span class="fu">SetSelectedGameObject</span><span class="op">(</span>toSelect<span class="op">,</span> <span class="fu">GetBaseEventData</span><span class="op">());</span></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>UpdateModule</p></li></ol><div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">UpdateModule</span><span class="op">()</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>eventSystem<span class="op">.</span><span class="fu">isFocused</span> <span class="op">&amp;&amp;</span> <span class="fu">ShouldIgnoreEventsOnNoFocus</span><span class="op">())</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 拖拽中</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>m_InputPointerEvent <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> m_InputPointerEvent<span class="op">.</span><span class="fu">pointerDrag</span> <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> m_InputPointerEvent<span class="op">.</span><span class="fu">dragging</span><span class="op">)</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>                    <span class="fu">ReleaseMouse</span><span class="op">(</span>m_InputPointerEvent<span class="op">,</span> m_InputPointerEvent<span class="op">.</span><span class="fu">pointerCurrentRaycast</span><span class="op">.</span><span class="fu">gameObject</span><span class="op">);</span></span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>                m_InputPointerEvent <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>            m_LastMousePosition <span class="op">=</span> m_MousePosition<span class="op">;</span></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>            m_MousePosition <span class="op">=</span> input<span class="op">.</span><span class="fu">mousePosition</span><span class="op">;</span></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><ol start="5" type="1"><li><p>IsModuleSupported</p><div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>   <span class="kw">public</span> <span class="kw">override</span> <span class="dt">bool</span> <span class="fu">IsModuleSupported</span><span class="op">()</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>             <span class="co">//强制激活 or 鼠标设备 or 触摸设备</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> m_ForceModuleActive <span class="op">||</span> input<span class="op">.</span><span class="fu">mousePresent</span> <span class="op">||</span> input<span class="op">.</span><span class="fu">touchSupported</span><span class="op">;</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>Process</p><div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a><span class="co">//Navigation 和鼠标事件</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">Process</span><span class="op">()</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>eventSystem<span class="op">.</span><span class="fu">isFocused</span> <span class="op">&amp;&amp;</span> <span class="fu">ShouldIgnoreEventsOnNoFocus</span><span class="op">())</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>            <span class="dt">bool</span> usedEvent <span class="op">=</span> <span class="fu">SendUpdateEventToSelectedObject</span><span class="op">();</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>            <span class="co">// case 1004066 - touch / mouse events should be processed before navigation events in case</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>            <span class="co">// they change the current selected gameobject and the submit button is a touch / mouse button.</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">// touch needs to take precedence because of the mouse emulation layer</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>            <span class="co">//通过BaseRaycaster进行事件监测</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>         <span class="kw">if</span> <span class="op">(!</span><span class="fu">ProcessTouchEvents</span><span class="op">()</span> <span class="op">&amp;&amp;</span> input<span class="op">.</span><span class="fu">mousePresent</span><span class="op">)</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>                <span class="co">//ExcuteEvent 回调触发</span></span><span id="cb11-16"><a href="#cb11-16" aria-hidden="true" tabindex="-1"></a>                <span class="fu">ProcessMouseEvent</span><span class="op">();</span></span><span id="cb11-17"><a href="#cb11-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-18"><a href="#cb11-18" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>eventSystem<span class="op">.</span><span class="fu">sendNavigationEvents</span><span class="op">)</span></span><span id="cb11-19"><a href="#cb11-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb11-20"><a href="#cb11-20" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(!</span>usedEvent<span class="op">)</span></span><span id="cb11-21"><a href="#cb11-21" aria-hidden="true" tabindex="-1"></a>                    usedEvent <span class="op">|=</span> <span class="fu">SendMoveEventToSelectedObject</span><span class="op">();</span></span><span id="cb11-22"><a href="#cb11-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-23"><a href="#cb11-23" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(!</span>usedEvent<span class="op">)</span></span><span id="cb11-24"><a href="#cb11-24" aria-hidden="true" tabindex="-1"></a>                    <span class="fu">SendSubmitEventToSelectedObject</span><span class="op">();</span></span><span id="cb11-25"><a href="#cb11-25" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb11-26"><a href="#cb11-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li></ol></li><li><p>TouchInputModule</p><div class="sourceCode" id="cb12"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="co">// todo 类似 StandaloneInputModule</span></span></code></pre></div></li><li><p>对组件进行事件回调</p><blockquote><p>通过在EventSystem.ExcuteEvents中进行获取组件的<code>IEventSystemHandler</code>接口， 进行分类派发不同事件</p></blockquote><ol type="1"><li>IPointerEnterHandler,</li><li>IPointerExitHandler,</li><li>IPointerDownHandler,</li><li>IPointerUpHandler,</li><li>IPointerClickHandler,</li><li>IInitializePotentialDragHandler,</li><li>IBeginDragHandler,</li><li>IDragHandler,</li><li>IEndDragHandler,</li><li>IDropHandler,</li><li>IScrollHandler,</li><li>IUpdateSelectedHandler,</li><li>ISelectHandler,</li><li>IDeselectHandler,</li><li>IMoveHandler,</li><li>ISubmitHandler,</li><li>ICancelHandler</li></ol></li></ol></li><li><p>Raycaster</p><blockquote><p>辅助监测 BaseRaycaster基类</p><p>Physics2DRaycaster、PhysicsRaycaster，GraphicRaycaster,主要实现不同的Raycast函数，区别在于 index， sortlayer， sortOrder,distance 注册到 RaycasterManager 统一调用</p></blockquote><ol type="1"><li><p>BaseRaycaster</p><div class="sourceCode" id="cb13"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a><span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnEnable</span><span class="op">()</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">base</span><span class="op">.</span><span class="fu">OnEnable</span><span class="op">();</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>            RaycasterManager<span class="op">.</span><span class="fu">AddRaycaster</span><span class="op">(</span><span class="kw">this</span><span class="op">);</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnDisable</span><span class="op">()</span></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>            RaycasterManager<span class="op">.</span><span class="fu">RemoveRaycasters</span><span class="op">(</span><span class="kw">this</span><span class="op">);</span></span><span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>            <span class="kw">base</span><span class="op">.</span><span class="fu">OnDisable</span><span class="op">();</span></span><span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb14"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a><span class="co">//父节点 Raycaster</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> BaseRaycaster m_RootRaycaster<span class="op">;</span></span></code></pre></div><div class="sourceCode" id="cb15"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="co">//主要的监测接口</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">abstract</span> <span class="dt">void</span> <span class="fu">Raycast</span><span class="op">(</span>PointerEventData eventData<span class="op">,</span> List<span class="op">&lt;</span>RaycastResult<span class="op">&gt;</span> resultAppendList<span class="op">);</span></span></code></pre></div><div class="sourceCode" id="cb16"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb16-1"><a href="#cb16-1" aria-hidden="true" tabindex="-1"></a><span class="co">//触发射线监测的相机</span></span><span id="cb16-2"><a href="#cb16-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">abstract</span> Camera eventCamera <span class="op">{</span> <span class="kw">get</span><span class="op">;</span> <span class="op">}</span></span></code></pre></div></li><li><p>PhysicsRaycaster</p><div class="sourceCode" id="cb17"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb17-1"><a href="#cb17-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">Raycast</span><span class="op">(</span>PointerEventData eventData<span class="op">,</span> List<span class="op">&lt;</span>RaycastResult<span class="op">&gt;</span> resultAppendList<span class="op">)</span></span><span id="cb17-2"><a href="#cb17-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb17-3"><a href="#cb17-3" aria-hidden="true" tabindex="-1"></a>            Ray ray <span class="op">=</span> <span class="kw">new</span> <span class="fu">Ray</span><span class="op">();</span></span><span id="cb17-4"><a href="#cb17-4" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> distanceToClipPlane <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb17-5"><a href="#cb17-5" aria-hidden="true" tabindex="-1"></a>            <span class="co">// eventPosition = Display.RelativeMouseAt(eventData.position);</span></span><span id="cb17-6"><a href="#cb17-6" aria-hidden="true" tabindex="-1"></a>            <span class="co">//1. 检查相机和显示器的匹配</span></span><span id="cb17-7"><a href="#cb17-7" aria-hidden="true" tabindex="-1"></a>            <span class="co">//2. 检查坐标在相机的渲染区域内</span></span><span id="cb17-8"><a href="#cb17-8" aria-hidden="true" tabindex="-1"></a>            <span class="co">//3. 满足条件的情况下：</span></span><span id="cb17-9"><a href="#cb17-9" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ray = eventCamera.ScreenPointToRay(eventPosition)</span></span><span id="cb17-10"><a href="#cb17-10" aria-hidden="true" tabindex="-1"></a>            <span class="co">// float projectionDirection = ray.direction.z;</span></span><span id="cb17-11"><a href="#cb17-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 相对相机距离的倒数， 距离相机越近 值越大</span></span><span id="cb17-12"><a href="#cb17-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Mathf.Abs((eventCamera.farClipPlane - eventCamera.nearClipPlane) / projectionDirection)</span></span><span id="cb17-13"><a href="#cb17-13" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span><span class="fu">ComputeRayAndDistance</span><span class="op">(</span>eventData<span class="op">,</span> <span class="kw">ref</span> ray<span class="op">,</span> <span class="kw">ref</span> distanceToClipPlane<span class="op">))</span></span><span id="cb17-14"><a href="#cb17-14" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb17-15"><a href="#cb17-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-16"><a href="#cb17-16" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> hitCount <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb17-17"><a href="#cb17-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-18"><a href="#cb17-18" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 距离 mask进行raycast引擎调用，获取射线碰撞</span></span><span id="cb17-19"><a href="#cb17-19" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>m_MaxRayIntersections <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb17-20"><a href="#cb17-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb17-21"><a href="#cb17-21" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">raycast3DAll</span> <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb17-22"><a href="#cb17-22" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span><span class="op">;</span></span><span id="cb17-23"><a href="#cb17-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-24"><a href="#cb17-24" aria-hidden="true" tabindex="-1"></a>                m_Hits <span class="op">=</span> ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">raycast3DAll</span><span class="op">(</span>ray<span class="op">,</span> distanceToClipPlane<span class="op">,</span> finalEventMask<span class="op">);</span></span><span id="cb17-25"><a href="#cb17-25" aria-hidden="true" tabindex="-1"></a>                hitCount <span class="op">=</span> m_Hits<span class="op">.</span><span class="fu">Length</span><span class="op">;</span></span><span id="cb17-26"><a href="#cb17-26" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb17-27"><a href="#cb17-27" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb17-28"><a href="#cb17-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb17-29"><a href="#cb17-29" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRaycastNonAlloc</span> <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb17-30"><a href="#cb17-30" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span><span class="op">;</span></span><span id="cb17-31"><a href="#cb17-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-32"><a href="#cb17-32" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>m_LastMaxRayIntersections <span class="op">!=</span> m_MaxRayIntersections<span class="op">)</span></span><span id="cb17-33"><a href="#cb17-33" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb17-34"><a href="#cb17-34" aria-hidden="true" tabindex="-1"></a>                    m_Hits <span class="op">=</span> <span class="kw">new</span> RaycastHit<span class="op">[</span>m_MaxRayIntersections<span class="op">];</span></span><span id="cb17-35"><a href="#cb17-35" aria-hidden="true" tabindex="-1"></a>                    m_LastMaxRayIntersections <span class="op">=</span> m_MaxRayIntersections<span class="op">;</span></span><span id="cb17-36"><a href="#cb17-36" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb17-37"><a href="#cb17-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-38"><a href="#cb17-38" aria-hidden="true" tabindex="-1"></a>                hitCount <span class="op">=</span> ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRaycastNonAlloc</span><span class="op">(</span>ray<span class="op">,</span> m_Hits<span class="op">,</span> distanceToClipPlane<span class="op">,</span> finalEventMask<span class="op">);</span></span><span id="cb17-39"><a href="#cb17-39" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb17-40"><a href="#cb17-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-41"><a href="#cb17-41" aria-hidden="true" tabindex="-1"></a>            <span class="co">//距离排序</span></span><span id="cb17-42"><a href="#cb17-42" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>hitCount <span class="op">&gt;</span> <span class="dv">1</span><span class="op">)</span></span><span id="cb17-43"><a href="#cb17-43" aria-hidden="true" tabindex="-1"></a>                System<span class="op">.</span><span class="fu">Array</span><span class="op">.</span><span class="fu">Sort</span><span class="op">(</span>m_Hits<span class="op">,</span> <span class="op">(</span>r1<span class="op">,</span> r2<span class="op">)</span> <span class="op">=&gt;</span> r1<span class="op">.</span><span class="fu">distance</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>r2<span class="op">.</span><span class="fu">distance</span><span class="op">));</span></span><span id="cb17-44"><a href="#cb17-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb17-45"><a href="#cb17-45" aria-hidden="true" tabindex="-1"></a>            <span class="co">// RaycastHit 转换成RaycastResult 添加到列表</span></span><span id="cb17-46"><a href="#cb17-46" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>hitCount <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb17-47"><a href="#cb17-47" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb17-48"><a href="#cb17-48" aria-hidden="true" tabindex="-1"></a>                <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> b <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> bmax <span class="op">=</span> hitCount<span class="op">;</span> b <span class="op">&lt;</span> bmax<span class="op">;</span> <span class="op">++</span>b<span class="op">)</span></span><span id="cb17-49"><a href="#cb17-49" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb17-50"><a href="#cb17-50" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> result <span class="op">=</span> <span class="kw">new</span> RaycastResult</span><span id="cb17-51"><a href="#cb17-51" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb17-52"><a href="#cb17-52" aria-hidden="true" tabindex="-1"></a>                        gameObject <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">collider</span><span class="op">.</span><span class="fu">gameObject</span><span class="op">,</span></span><span id="cb17-53"><a href="#cb17-53" aria-hidden="true" tabindex="-1"></a>                        module <span class="op">=</span> <span class="kw">this</span><span class="op">,</span></span><span id="cb17-54"><a href="#cb17-54" aria-hidden="true" tabindex="-1"></a>                        distance <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">distance</span><span class="op">,</span></span><span id="cb17-55"><a href="#cb17-55" aria-hidden="true" tabindex="-1"></a>                        worldPosition <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">point</span><span class="op">,</span></span><span id="cb17-56"><a href="#cb17-56" aria-hidden="true" tabindex="-1"></a>                        worldNormal <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">normal</span><span class="op">,</span></span><span id="cb17-57"><a href="#cb17-57" aria-hidden="true" tabindex="-1"></a>                        screenPosition <span class="op">=</span> eventData<span class="op">.</span><span class="fu">position</span><span class="op">,</span></span><span id="cb17-58"><a href="#cb17-58" aria-hidden="true" tabindex="-1"></a>                        index <span class="op">=</span> resultAppendList<span class="op">.</span><span class="fu">Count</span><span class="op">,</span></span><span id="cb17-59"><a href="#cb17-59" aria-hidden="true" tabindex="-1"></a>                        sortingLayer <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span><span id="cb17-60"><a href="#cb17-60" aria-hidden="true" tabindex="-1"></a>                        sortingOrder <span class="op">=</span> <span class="dv">0</span></span><span id="cb17-61"><a href="#cb17-61" aria-hidden="true" tabindex="-1"></a>                    <span class="op">};</span></span><span id="cb17-62"><a href="#cb17-62" aria-hidden="true" tabindex="-1"></a>                    resultAppendList<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>result<span class="op">);</span></span><span id="cb17-63"><a href="#cb17-63" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb17-64"><a href="#cb17-64" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb17-65"><a href="#cb17-65" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>GraphicRaycaster 继承自 BaseRaycaster</p><div class="sourceCode" id="cb18"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb18-1"><a href="#cb18-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">Raycast</span><span class="op">(</span>PointerEventData eventData<span class="op">,</span> List<span class="op">&lt;</span>RaycastResult<span class="op">&gt;</span> resultAppendList<span class="op">)</span></span><span id="cb18-2"><a href="#cb18-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb18-3"><a href="#cb18-3" aria-hidden="true" tabindex="-1"></a>            <span class="co">//ui需要在Canvas下</span></span><span id="cb18-4"><a href="#cb18-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>canvas <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-5"><a href="#cb18-5" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb18-6"><a href="#cb18-6" aria-hidden="true" tabindex="-1"></a>            <span class="co">//可渲染组件</span></span><span id="cb18-7"><a href="#cb18-7" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> canvasGraphics <span class="op">=</span> GraphicRegistry<span class="op">.</span><span class="fu">GetGraphicsForCanvas</span><span class="op">(</span>canvas<span class="op">);</span></span><span id="cb18-8"><a href="#cb18-8" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>canvasGraphics <span class="op">==</span> <span class="kw">null</span> <span class="op">||</span> canvasGraphics<span class="op">.</span><span class="fu">Count</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb18-9"><a href="#cb18-9" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb18-10"><a href="#cb18-10" aria-hidden="true" tabindex="-1"></a>            <span class="co">//条件监测：1. 同相机同显示目标，2. 需要坐标在显示的范围内</span></span><span id="cb18-11"><a href="#cb18-11" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> displayIndex<span class="op">;</span></span><span id="cb18-12"><a href="#cb18-12" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> currentEventCamera <span class="op">=</span> eventCamera<span class="op">;</span> <span class="co">// Property can call Camera.main, so cache the reference</span></span><span id="cb18-13"><a href="#cb18-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-14"><a href="#cb18-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>canvas<span class="op">.</span><span class="fu">renderMode</span> <span class="op">==</span> RenderMode<span class="op">.</span><span class="fu">ScreenSpaceOverlay</span> <span class="op">||</span> currentEventCamera <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-15"><a href="#cb18-15" aria-hidden="true" tabindex="-1"></a>                displayIndex <span class="op">=</span> canvas<span class="op">.</span><span class="fu">targetDisplay</span><span class="op">;</span></span><span id="cb18-16"><a href="#cb18-16" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb18-17"><a href="#cb18-17" aria-hidden="true" tabindex="-1"></a>                displayIndex <span class="op">=</span> currentEventCamera<span class="op">.</span><span class="fu">targetDisplay</span><span class="op">;</span></span><span id="cb18-18"><a href="#cb18-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-19"><a href="#cb18-19" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> eventPosition <span class="op">=</span> Display<span class="op">.</span><span class="fu">RelativeMouseAt</span><span class="op">(</span>eventData<span class="op">.</span><span class="fu">position</span><span class="op">);</span></span><span id="cb18-20"><a href="#cb18-20" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>eventPosition <span class="op">!=</span> Vector3<span class="op">.</span><span class="fu">zero</span><span class="op">)</span></span><span id="cb18-21"><a href="#cb18-21" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb18-22"><a href="#cb18-22" aria-hidden="true" tabindex="-1"></a>                <span class="co">// We support multiple display and display identification based on event position.</span></span><span id="cb18-23"><a href="#cb18-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-24"><a href="#cb18-24" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> eventDisplayIndex <span class="op">=</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>eventPosition<span class="op">.</span><span class="fu">z</span><span class="op">;</span></span><span id="cb18-25"><a href="#cb18-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-26"><a href="#cb18-26" aria-hidden="true" tabindex="-1"></a>                <span class="co">// Discard events that are not part of this display so the user does not interact with multiple displays at once.</span></span><span id="cb18-27"><a href="#cb18-27" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>eventDisplayIndex <span class="op">!=</span> displayIndex<span class="op">)</span></span><span id="cb18-28"><a href="#cb18-28" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span><span class="op">;</span></span><span id="cb18-29"><a href="#cb18-29" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb18-30"><a href="#cb18-30" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb18-31"><a href="#cb18-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb18-32"><a href="#cb18-32" aria-hidden="true" tabindex="-1"></a>                <span class="co">// The multiple display system is not supported on all platforms, when it is not supported the returned position</span></span><span id="cb18-33"><a href="#cb18-33" aria-hidden="true" tabindex="-1"></a>                <span class="co">// will be all zeros so when the returned index is 0 we will default to the event data to be safe.</span></span><span id="cb18-34"><a href="#cb18-34" aria-hidden="true" tabindex="-1"></a>                eventPosition <span class="op">=</span> eventData<span class="op">.</span><span class="fu">position</span><span class="op">;</span></span><span id="cb18-35"><a href="#cb18-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-36"><a href="#cb18-36" aria-hidden="true" tabindex="-1"></a>                <span class="co">// We dont really know in which display the event occured. We will process the event assuming it occured in our display.</span></span><span id="cb18-37"><a href="#cb18-37" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb18-38"><a href="#cb18-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-39"><a href="#cb18-39" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Convert to view space</span></span><span id="cb18-40"><a href="#cb18-40" aria-hidden="true" tabindex="-1"></a>            Vector2 pos<span class="op">;</span></span><span id="cb18-41"><a href="#cb18-41" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>currentEventCamera <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-42"><a href="#cb18-42" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb18-43"><a href="#cb18-43" aria-hidden="true" tabindex="-1"></a>                <span class="co">// Multiple display support only when not the main display. For display 0 the reported</span></span><span id="cb18-44"><a href="#cb18-44" aria-hidden="true" tabindex="-1"></a>                <span class="co">// resolution is always the desktops resolution since its part of the display API,</span></span><span id="cb18-45"><a href="#cb18-45" aria-hidden="true" tabindex="-1"></a>                <span class="co">// so we use the standard none multiple display method. (case 741751)</span></span><span id="cb18-46"><a href="#cb18-46" aria-hidden="true" tabindex="-1"></a>                <span class="dt">float</span> w <span class="op">=</span> Screen<span class="op">.</span><span class="fu">width</span><span class="op">;</span></span><span id="cb18-47"><a href="#cb18-47" aria-hidden="true" tabindex="-1"></a>                <span class="dt">float</span> h <span class="op">=</span> Screen<span class="op">.</span><span class="fu">height</span><span class="op">;</span></span><span id="cb18-48"><a href="#cb18-48" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>displayIndex <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> displayIndex <span class="op">&lt;</span> Display<span class="op">.</span><span class="fu">displays</span><span class="op">.</span><span class="fu">Length</span><span class="op">)</span></span><span id="cb18-49"><a href="#cb18-49" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb18-50"><a href="#cb18-50" aria-hidden="true" tabindex="-1"></a>                    w <span class="op">=</span> Display<span class="op">.</span><span class="fu">displays</span><span class="op">[</span>displayIndex<span class="op">].</span><span class="fu">systemWidth</span><span class="op">;</span></span><span id="cb18-51"><a href="#cb18-51" aria-hidden="true" tabindex="-1"></a>                    h <span class="op">=</span> Display<span class="op">.</span><span class="fu">displays</span><span class="op">[</span>displayIndex<span class="op">].</span><span class="fu">systemHeight</span><span class="op">;</span></span><span id="cb18-52"><a href="#cb18-52" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb18-53"><a href="#cb18-53" aria-hidden="true" tabindex="-1"></a>                pos <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>eventPosition<span class="op">.</span><span class="fu">x</span> <span class="op">/</span> w<span class="op">,</span> eventPosition<span class="op">.</span><span class="fu">y</span> <span class="op">/</span> h<span class="op">);</span></span><span id="cb18-54"><a href="#cb18-54" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb18-55"><a href="#cb18-55" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb18-56"><a href="#cb18-56" aria-hidden="true" tabindex="-1"></a>                pos <span class="op">=</span> currentEventCamera<span class="op">.</span><span class="fu">ScreenToViewportPoint</span><span class="op">(</span>eventPosition<span class="op">);</span></span><span id="cb18-57"><a href="#cb18-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-58"><a href="#cb18-58" aria-hidden="true" tabindex="-1"></a>            <span class="co">// If it's outside the camera's viewport, do nothing</span></span><span id="cb18-59"><a href="#cb18-59" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>pos<span class="op">.</span><span class="fu">x</span> <span class="op">&lt;</span> 0f <span class="op">||</span> pos<span class="op">.</span><span class="fu">x</span> <span class="op">&gt;</span> 1f <span class="op">||</span> pos<span class="op">.</span><span class="fu">y</span> <span class="op">&lt;</span> 0f <span class="op">||</span> pos<span class="op">.</span><span class="fu">y</span> <span class="op">&gt;</span> 1f<span class="op">)</span></span><span id="cb18-60"><a href="#cb18-60" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb18-61"><a href="#cb18-61" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-62"><a href="#cb18-62" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> hitDistance <span class="op">=</span> <span class="dt">float</span><span class="op">.</span><span class="fu">MaxValue</span><span class="op">;</span></span><span id="cb18-63"><a href="#cb18-63" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-64"><a href="#cb18-64" aria-hidden="true" tabindex="-1"></a>            Ray ray <span class="op">=</span> <span class="kw">new</span> <span class="fu">Ray</span><span class="op">();</span></span><span id="cb18-65"><a href="#cb18-65" aria-hidden="true" tabindex="-1"></a>            <span class="co">//射线监测，获取第一个碰撞的信息</span></span><span id="cb18-66"><a href="#cb18-66" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>currentEventCamera <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-67"><a href="#cb18-67" aria-hidden="true" tabindex="-1"></a>                ray <span class="op">=</span> currentEventCamera<span class="op">.</span><span class="fu">ScreenPointToRay</span><span class="op">(</span>eventPosition<span class="op">);</span></span><span id="cb18-68"><a href="#cb18-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-69"><a href="#cb18-69" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>canvas<span class="op">.</span><span class="fu">renderMode</span> <span class="op">!=</span> RenderMode<span class="op">.</span><span class="fu">ScreenSpaceOverlay</span> <span class="op">&amp;&amp;</span> blockingObjects <span class="op">!=</span> BlockingObjects<span class="op">.</span><span class="fu">None</span><span class="op">)</span></span><span id="cb18-70"><a href="#cb18-70" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb18-71"><a href="#cb18-71" aria-hidden="true" tabindex="-1"></a>                <span class="dt">float</span> distanceToClipPlane <span class="op">=</span> <span class="fl">100.0f</span><span class="op">;</span></span><span id="cb18-72"><a href="#cb18-72" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-73"><a href="#cb18-73" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>currentEventCamera <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-74"><a href="#cb18-74" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb18-75"><a href="#cb18-75" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">float</span> projectionDirection <span class="op">=</span> ray<span class="op">.</span><span class="fu">direction</span><span class="op">.</span><span class="fu">z</span><span class="op">;</span></span><span id="cb18-76"><a href="#cb18-76" aria-hidden="true" tabindex="-1"></a>                    distanceToClipPlane <span class="op">=</span> Mathf<span class="op">.</span><span class="fu">Approximately</span><span class="op">(</span><span class="fl">0.0f</span><span class="op">,</span> projectionDirection<span class="op">)</span></span><span id="cb18-77"><a href="#cb18-77" aria-hidden="true" tabindex="-1"></a>                        <span class="op">?</span> Mathf<span class="op">.</span><span class="fu">Infinity</span></span><span id="cb18-78"><a href="#cb18-78" aria-hidden="true" tabindex="-1"></a>                        <span class="op">:</span> Mathf<span class="op">.</span><span class="fu">Abs</span><span class="op">((</span>currentEventCamera<span class="op">.</span><span class="fu">farClipPlane</span> <span class="op">-</span> currentEventCamera<span class="op">.</span><span class="fu">nearClipPlane</span><span class="op">)</span> <span class="op">/</span> projectionDirection<span class="op">);</span></span><span id="cb18-79"><a href="#cb18-79" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb18-80"><a href="#cb18-80" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-81"><a href="#cb18-81" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>blockingObjects <span class="op">==</span> BlockingObjects<span class="op">.</span><span class="fu">ThreeD</span> <span class="op">||</span> blockingObjects <span class="op">==</span> BlockingObjects<span class="op">.</span><span class="fu">All</span><span class="op">)</span></span><span id="cb18-82"><a href="#cb18-82" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb18-83"><a href="#cb18-83" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">raycast3D</span> <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-84"><a href="#cb18-84" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb18-85"><a href="#cb18-85" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> hits <span class="op">=</span> ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">raycast3DAll</span><span class="op">(</span>ray<span class="op">,</span> distanceToClipPlane<span class="op">,</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>m_BlockingMask<span class="op">);</span></span><span id="cb18-86"><a href="#cb18-86" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(</span>hits<span class="op">.</span><span class="fu">Length</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb18-87"><a href="#cb18-87" aria-hidden="true" tabindex="-1"></a>                            hitDistance <span class="op">=</span> hits<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">distance</span><span class="op">;</span></span><span id="cb18-88"><a href="#cb18-88" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb18-89"><a href="#cb18-89" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb18-90"><a href="#cb18-90" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-91"><a href="#cb18-91" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>blockingObjects <span class="op">==</span> BlockingObjects<span class="op">.</span><span class="fu">TwoD</span> <span class="op">||</span> blockingObjects <span class="op">==</span> BlockingObjects<span class="op">.</span><span class="fu">All</span><span class="op">)</span></span><span id="cb18-92"><a href="#cb18-92" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb18-93"><a href="#cb18-93" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">raycast2D</span> <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-94"><a href="#cb18-94" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb18-95"><a href="#cb18-95" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> hits <span class="op">=</span> ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRayIntersectionAll</span><span class="op">(</span>ray<span class="op">,</span> distanceToClipPlane<span class="op">,</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>m_BlockingMask<span class="op">);</span></span><span id="cb18-96"><a href="#cb18-96" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(</span>hits<span class="op">.</span><span class="fu">Length</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb18-97"><a href="#cb18-97" aria-hidden="true" tabindex="-1"></a>                            hitDistance <span class="op">=</span> hits<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">distance</span><span class="op">;</span></span><span id="cb18-98"><a href="#cb18-98" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb18-99"><a href="#cb18-99" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb18-100"><a href="#cb18-100" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb18-101"><a href="#cb18-101" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-102"><a href="#cb18-102" aria-hidden="true" tabindex="-1"></a>            m_RaycastResults<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb18-103"><a href="#cb18-103" aria-hidden="true" tabindex="-1"></a>            <span class="co">//从符合条件的可渲染组件进行位置监测</span></span><span id="cb18-104"><a href="#cb18-104" aria-hidden="true" tabindex="-1"></a>            <span class="fu">Raycast</span><span class="op">(</span>canvas<span class="op">,</span> currentEventCamera<span class="op">,</span> eventPosition<span class="op">,</span> canvasGraphics<span class="op">,</span> m_RaycastResults<span class="op">);</span></span><span id="cb18-105"><a href="#cb18-105" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-106"><a href="#cb18-106" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> totalCount <span class="op">=</span> m_RaycastResults<span class="op">.</span><span class="fu">Count</span><span class="op">;</span></span><span id="cb18-107"><a href="#cb18-107" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> index <span class="op">&lt;</span> totalCount<span class="op">;</span> index<span class="op">++)</span></span><span id="cb18-108"><a href="#cb18-108" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb18-109"><a href="#cb18-109" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> go <span class="op">=</span> m_RaycastResults<span class="op">[</span>index<span class="op">].</span><span class="fu">gameObject</span><span class="op">;</span></span><span id="cb18-110"><a href="#cb18-110" aria-hidden="true" tabindex="-1"></a>                <span class="dt">bool</span> appendGraphic <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb18-111"><a href="#cb18-111" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-112"><a href="#cb18-112" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ignoreReversedGraphics<span class="op">)</span></span><span id="cb18-113"><a href="#cb18-113" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb18-114"><a href="#cb18-114" aria-hidden="true" tabindex="-1"></a>                    <span class="co">//监测UI是否垂直于相机</span></span><span id="cb18-115"><a href="#cb18-115" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>currentEventCamera <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb18-116"><a href="#cb18-116" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb18-117"><a href="#cb18-117" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// If we dont have a camera we know that we should always be facing forward</span></span><span id="cb18-118"><a href="#cb18-118" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> dir <span class="op">=</span> go<span class="op">.</span><span class="fu">transform</span><span class="op">.</span><span class="fu">rotation</span> <span class="op">*</span> Vector3<span class="op">.</span><span class="fu">forward</span><span class="op">;</span></span><span id="cb18-119"><a href="#cb18-119" aria-hidden="true" tabindex="-1"></a>                        appendGraphic <span class="op">=</span> Vector3<span class="op">.</span><span class="fu">Dot</span><span class="op">(</span>Vector3<span class="op">.</span><span class="fu">forward</span><span class="op">,</span> dir<span class="op">)</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb18-120"><a href="#cb18-120" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb18-121"><a href="#cb18-121" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">else</span></span><span id="cb18-122"><a href="#cb18-122" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb18-123"><a href="#cb18-123" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// If we have a camera compare the direction against the cameras forward.</span></span><span id="cb18-124"><a href="#cb18-124" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> cameraFoward <span class="op">=</span> currentEventCamera<span class="op">.</span><span class="fu">transform</span><span class="op">.</span><span class="fu">rotation</span> <span class="op">*</span> Vector3<span class="op">.</span><span class="fu">forward</span><span class="op">;</span></span><span id="cb18-125"><a href="#cb18-125" aria-hidden="true" tabindex="-1"></a>                        <span class="dt">var</span> dir <span class="op">=</span> go<span class="op">.</span><span class="fu">transform</span><span class="op">.</span><span class="fu">rotation</span> <span class="op">*</span> Vector3<span class="op">.</span><span class="fu">forward</span><span class="op">;</span></span><span id="cb18-126"><a href="#cb18-126" aria-hidden="true" tabindex="-1"></a>                        appendGraphic <span class="op">=</span> Vector3<span class="op">.</span><span class="fu">Dot</span><span class="op">(</span>cameraFoward<span class="op">,</span> dir<span class="op">)</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb18-127"><a href="#cb18-127" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb18-128"><a href="#cb18-128" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb18-129"><a href="#cb18-129" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-130"><a href="#cb18-130" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>appendGraphic<span class="op">)</span></span><span id="cb18-131"><a href="#cb18-131" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb18-132"><a href="#cb18-132" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">float</span> distance <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb18-133"><a href="#cb18-133" aria-hidden="true" tabindex="-1"></a>                    Transform trans <span class="op">=</span> go<span class="op">.</span><span class="fu">transform</span><span class="op">;</span></span><span id="cb18-134"><a href="#cb18-134" aria-hidden="true" tabindex="-1"></a>                    Vector3 transForward <span class="op">=</span> trans<span class="op">.</span><span class="fu">forward</span><span class="op">;</span></span><span id="cb18-135"><a href="#cb18-135" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-136"><a href="#cb18-136" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>currentEventCamera <span class="op">==</span> <span class="kw">null</span> <span class="op">||</span> canvas<span class="op">.</span><span class="fu">renderMode</span> <span class="op">==</span> RenderMode<span class="op">.</span><span class="fu">ScreenSpaceOverlay</span><span class="op">)</span></span><span id="cb18-137"><a href="#cb18-137" aria-hidden="true" tabindex="-1"></a>                        distance <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb18-138"><a href="#cb18-138" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">else</span></span><span id="cb18-139"><a href="#cb18-139" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb18-140"><a href="#cb18-140" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// http://geomalgorithms.com/a06-_intersect-2.html</span></span><span id="cb18-141"><a href="#cb18-141" aria-hidden="true" tabindex="-1"></a>                        distance <span class="op">=</span> <span class="op">(</span>Vector3<span class="op">.</span><span class="fu">Dot</span><span class="op">(</span>transForward<span class="op">,</span> trans<span class="op">.</span><span class="fu">position</span> <span class="op">-</span> ray<span class="op">.</span><span class="fu">origin</span><span class="op">)</span> <span class="op">/</span> Vector3<span class="op">.</span><span class="fu">Dot</span><span class="op">(</span>transForward<span class="op">,</span> ray<span class="op">.</span><span class="fu">direction</span><span class="op">));</span></span><span id="cb18-142"><a href="#cb18-142" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-143"><a href="#cb18-143" aria-hidden="true" tabindex="-1"></a>                        <span class="co">// Check to see if the go is behind the camera.</span></span><span id="cb18-144"><a href="#cb18-144" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(</span>distance <span class="op">&lt;</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb18-145"><a href="#cb18-145" aria-hidden="true" tabindex="-1"></a>                            <span class="kw">continue</span><span class="op">;</span></span><span id="cb18-146"><a href="#cb18-146" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb18-147"><a href="#cb18-147" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-148"><a href="#cb18-148" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>distance <span class="op">&gt;=</span> hitDistance<span class="op">)</span></span><span id="cb18-149"><a href="#cb18-149" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">continue</span><span class="op">;</span></span><span id="cb18-150"><a href="#cb18-150" aria-hidden="true" tabindex="-1"></a></span><span id="cb18-151"><a href="#cb18-151" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> castResult <span class="op">=</span> <span class="kw">new</span> RaycastResult</span><span id="cb18-152"><a href="#cb18-152" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb18-153"><a href="#cb18-153" aria-hidden="true" tabindex="-1"></a>                        gameObject <span class="op">=</span> go<span class="op">,</span></span><span id="cb18-154"><a href="#cb18-154" aria-hidden="true" tabindex="-1"></a>                        module <span class="op">=</span> <span class="kw">this</span><span class="op">,</span></span><span id="cb18-155"><a href="#cb18-155" aria-hidden="true" tabindex="-1"></a>                        distance <span class="op">=</span> distance<span class="op">,</span></span><span id="cb18-156"><a href="#cb18-156" aria-hidden="true" tabindex="-1"></a>                        screenPosition <span class="op">=</span> eventPosition<span class="op">,</span></span><span id="cb18-157"><a href="#cb18-157" aria-hidden="true" tabindex="-1"></a>                        index <span class="op">=</span> resultAppendList<span class="op">.</span><span class="fu">Count</span><span class="op">,</span></span><span id="cb18-158"><a href="#cb18-158" aria-hidden="true" tabindex="-1"></a>                        depth <span class="op">=</span> m_RaycastResults<span class="op">[</span>index<span class="op">].</span><span class="fu">depth</span><span class="op">,</span></span><span id="cb18-159"><a href="#cb18-159" aria-hidden="true" tabindex="-1"></a>                        sortingLayer <span class="op">=</span> canvas<span class="op">.</span><span class="fu">sortingLayerID</span><span class="op">,</span></span><span id="cb18-160"><a href="#cb18-160" aria-hidden="true" tabindex="-1"></a>                        sortingOrder <span class="op">=</span> canvas<span class="op">.</span><span class="fu">sortingOrder</span><span class="op">,</span></span><span id="cb18-161"><a href="#cb18-161" aria-hidden="true" tabindex="-1"></a>                        worldPosition <span class="op">=</span> ray<span class="op">.</span><span class="fu">origin</span> <span class="op">+</span> ray<span class="op">.</span><span class="fu">direction</span> <span class="op">*</span> distance<span class="op">,</span></span><span id="cb18-162"><a href="#cb18-162" aria-hidden="true" tabindex="-1"></a>                        worldNormal <span class="op">=</span> <span class="op">-</span>transForward</span><span id="cb18-163"><a href="#cb18-163" aria-hidden="true" tabindex="-1"></a>                    <span class="op">};</span></span><span id="cb18-164"><a href="#cb18-164" aria-hidden="true" tabindex="-1"></a>                    resultAppendList<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>castResult<span class="op">);</span></span><span id="cb18-165"><a href="#cb18-165" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb18-166"><a href="#cb18-166" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb18-167"><a href="#cb18-167" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb19"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb19-1"><a href="#cb19-1" aria-hidden="true" tabindex="-1"></a><span class="co">//RectTransform的Raycast监测方式</span></span><span id="cb19-2"><a href="#cb19-2" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">static</span> <span class="dt">void</span> <span class="fu">Raycast</span><span class="op">(</span>Canvas canvas<span class="op">,</span> Camera eventCamera<span class="op">,</span> Vector2 pointerPosition<span class="op">,</span> IList<span class="op">&lt;</span>Graphic<span class="op">&gt;</span> foundGraphics<span class="op">,</span> List<span class="op">&lt;</span>Graphic<span class="op">&gt;</span> results<span class="op">)</span></span><span id="cb19-3"><a href="#cb19-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb19-4"><a href="#cb19-4" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Necessary for the event system</span></span><span id="cb19-5"><a href="#cb19-5" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> totalCount <span class="op">=</span> foundGraphics<span class="op">.</span><span class="fu">Count</span><span class="op">;</span></span><span id="cb19-6"><a href="#cb19-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> totalCount<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span><span id="cb19-7"><a href="#cb19-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb19-8"><a href="#cb19-8" aria-hidden="true" tabindex="-1"></a>                Graphic graphic <span class="op">=</span> foundGraphics<span class="op">[</span>i<span class="op">];</span></span><span id="cb19-9"><a href="#cb19-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-10"><a href="#cb19-10" aria-hidden="true" tabindex="-1"></a>                <span class="co">// -1 means it hasn't been processed by the canvas, which means it isn't actually drawn</span></span><span id="cb19-11"><a href="#cb19-11" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>graphic<span class="op">.</span><span class="fu">depth</span> <span class="op">==</span> <span class="op">-</span><span class="dv">1</span> <span class="op">||</span> <span class="op">!</span>graphic<span class="op">.</span><span class="fu">raycastTarget</span> <span class="op">||</span> graphic<span class="op">.</span><span class="fu">canvasRenderer</span><span class="op">.</span><span class="fu">cull</span><span class="op">)</span></span><span id="cb19-12"><a href="#cb19-12" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">continue</span><span class="op">;</span></span><span id="cb19-13"><a href="#cb19-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-14"><a href="#cb19-14" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(!</span>RectTransformUtility<span class="op">.</span><span class="fu">RectangleContainsScreenPoint</span><span class="op">(</span>graphic<span class="op">.</span><span class="fu">rectTransform</span><span class="op">,</span> pointerPosition<span class="op">,</span> eventCamera<span class="op">))</span></span><span id="cb19-15"><a href="#cb19-15" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">continue</span><span class="op">;</span></span><span id="cb19-16"><a href="#cb19-16" aria-hidden="true" tabindex="-1"></a>                <span class="co">// z 不能超过远裁剪面</span></span><span id="cb19-17"><a href="#cb19-17" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>eventCamera <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> eventCamera<span class="op">.</span><span class="fu">WorldToScreenPoint</span><span class="op">(</span>graphic<span class="op">.</span><span class="fu">rectTransform</span><span class="op">.</span><span class="fu">position</span><span class="op">).</span><span class="fu">z</span> <span class="op">&gt;</span> eventCamera<span class="op">.</span><span class="fu">farClipPlane</span><span class="op">)</span></span><span id="cb19-18"><a href="#cb19-18" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">continue</span><span class="op">;</span></span><span id="cb19-19"><a href="#cb19-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-20"><a href="#cb19-20" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>graphic<span class="op">.</span><span class="fu">Raycast</span><span class="op">(</span>pointerPosition<span class="op">,</span> eventCamera<span class="op">))</span></span><span id="cb19-21"><a href="#cb19-21" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb19-22"><a href="#cb19-22" aria-hidden="true" tabindex="-1"></a>                    s_SortedGraphics<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>graphic<span class="op">);</span></span><span id="cb19-23"><a href="#cb19-23" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb19-24"><a href="#cb19-24" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb19-25"><a href="#cb19-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-26"><a href="#cb19-26" aria-hidden="true" tabindex="-1"></a>            s_SortedGraphics<span class="op">.</span><span class="fu">Sort</span><span class="op">((</span>g1<span class="op">,</span> g2<span class="op">)</span> <span class="op">=&gt;</span> g2<span class="op">.</span><span class="fu">depth</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>g1<span class="op">.</span><span class="fu">depth</span><span class="op">));</span></span><span id="cb19-27"><a href="#cb19-27" aria-hidden="true" tabindex="-1"></a>            totalCount <span class="op">=</span> s_SortedGraphics<span class="op">.</span><span class="fu">Count</span><span class="op">;</span></span><span id="cb19-28"><a href="#cb19-28" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> totalCount<span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span><span id="cb19-29"><a href="#cb19-29" aria-hidden="true" tabindex="-1"></a>                results<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>s_SortedGraphics<span class="op">[</span>i<span class="op">]);</span></span><span id="cb19-30"><a href="#cb19-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb19-31"><a href="#cb19-31" aria-hidden="true" tabindex="-1"></a>            s_SortedGraphics<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb19-32"><a href="#cb19-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>Physics2DRaycaster 继承自 PhysicsRaycaster</p></li></ol><div class="sourceCode" id="cb20"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb20-1"><a href="#cb20-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">Raycast</span><span class="op">(</span>PointerEventData eventData<span class="op">,</span> List<span class="op">&lt;</span>RaycastResult<span class="op">&gt;</span> resultAppendList<span class="op">)</span></span><span id="cb20-2"><a href="#cb20-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb20-3"><a href="#cb20-3" aria-hidden="true" tabindex="-1"></a>            Ray ray <span class="op">=</span> <span class="kw">new</span> <span class="fu">Ray</span><span class="op">();</span></span><span id="cb20-4"><a href="#cb20-4" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> distanceToClipPlane <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb20-5"><a href="#cb20-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span><span class="fu">ComputeRayAndDistance</span><span class="op">(</span>eventData<span class="op">,</span> <span class="kw">ref</span> ray<span class="op">,</span> <span class="kw">ref</span> distanceToClipPlane<span class="op">))</span></span><span id="cb20-6"><a href="#cb20-6" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb20-7"><a href="#cb20-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-8"><a href="#cb20-8" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> hitCount <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb20-9"><a href="#cb20-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-10"><a href="#cb20-10" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>maxRayIntersections <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb20-11"><a href="#cb20-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb20-12"><a href="#cb20-12" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRayIntersectionAll</span> <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb20-13"><a href="#cb20-13" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span><span class="op">;</span></span><span id="cb20-14"><a href="#cb20-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-15"><a href="#cb20-15" aria-hidden="true" tabindex="-1"></a>                m_Hits <span class="op">=</span> ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRayIntersectionAll</span><span class="op">(</span>ray<span class="op">,</span> distanceToClipPlane<span class="op">,</span> finalEventMask<span class="op">);</span></span><span id="cb20-16"><a href="#cb20-16" aria-hidden="true" tabindex="-1"></a>                hitCount <span class="op">=</span> m_Hits<span class="op">.</span><span class="fu">Length</span><span class="op">;</span></span><span id="cb20-17"><a href="#cb20-17" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb20-18"><a href="#cb20-18" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb20-19"><a href="#cb20-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb20-20"><a href="#cb20-20" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRayIntersectionAllNonAlloc</span> <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb20-21"><a href="#cb20-21" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span><span class="op">;</span></span><span id="cb20-22"><a href="#cb20-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-23"><a href="#cb20-23" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>m_LastMaxRayIntersections <span class="op">!=</span> m_MaxRayIntersections<span class="op">)</span></span><span id="cb20-24"><a href="#cb20-24" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb20-25"><a href="#cb20-25" aria-hidden="true" tabindex="-1"></a>                    m_Hits <span class="op">=</span> <span class="kw">new</span> RaycastHit2D<span class="op">[</span>maxRayIntersections<span class="op">];</span></span><span id="cb20-26"><a href="#cb20-26" aria-hidden="true" tabindex="-1"></a>                    m_LastMaxRayIntersections <span class="op">=</span> m_MaxRayIntersections<span class="op">;</span></span><span id="cb20-27"><a href="#cb20-27" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb20-28"><a href="#cb20-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-29"><a href="#cb20-29" aria-hidden="true" tabindex="-1"></a>                hitCount <span class="op">=</span> ReflectionMethodsCache<span class="op">.</span><span class="fu">Singleton</span><span class="op">.</span><span class="fu">getRayIntersectionAllNonAlloc</span><span class="op">(</span>ray<span class="op">,</span> m_Hits<span class="op">,</span> distanceToClipPlane<span class="op">,</span> finalEventMask<span class="op">);</span></span><span id="cb20-30"><a href="#cb20-30" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb20-31"><a href="#cb20-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-32"><a href="#cb20-32" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>hitCount <span class="op">!=</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb20-33"><a href="#cb20-33" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb20-34"><a href="#cb20-34" aria-hidden="true" tabindex="-1"></a>                <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> b <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> bmax <span class="op">=</span> hitCount<span class="op">;</span> b <span class="op">&lt;</span> bmax<span class="op">;</span> <span class="op">++</span>b<span class="op">)</span></span><span id="cb20-35"><a href="#cb20-35" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb20-36"><a href="#cb20-36" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> sr <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">collider</span><span class="op">.</span><span class="fu">gameObject</span><span class="op">.</span><span class="fu">GetComponent</span><span class="op">&lt;</span>SpriteRenderer<span class="op">&gt;();</span></span><span id="cb20-37"><a href="#cb20-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb20-38"><a href="#cb20-38" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> result <span class="op">=</span> <span class="kw">new</span> RaycastResult</span><span id="cb20-39"><a href="#cb20-39" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb20-40"><a href="#cb20-40" aria-hidden="true" tabindex="-1"></a>                        gameObject <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">collider</span><span class="op">.</span><span class="fu">gameObject</span><span class="op">,</span></span><span id="cb20-41"><a href="#cb20-41" aria-hidden="true" tabindex="-1"></a>                        module <span class="op">=</span> <span class="kw">this</span><span class="op">,</span></span><span id="cb20-42"><a href="#cb20-42" aria-hidden="true" tabindex="-1"></a>                        distance <span class="op">=</span> Vector3<span class="op">.</span><span class="fu">Distance</span><span class="op">(</span>eventCamera<span class="op">.</span><span class="fu">transform</span><span class="op">.</span><span class="fu">position</span><span class="op">,</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">point</span><span class="op">),</span></span><span id="cb20-43"><a href="#cb20-43" aria-hidden="true" tabindex="-1"></a>                        worldPosition <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">point</span><span class="op">,</span></span><span id="cb20-44"><a href="#cb20-44" aria-hidden="true" tabindex="-1"></a>                        worldNormal <span class="op">=</span> m_Hits<span class="op">[</span>b<span class="op">].</span><span class="fu">normal</span><span class="op">,</span></span><span id="cb20-45"><a href="#cb20-45" aria-hidden="true" tabindex="-1"></a>                        screenPosition <span class="op">=</span> eventData<span class="op">.</span><span class="fu">position</span><span class="op">,</span></span><span id="cb20-46"><a href="#cb20-46" aria-hidden="true" tabindex="-1"></a>                        index <span class="op">=</span> resultAppendList<span class="op">.</span><span class="fu">Count</span><span class="op">,</span></span><span id="cb20-47"><a href="#cb20-47" aria-hidden="true" tabindex="-1"></a>                        sortingLayer <span class="op">=</span>  sr <span class="op">!=</span> <span class="kw">null</span> <span class="op">?</span> sr<span class="op">.</span><span class="fu">sortingLayerID</span> <span class="op">:</span> <span class="dv">0</span><span class="op">,</span></span><span id="cb20-48"><a href="#cb20-48" aria-hidden="true" tabindex="-1"></a>                        sortingOrder <span class="op">=</span> sr <span class="op">!=</span> <span class="kw">null</span> <span class="op">?</span> sr<span class="op">.</span><span class="fu">sortingOrder</span> <span class="op">:</span> <span class="dv">0</span></span><span id="cb20-49"><a href="#cb20-49" aria-hidden="true" tabindex="-1"></a>                    <span class="op">};</span></span><span id="cb20-50"><a href="#cb20-50" aria-hidden="true" tabindex="-1"></a>                    resultAppendList<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>result<span class="op">);</span></span><span id="cb20-51"><a href="#cb20-51" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb20-52"><a href="#cb20-52" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb20-53"><a href="#cb20-53" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><ol start="5" type="1"><li><p>事件排序规则</p><div class="sourceCode" id="cb21"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb21-1"><a href="#cb21-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">private</span> <span class="kw">static</span> <span class="dt">int</span> <span class="fu">RaycastComparer</span><span class="op">(</span>RaycastResult lhs<span class="op">,</span> RaycastResult rhs<span class="op">)</span></span><span id="cb21-2"><a href="#cb21-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb21-3"><a href="#cb21-3" aria-hidden="true" tabindex="-1"></a>            <span class="co">//不同的 BaseRaycaster</span></span><span id="cb21-4"><a href="#cb21-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">module</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">)</span></span><span id="cb21-5"><a href="#cb21-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb21-6"><a href="#cb21-6" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> lhsEventCamera <span class="op">=</span> lhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">eventCamera</span><span class="op">;</span></span><span id="cb21-7"><a href="#cb21-7" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> rhsEventCamera <span class="op">=</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">eventCamera</span><span class="op">;</span></span><span id="cb21-8"><a href="#cb21-8" aria-hidden="true" tabindex="-1"></a>                <span class="co">//1. Raycaster的不相机的depth 越小越靠前</span></span><span id="cb21-9"><a href="#cb21-9" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>lhsEventCamera <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> rhsEventCamera <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> lhsEventCamera<span class="op">.</span><span class="fu">depth</span> <span class="op">!=</span> rhsEventCamera<span class="op">.</span><span class="fu">depth</span><span class="op">)</span></span><span id="cb21-10"><a href="#cb21-10" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb21-11"><a href="#cb21-11" aria-hidden="true" tabindex="-1"></a>                    <span class="co">// need to reverse the standard compareTo</span></span><span id="cb21-12"><a href="#cb21-12" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>lhsEventCamera<span class="op">.</span><span class="fu">depth</span> <span class="op">&lt;</span> rhsEventCamera<span class="op">.</span><span class="fu">depth</span><span class="op">)</span></span><span id="cb21-13"><a href="#cb21-13" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb21-14"><a href="#cb21-14" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>lhsEventCamera<span class="op">.</span><span class="fu">depth</span> <span class="op">==</span> rhsEventCamera<span class="op">.</span><span class="fu">depth</span><span class="op">)</span></span><span id="cb21-15"><a href="#cb21-15" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb21-16"><a href="#cb21-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-17"><a href="#cb21-17" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span><span id="cb21-18"><a href="#cb21-18" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb21-19"><a href="#cb21-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-20"><a href="#cb21-20" aria-hidden="true" tabindex="-1"></a>                <span class="co">//2. Raycaster的排序优先级</span></span><span id="cb21-21"><a href="#cb21-21" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">sortOrderPriority</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">sortOrderPriority</span><span class="op">)</span></span><span id="cb21-22"><a href="#cb21-22" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">sortOrderPriority</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>lhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">sortOrderPriority</span><span class="op">);</span></span><span id="cb21-23"><a href="#cb21-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-24"><a href="#cb21-24" aria-hidden="true" tabindex="-1"></a>                <span class="co">//3. Raycaster的渲染优先级</span></span><span id="cb21-25"><a href="#cb21-25" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">renderOrderPriority</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">renderOrderPriority</span><span class="op">)</span></span><span id="cb21-26"><a href="#cb21-26" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">renderOrderPriority</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>lhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">renderOrderPriority</span><span class="op">);</span></span><span id="cb21-27"><a href="#cb21-27" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb21-28"><a href="#cb21-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-29"><a href="#cb21-29" aria-hidden="true" tabindex="-1"></a>            <span class="co">//层级排序</span></span><span id="cb21-30"><a href="#cb21-30" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">sortingLayer</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">sortingLayer</span><span class="op">)</span></span><span id="cb21-31"><a href="#cb21-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb21-32"><a href="#cb21-32" aria-hidden="true" tabindex="-1"></a>                <span class="co">// Uses the layer value to properly compare the relative order of the layers.</span></span><span id="cb21-33"><a href="#cb21-33" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> rid <span class="op">=</span> SortingLayer<span class="op">.</span><span class="fu">GetLayerValueFromID</span><span class="op">(</span>rhs<span class="op">.</span><span class="fu">sortingLayer</span><span class="op">);</span></span><span id="cb21-34"><a href="#cb21-34" aria-hidden="true" tabindex="-1"></a>                <span class="dt">var</span> lid <span class="op">=</span> SortingLayer<span class="op">.</span><span class="fu">GetLayerValueFromID</span><span class="op">(</span>lhs<span class="op">.</span><span class="fu">sortingLayer</span><span class="op">);</span></span><span id="cb21-35"><a href="#cb21-35" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> rid<span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>lid<span class="op">);</span></span><span id="cb21-36"><a href="#cb21-36" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb21-37"><a href="#cb21-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-38"><a href="#cb21-38" aria-hidden="true" tabindex="-1"></a>            <span class="co">//深度值排序</span></span><span id="cb21-39"><a href="#cb21-39" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">sortingOrder</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">sortingOrder</span><span class="op">)</span></span><span id="cb21-40"><a href="#cb21-40" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> rhs<span class="op">.</span><span class="fu">sortingOrder</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>lhs<span class="op">.</span><span class="fu">sortingOrder</span><span class="op">);</span></span><span id="cb21-41"><a href="#cb21-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-42"><a href="#cb21-42" aria-hidden="true" tabindex="-1"></a>            <span class="co">// comparing depth only makes sense if the two raycast results have the same root canvas (case 912396)</span></span><span id="cb21-43"><a href="#cb21-43" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">depth</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">depth</span> <span class="op">&amp;&amp;</span> lhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">rootRaycaster</span> <span class="op">==</span> rhs<span class="op">.</span><span class="fu">module</span><span class="op">.</span><span class="fu">rootRaycaster</span><span class="op">)</span></span><span id="cb21-44"><a href="#cb21-44" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> rhs<span class="op">.</span><span class="fu">depth</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>lhs<span class="op">.</span><span class="fu">depth</span><span class="op">);</span></span><span id="cb21-45"><a href="#cb21-45" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-46"><a href="#cb21-46" aria-hidden="true" tabindex="-1"></a>            <span class="co">//距离</span></span><span id="cb21-47"><a href="#cb21-47" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>lhs<span class="op">.</span><span class="fu">distance</span> <span class="op">!=</span> rhs<span class="op">.</span><span class="fu">distance</span><span class="op">)</span></span><span id="cb21-48"><a href="#cb21-48" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> lhs<span class="op">.</span><span class="fu">distance</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>rhs<span class="op">.</span><span class="fu">distance</span><span class="op">);</span></span><span id="cb21-49"><a href="#cb21-49" aria-hidden="true" tabindex="-1"></a></span><span id="cb21-50"><a href="#cb21-50" aria-hidden="true" tabindex="-1"></a>            <span class="co">//条件相同的情况 使用射线监测的反向顺序</span></span><span id="cb21-51"><a href="#cb21-51" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> lhs<span class="op">.</span><span class="fu">index</span><span class="op">.</span><span class="fu">CompareTo</span><span class="op">(</span>rhs<span class="op">.</span><span class="fu">index</span><span class="op">);</span></span><span id="cb21-52"><a href="#cb21-52" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li></ol></li><li><p>其他</p><ol type="1"><li>Display.RelativeMouseAt 对于多显示器取相对位置。 z轴为相机的<code>targetDisplay</code></li><li>RectTransformUtility.RectangleContainsScreenPoint监测屏幕点包含于Rect</li></ol></li></ol></li></ol><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/4.ugui-maskablegraphic/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/4.ugui-maskablegraphic/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui之maskablegraphic">uGUI之MaskableGraphic</h2><blockquote><p>实际ui控件的抽象基类</p><p>在需要绘制的ui组件的抽象类的基础添加了 IMaskable,IClippable,IMaterialModifier 功能，</p><p>主要 IMaskable,IClippable功能，可被mask裁剪。</p></blockquote><ol type="1"><li><p>MaskableGraphic</p><blockquote><p>继承自 Graphic, IClippable, IMaskable,IMaterialModifier，实际的控件的基类</p><p>这部分主要是计算 mask和 clip区域， 基于 模板</p></blockquote><ol type="1"><li><p>IClippable</p><blockquote><p>主要的接口 RecalculateClipping，Cull，SetClipRect</p></blockquote><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>      <span class="kw">public</span> <span class="kw">interface</span> IClippable</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// GameObject of the IClippable object</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        GameObject gameObject <span class="op">{</span> <span class="kw">get</span><span class="op">;</span> <span class="op">}</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Will be called when the state of a parent IClippable changed.</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">RecalculateClipping</span><span class="op">();</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// The RectTransform of the clippable.</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        RectTransform rectTransform <span class="op">{</span> <span class="kw">get</span><span class="op">;</span> <span class="op">}</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Clip and cull the IClippable given a specific clipping rect</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"clipRect"</span><span class="kw">&gt;</span><span class="co">The Rectangle in which to clip against.</span><span class="kw">&lt;/param&gt;</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"validRect"</span><span class="kw">&gt;</span><span class="co">Is the Rect valid. If not then the rect has 0 size.</span><span class="kw">&lt;/param&gt;</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">Cull</span><span class="op">(</span>Rect clipRect<span class="op">,</span> <span class="dt">bool</span> validRect<span class="op">);</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Set the clip rect for the IClippable.</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"value"</span><span class="kw">&gt;</span><span class="co">The Rectangle for the clipping</span><span class="kw">&lt;/param&gt;</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"validRect"</span><span class="kw">&gt;</span><span class="co">Is the rect valid.</span><span class="kw">&lt;/param&gt;</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">SetClipRect</span><span class="op">(</span>Rect value<span class="op">,</span> <span class="dt">bool</span> validRect<span class="op">);</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>IMaskable接口实现</p><blockquote><p>主要接口 RecalculateMasking</p></blockquote><div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">interface</span> IMaskable</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Recalculate masking for this element and all children elements.</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;remarks&gt;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Use this to update the internal state (recreate materials etc).</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/remarks&gt;</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">RecalculateMasking</span><span class="op">();</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>IMaterialModifier</p><blockquote><p>主要接口 GetModifiedMaterial</p></blockquote><div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>   <span class="kw">public</span> <span class="kw">interface</span> IMaterialModifier</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Perform material modification in this function.</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"baseMaterial"</span><span class="kw">&gt;</span><span class="co">The material that is to be modified</span><span class="kw">&lt;/param&gt;</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;returns&gt;</span><span class="co">The modified material.</span><span class="kw">&lt;/returns&gt;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        Material <span class="fu">GetModifiedMaterial</span><span class="op">(</span>Material baseMaterial<span class="op">);</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>实现细节</p><blockquote><p>主要功能是 Clipable 和mask</p></blockquote><ol type="1"><li>mask 实现</li></ol><blockquote><p>主要通过 材质<code>模板属性Stencil</code>的操作</p><p><code>StencilMaterial.Remove</code> 和<code>StencilMaterial.Add</code> 进行缓存</p></blockquote><div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">//StencilMaterial.cs  </span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span> <span class="kw">class</span> MatEntry</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> Material baseMat<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> Material customMat<span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> <span class="dt">int</span> count<span class="op">;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> <span class="dt">int</span> stencilId<span class="op">;</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> StencilOp operation <span class="op">=</span> StencilOp<span class="op">.</span><span class="fu">Keep</span><span class="op">;</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> CompareFunction compareFunction <span class="op">=</span> CompareFunction<span class="op">.</span><span class="fu">Always</span><span class="op">;</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> <span class="dt">int</span> readMask<span class="op">;</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> <span class="dt">int</span> writeMask<span class="op">;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> <span class="dt">bool</span> useAlphaClip<span class="op">;</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">public</span> ColorWriteMask colorMask<span class="op">;</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> Material <span class="fu">Add</span><span class="op">(</span>Material baseMat<span class="op">,</span> <span class="dt">int</span> stencilID<span class="op">,</span> StencilOp operation<span class="op">,</span> CompareFunction compareFunction<span class="op">,</span> ColorWriteMask colorWriteMask<span class="op">)</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="fu">Add</span><span class="op">(</span>baseMat<span class="op">,</span> stencilID<span class="op">,</span> operation<span class="op">,</span> compareFunction<span class="op">,</span> colorWriteMask<span class="op">,</span> <span class="dv">255</span><span class="op">,</span> <span class="dv">255</span><span class="op">);</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Add a new material using the specified base and stencil ID.</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span> <span class="kw">static</span> Material <span class="fu">Add</span><span class="op">(</span>Material baseMat<span class="op">,</span> <span class="dt">int</span> stencilID<span class="op">,</span> StencilOp operation<span class="op">,</span> CompareFunction compareFunction<span class="op">,</span> ColorWriteMask colorWriteMask<span class="op">,</span> <span class="dt">int</span> readMask<span class="op">,</span> <span class="dt">int</span> writeMask<span class="op">)</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">///检查是否有标准的模板选项 </span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>            <span class="co">// _Stencil,_StencilOp，_StencilComp，_StencilReadMask，_StencilWriteMask，_ColorMask</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">((</span>stencilID <span class="op">&lt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> colorWriteMask <span class="op">==</span> ColorWriteMask<span class="op">.</span><span class="fu">All</span><span class="op">)</span> <span class="op">||</span> baseMat <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>baseMat<span class="op">.</span><span class="fu">HasProperty</span><span class="op">(</span><span class="st">"_Stencil"</span><span class="op">))</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>                Debug<span class="op">.</span><span class="fu">LogWarning</span><span class="op">(</span><span class="st">"Material "</span> <span class="op">+</span> baseMat<span class="op">.</span><span class="fu">name</span> <span class="op">+</span> <span class="st">" doesn't have _Stencil property"</span><span class="op">,</span> baseMat<span class="op">);</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>baseMat<span class="op">.</span><span class="fu">HasProperty</span><span class="op">(</span><span class="st">"_StencilOp"</span><span class="op">))</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>                Debug<span class="op">.</span><span class="fu">LogWarning</span><span class="op">(</span><span class="st">"Material "</span> <span class="op">+</span> baseMat<span class="op">.</span><span class="fu">name</span> <span class="op">+</span> <span class="st">" doesn't have _StencilOp property"</span><span class="op">,</span> baseMat<span class="op">);</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>baseMat<span class="op">.</span><span class="fu">HasProperty</span><span class="op">(</span><span class="st">"_StencilComp"</span><span class="op">))</span></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>                Debug<span class="op">.</span><span class="fu">LogWarning</span><span class="op">(</span><span class="st">"Material "</span> <span class="op">+</span> baseMat<span class="op">.</span><span class="fu">name</span> <span class="op">+</span> <span class="st">" doesn't have _StencilComp property"</span><span class="op">,</span> baseMat<span class="op">);</span></span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>baseMat<span class="op">.</span><span class="fu">HasProperty</span><span class="op">(</span><span class="st">"_StencilReadMask"</span><span class="op">))</span></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>                Debug<span class="op">.</span><span class="fu">LogWarning</span><span class="op">(</span><span class="st">"Material "</span> <span class="op">+</span> baseMat<span class="op">.</span><span class="fu">name</span> <span class="op">+</span> <span class="st">" doesn't have _StencilReadMask property"</span><span class="op">,</span> baseMat<span class="op">);</span></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>baseMat<span class="op">.</span><span class="fu">HasProperty</span><span class="op">(</span><span class="st">"_StencilWriteMask"</span><span class="op">))</span></span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>                Debug<span class="op">.</span><span class="fu">LogWarning</span><span class="op">(</span><span class="st">"Material "</span> <span class="op">+</span> baseMat<span class="op">.</span><span class="fu">name</span> <span class="op">+</span> <span class="st">" doesn't have _StencilWriteMask property"</span><span class="op">,</span> baseMat<span class="op">);</span></span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>baseMat<span class="op">.</span><span class="fu">HasProperty</span><span class="op">(</span><span class="st">"_ColorMask"</span><span class="op">))</span></span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>                Debug<span class="op">.</span><span class="fu">LogWarning</span><span class="op">(</span><span class="st">"Material "</span> <span class="op">+</span> baseMat<span class="op">.</span><span class="fu">name</span> <span class="op">+</span> <span class="st">" doesn't have _ColorMask property"</span><span class="op">,</span> baseMat<span class="op">);</span></span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> baseMat<span class="op">;</span></span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 从缓冲读取</span></span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> m_List<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>                MatEntry ent <span class="op">=</span> m_List<span class="op">[</span>i<span class="op">];</span></span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ent<span class="op">.</span><span class="fu">baseMat</span> <span class="op">==</span> baseMat</span><span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> ent<span class="op">.</span><span class="fu">stencilId</span> <span class="op">==</span> stencilID</span><span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> ent<span class="op">.</span><span class="fu">operation</span> <span class="op">==</span> operation</span><span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> ent<span class="op">.</span><span class="fu">compareFunction</span> <span class="op">==</span> compareFunction</span><span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> ent<span class="op">.</span><span class="fu">readMask</span> <span class="op">==</span> readMask</span><span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> ent<span class="op">.</span><span class="fu">writeMask</span> <span class="op">==</span> writeMask</span><span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a>                    <span class="op">&amp;&amp;</span> ent<span class="op">.</span><span class="fu">colorMask</span> <span class="op">==</span> colorWriteMask<span class="op">)</span></span><span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>                    <span class="op">++</span>ent<span class="op">.</span><span class="fu">count</span><span class="op">;</span></span><span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">return</span> ent<span class="op">.</span><span class="fu">customMat</span><span class="op">;</span></span><span id="cb5-63"><a href="#cb5-63" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb5-64"><a href="#cb5-64" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb5-65"><a href="#cb5-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-66"><a href="#cb5-66" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 设置模板选项 并加入缓存</span></span><span id="cb5-67"><a href="#cb5-67" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> newEnt <span class="op">=</span> <span class="kw">new</span> <span class="fu">MatEntry</span><span class="op">();</span></span><span id="cb5-68"><a href="#cb5-68" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">count</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb5-69"><a href="#cb5-69" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">baseMat</span> <span class="op">=</span> baseMat<span class="op">;</span></span><span id="cb5-70"><a href="#cb5-70" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span> <span class="op">=</span> <span class="kw">new</span> <span class="fu">Material</span><span class="op">(</span>baseMat<span class="op">);</span></span><span id="cb5-71"><a href="#cb5-71" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">hideFlags</span> <span class="op">=</span> HideFlags<span class="op">.</span><span class="fu">HideAndDontSave</span><span class="op">;</span></span><span id="cb5-72"><a href="#cb5-72" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">stencilId</span> <span class="op">=</span> stencilID<span class="op">;</span></span><span id="cb5-73"><a href="#cb5-73" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">operation</span> <span class="op">=</span> operation<span class="op">;</span></span><span id="cb5-74"><a href="#cb5-74" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">compareFunction</span> <span class="op">=</span> compareFunction<span class="op">;</span></span><span id="cb5-75"><a href="#cb5-75" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">readMask</span> <span class="op">=</span> readMask<span class="op">;</span></span><span id="cb5-76"><a href="#cb5-76" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">writeMask</span> <span class="op">=</span> writeMask<span class="op">;</span></span><span id="cb5-77"><a href="#cb5-77" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">colorMask</span> <span class="op">=</span> colorWriteMask<span class="op">;</span></span><span id="cb5-78"><a href="#cb5-78" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">useAlphaClip</span> <span class="op">=</span> operation <span class="op">!=</span> StencilOp<span class="op">.</span><span class="fu">Keep</span> <span class="op">&amp;&amp;</span> writeMask <span class="op">&gt;</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb5-79"><a href="#cb5-79" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-80"><a href="#cb5-80" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">name</span> <span class="op">=</span> <span class="dt">string</span><span class="op">.</span><span class="fu">Format</span><span class="op">(</span><span class="st">"Stencil Id:{0}, Op:{1}, Comp:{2}, WriteMask:{3}, ReadMask:{4}, ColorMask:{5} AlphaClip:{6} ({7})"</span><span class="op">,</span> stencilID<span class="op">,</span> operation<span class="op">,</span> compareFunction<span class="op">,</span> writeMask<span class="op">,</span> readMask<span class="op">,</span> colorWriteMask<span class="op">,</span> newEnt<span class="op">.</span><span class="fu">useAlphaClip</span><span class="op">,</span> baseMat<span class="op">.</span><span class="fu">name</span><span class="op">);</span></span><span id="cb5-81"><a href="#cb5-81" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-82"><a href="#cb5-82" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_Stencil"</span><span class="op">,</span> stencilID<span class="op">);</span></span><span id="cb5-83"><a href="#cb5-83" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_StencilOp"</span><span class="op">,</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>operation<span class="op">);</span></span><span id="cb5-84"><a href="#cb5-84" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_StencilComp"</span><span class="op">,</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>compareFunction<span class="op">);</span></span><span id="cb5-85"><a href="#cb5-85" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_StencilReadMask"</span><span class="op">,</span> readMask<span class="op">);</span></span><span id="cb5-86"><a href="#cb5-86" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_StencilWriteMask"</span><span class="op">,</span> writeMask<span class="op">);</span></span><span id="cb5-87"><a href="#cb5-87" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_ColorMask"</span><span class="op">,</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>colorWriteMask<span class="op">);</span></span><span id="cb5-88"><a href="#cb5-88" aria-hidden="true" tabindex="-1"></a>            newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">SetInt</span><span class="op">(</span><span class="st">"_UseUIAlphaClip"</span><span class="op">,</span> newEnt<span class="op">.</span><span class="fu">useAlphaClip</span> <span class="op">?</span> <span class="dv">1</span> <span class="op">:</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb5-89"><a href="#cb5-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-90"><a href="#cb5-90" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>newEnt<span class="op">.</span><span class="fu">useAlphaClip</span><span class="op">)</span></span><span id="cb5-91"><a href="#cb5-91" aria-hidden="true" tabindex="-1"></a>                newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">EnableKeyword</span><span class="op">(</span><span class="st">"UNITY_UI_ALPHACLIP"</span><span class="op">);</span></span><span id="cb5-92"><a href="#cb5-92" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb5-93"><a href="#cb5-93" aria-hidden="true" tabindex="-1"></a>                newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">.</span><span class="fu">DisableKeyword</span><span class="op">(</span><span class="st">"UNITY_UI_ALPHACLIP"</span><span class="op">);</span></span><span id="cb5-94"><a href="#cb5-94" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-95"><a href="#cb5-95" aria-hidden="true" tabindex="-1"></a>            m_List<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>newEnt<span class="op">);</span></span><span id="cb5-96"><a href="#cb5-96" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> newEnt<span class="op">.</span><span class="fu">customMat</span><span class="op">;</span></span><span id="cb5-97"><a href="#cb5-97" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="dt">void</span> <span class="fu">Remove</span><span class="op">(</span>Material customMat<span class="op">)</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>customMat <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> m_List<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>                MatEntry ent <span class="op">=</span> m_List<span class="op">[</span>i<span class="op">];</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>ent<span class="op">.</span><span class="fu">customMat</span> <span class="op">!=</span> customMat<span class="op">)</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">continue</span><span class="op">;</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(--</span>ent<span class="op">.</span><span class="fu">count</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>                    Misc<span class="op">.</span><span class="fu">DestroyImmediate</span><span class="op">(</span>ent<span class="op">.</span><span class="fu">customMat</span><span class="op">);</span></span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>                    ent<span class="op">.</span><span class="fu">baseMat</span> <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>                    m_List<span class="op">.</span><span class="fu">RemoveAt</span><span class="op">(</span>i<span class="op">);</span></span><span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> </span></code></pre></div><ol start="2" type="1"><li>Clip 实现</li></ol><blockquote><p>主要通过Rect区域（向上递归）， Clipping.FindCullAndClipWorldRect</p></blockquote><div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="co">//RectMask2D.cs</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">PerformClipping</span><span class="op">()</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span><span class="fu">ReferenceEquals</span><span class="op">(</span>Canvas<span class="op">,</span> <span class="kw">null</span><span class="op">))</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>            <span class="co">//</span><span class="al">TODO</span><span class="co"> See if an IsActive() test would work well here or whether it might cause unexpected side effects (re case 776771)</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">// if the parents are changed</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            <span class="co">// or something similar we</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>            <span class="co">// do a recalculate here</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>m_ShouldRecalculateClipRects<span class="op">)</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>                <span class="co">//获取符合条件的 RectMasks</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>                MaskUtilities<span class="op">.</span><span class="fu">GetRectMasksForClip</span><span class="op">(</span><span class="kw">this</span><span class="op">,</span> m_Clippers<span class="op">);</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>                m_ShouldRecalculateClipRects <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>            <span class="co">// get the compound rects from</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>            <span class="co">// the clippers that are valid</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>            <span class="dt">bool</span> validRect <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>           <span class="co">//遍历获取最小rect区域(xMin, yMin, Width, height)</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>            Rect clipRect <span class="op">=</span> Clipping<span class="op">.</span><span class="fu">FindCullAndClipWorldRect</span><span class="op">(</span>m_Clippers<span class="op">,</span> <span class="kw">out</span> validRect<span class="op">);</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>            <span class="co">// If the mask is in ScreenSpaceOverlay/Camera render mode, its content is only rendered when its rect</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>            <span class="co">// overlaps that of the root canvas.</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>           <span class="co">// 1. 可裁剪的相机模式 2. 物体区域和裁剪区域没有重合部分</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>           <span class="co">// 满足条件则进行设置裁剪区域进行裁剪</span></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>           RenderMode renderMode <span class="op">=</span> Canvas<span class="op">.</span><span class="fu">rootCanvas</span><span class="op">.</span><span class="fu">renderMode</span><span class="op">;</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>            <span class="dt">bool</span> maskIsCulled <span class="op">=</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>                <span class="op">(</span>renderMode <span class="op">==</span> RenderMode<span class="op">.</span><span class="fu">ScreenSpaceCamera</span> <span class="op">||</span> renderMode <span class="op">==</span> RenderMode<span class="op">.</span><span class="fu">ScreenSpaceOverlay</span><span class="op">)</span> <span class="op">&amp;&amp;</span></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>                <span class="op">!</span>clipRect<span class="op">.</span><span class="fu">Overlaps</span><span class="op">(</span>rootCanvasRect<span class="op">,</span> <span class="kw">true</span><span class="op">);</span> <span class="co">// </span></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>maskIsCulled<span class="op">)</span></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>                <span class="co">// Children are only displayed when inside the mask. If the mask is culled, then the children</span></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>                <span class="co">// inside the mask are also culled. In that situation, we pass an invalid rect to allow callees</span></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>                <span class="co">// to avoid some processing.</span></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>                clipRect <span class="op">=</span> Rect<span class="op">.</span><span class="fu">zero</span><span class="op">;</span></span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>                validRect <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>clipRect <span class="op">!=</span> m_LastClipRectCanvasSpace<span class="op">)</span></span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a>                <span class="kw">foreach</span> <span class="op">(</span>IClippable clipTarget <span class="kw">in</span> m_ClipTargets<span class="op">)</span></span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a>                    clipTarget<span class="op">.</span><span class="fu">SetClipRect</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a>                <span class="kw">foreach</span> <span class="op">(</span>MaskableGraphic maskableTarget <span class="kw">in</span> m_MaskableTargets<span class="op">)</span></span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a>                    maskableTarget<span class="op">.</span><span class="fu">SetClipRect</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a>                    maskableTarget<span class="op">.</span><span class="fu">Cull</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span> <span class="kw">if</span> <span class="op">(</span>m_ForceClip<span class="op">)</span></span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a>                <span class="kw">foreach</span> <span class="op">(</span>IClippable clipTarget <span class="kw">in</span> m_ClipTargets<span class="op">)</span></span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a>                    clipTarget<span class="op">.</span><span class="fu">SetClipRect</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a>                <span class="kw">foreach</span> <span class="op">(</span>MaskableGraphic maskableTarget <span class="kw">in</span> m_MaskableTargets<span class="op">)</span></span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a>                    maskableTarget<span class="op">.</span><span class="fu">SetClipRect</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>maskableTarget<span class="op">.</span><span class="fu">canvasRenderer</span><span class="op">.</span><span class="fu">hasMoved</span><span class="op">)</span></span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a>                        maskableTarget<span class="op">.</span><span class="fu">Cull</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a>                <span class="kw">foreach</span> <span class="op">(</span>MaskableGraphic maskableTarget <span class="kw">in</span> m_MaskableTargets<span class="op">)</span></span><span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>maskableTarget<span class="op">.</span><span class="fu">canvasRenderer</span><span class="op">.</span><span class="fu">hasMoved</span><span class="op">)</span></span><span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a>                        maskableTarget<span class="op">.</span><span class="fu">Cull</span><span class="op">(</span>clipRect<span class="op">,</span> validRect<span class="op">);</span></span><span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-83"><a href="#cb7-83" aria-hidden="true" tabindex="-1"></a>            m_LastClipRectCanvasSpace <span class="op">=</span> clipRect<span class="op">;</span></span><span id="cb7-84"><a href="#cb7-84" aria-hidden="true" tabindex="-1"></a>            m_ForceClip <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb7-85"><a href="#cb7-85" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="co">//向上遍历 获取符合条件的 RectMask2D</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> <span class="dt">void</span> <span class="fu">GetRectMasksForClip</span><span class="op">(</span>RectMask2D clipper<span class="op">,</span> List<span class="op">&lt;</span>RectMask2D<span class="op">&gt;</span> masks<span class="op">)</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>            masks<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>            List<span class="op">&lt;</span>Canvas<span class="op">&gt;</span> canvasComponents <span class="op">=</span> ListPool<span class="op">&lt;</span>Canvas<span class="op">&gt;.</span><span class="fu">Get</span><span class="op">();</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>            List<span class="op">&lt;</span>RectMask2D<span class="op">&gt;</span> rectMaskComponents <span class="op">=</span> ListPool<span class="op">&lt;</span>RectMask2D<span class="op">&gt;.</span><span class="fu">Get</span><span class="op">();</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>            clipper<span class="op">.</span><span class="fu">transform</span><span class="op">.</span><span class="fu">GetComponentsInParent</span><span class="op">(</span><span class="kw">false</span><span class="op">,</span> rectMaskComponents<span class="op">);</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>rectMaskComponents<span class="op">.</span><span class="fu">Count</span> <span class="op">&gt;</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>                clipper<span class="op">.</span><span class="fu">transform</span><span class="op">.</span><span class="fu">GetComponentsInParent</span><span class="op">(</span><span class="kw">false</span><span class="op">,</span> canvasComponents<span class="op">);</span></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>                <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> rectMaskComponents<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">;</span> i<span class="op">--)</span></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(!</span>rectMaskComponents<span class="op">[</span>i<span class="op">].</span><span class="fu">IsActive</span><span class="op">())</span></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">continue</span><span class="op">;</span></span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">bool</span> shouldAdd <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> j <span class="op">=</span> canvasComponents<span class="op">.</span><span class="fu">Count</span> <span class="op">-</span> <span class="dv">1</span><span class="op">;</span> j <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">;</span> j<span class="op">--)</span></span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(!</span><span class="fu">IsDescendantOrSelf</span><span class="op">(</span>canvasComponents<span class="op">[</span>j<span class="op">].</span><span class="fu">transform</span><span class="op">,</span> rectMaskComponents<span class="op">[</span>i<span class="op">].</span><span class="fu">transform</span><span class="op">)</span> <span class="op">&amp;&amp;</span> canvasComponents<span class="op">[</span>j<span class="op">].</span><span class="fu">overrideSorting</span><span class="op">)</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>                        <span class="op">{</span></span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>                            shouldAdd <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>                            <span class="kw">break</span><span class="op">;</span></span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>shouldAdd<span class="op">)</span></span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>                        masks<span class="op">.</span><span class="fu">Add</span><span class="op">(</span>rectMaskComponents<span class="op">[</span>i<span class="op">]);</span></span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>            ListPool<span class="op">&lt;</span>RectMask2D<span class="op">&gt;.</span><span class="fu">Release</span><span class="op">(</span>rectMaskComponents<span class="op">);</span></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>            ListPool<span class="op">&lt;</span>Canvas<span class="op">&gt;.</span><span class="fu">Release</span><span class="op">(</span>canvasComponents<span class="op">);</span></span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb9"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="co">// Cliping.cs</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="co">///返回最小区域的 Rect。 (xMin, yMin, Width, height)</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">static</span> Rect <span class="fu">FindCullAndClipWorldRect</span><span class="op">(</span>List<span class="op">&lt;</span>RectMask2D<span class="op">&gt;</span> rectMaskParents<span class="op">,</span> <span class="kw">out</span> <span class="dt">bool</span> validRect<span class="op">)</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>rectMaskParents<span class="op">.</span><span class="fu">Count</span> <span class="op">==</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>                validRect <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">new</span> <span class="fu">Rect</span><span class="op">();</span></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>            Rect current <span class="op">=</span> rectMaskParents<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">canvasRect</span><span class="op">;</span></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> xMin <span class="op">=</span> current<span class="op">.</span><span class="fu">xMin</span><span class="op">;</span></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> xMax <span class="op">=</span> current<span class="op">.</span><span class="fu">xMax</span><span class="op">;</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> yMin <span class="op">=</span> current<span class="op">.</span><span class="fu">yMin</span><span class="op">;</span></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> yMax <span class="op">=</span> current<span class="op">.</span><span class="fu">yMax</span><span class="op">;</span></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">1</span><span class="op">;</span> i <span class="op">&lt;</span> rectMaskParents<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>                current <span class="op">=</span> rectMaskParents<span class="op">[</span>i<span class="op">].</span><span class="fu">canvasRect</span><span class="op">;</span></span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>xMin <span class="op">&lt;</span> current<span class="op">.</span><span class="fu">xMin</span><span class="op">)</span></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>                    xMin <span class="op">=</span> current<span class="op">.</span><span class="fu">xMin</span><span class="op">;</span></span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>yMin <span class="op">&lt;</span> current<span class="op">.</span><span class="fu">yMin</span><span class="op">)</span></span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>                    yMin <span class="op">=</span> current<span class="op">.</span><span class="fu">yMin</span><span class="op">;</span></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>xMax <span class="op">&gt;</span> current<span class="op">.</span><span class="fu">xMax</span><span class="op">)</span></span><span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>                    xMax <span class="op">=</span> current<span class="op">.</span><span class="fu">xMax</span><span class="op">;</span></span><span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a>                <span class="kw">if</span> <span class="op">(</span>yMax <span class="op">&gt;</span> current<span class="op">.</span><span class="fu">yMax</span><span class="op">)</span></span><span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>                    yMax <span class="op">=</span> current<span class="op">.</span><span class="fu">yMax</span><span class="op">;</span></span><span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>            validRect <span class="op">=</span> xMax <span class="op">&gt;</span> xMin <span class="op">&amp;&amp;</span> yMax <span class="op">&gt;</span> yMin<span class="op">;</span></span><span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>validRect<span class="op">)</span></span><span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">new</span> <span class="fu">Rect</span><span class="op">(</span>xMin<span class="op">,</span> yMin<span class="op">,</span> xMax <span class="op">-</span> xMin<span class="op">,</span> yMax <span class="op">-</span> yMin<span class="op">);</span></span><span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">new</span> <span class="fu">Rect</span><span class="op">();</span></span><span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">internal</span> <span class="kw">class</span> RectangularVertexClipper</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">readonly</span> Vector3<span class="op">[]</span> m_WorldCorners <span class="op">=</span> <span class="kw">new</span> Vector3<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">readonly</span> Vector3<span class="op">[]</span> m_CanvasCorners <span class="op">=</span> <span class="kw">new</span> Vector3<span class="op">[</span><span class="dv">4</span><span class="op">];</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>       <span class="co">// 返回相对于Canvas 的Corner的Rect</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span> Rect <span class="fu">GetCanvasRect</span><span class="op">(</span>RectTransform t<span class="op">,</span> Canvas c<span class="op">)</span></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>c <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">new</span> <span class="fu">Rect</span><span class="op">();</span></span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>            t<span class="op">.</span><span class="fu">GetWorldCorners</span><span class="op">(</span>m_WorldCorners<span class="op">);</span></span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> canvasTransform <span class="op">=</span> c<span class="op">.</span><span class="fu">GetComponent</span><span class="op">&lt;</span>Transform<span class="op">&gt;();</span></span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">4</span><span class="op">;</span> <span class="op">++</span>i<span class="op">)</span></span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>                m_CanvasCorners<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> canvasTransform<span class="op">.</span><span class="fu">InverseTransformPoint</span><span class="op">(</span>m_WorldCorners<span class="op">[</span>i<span class="op">]);</span></span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">new</span> <span class="fu">Rect</span><span class="op">(</span>m_CanvasCorners<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">x</span><span class="op">,</span> m_CanvasCorners<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">y</span><span class="op">,</span> m_CanvasCorners<span class="op">[</span><span class="dv">2</span><span class="op">].</span><span class="fu">x</span> <span class="op">-</span> m_CanvasCorners<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">x</span><span class="op">,</span> m_CanvasCorners<span class="op">[</span><span class="dv">2</span><span class="op">].</span><span class="fu">y</span> <span class="op">-</span> m_CanvasCorners<span class="op">[</span><span class="dv">0</span><span class="op">].</span><span class="fu">y</span><span class="op">);</span></span><span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol><p>​</p><p>​</p><p>​</p><p>​</p><p>​</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/3.ugui-graphic/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/3.ugui-graphic/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui之graphic">uGUI之graphic</h2><blockquote><p>所有需要绘制的ui组件的抽象基类</p></blockquote><ol type="1"><li><p>Graphic</p><blockquote><p>继承自UIBehaviour、<code>ICanvesElement</code> ，可渲染的ui组件</p></blockquote><ol type="1"><li><p>ICanvasElement</p><blockquote><p>依赖Canves 的ui元素接口， 主要是<code>rebuild</code>接口标记</p></blockquote><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>      <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// Values of 'update' called on a Canvas update.</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">enum</span> CanvasUpdate</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called before layout.</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        Prelayout <span class="op">=</span> <span class="dv">0</span><span class="op">,</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called for layout.</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        Layout <span class="op">=</span> <span class="dv">1</span><span class="op">,</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called after layout.</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>        PostLayout <span class="op">=</span> <span class="dv">2</span><span class="op">,</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called before rendering.</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>        PreRender <span class="op">=</span> <span class="dv">3</span><span class="op">,</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called late, before render.</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        LatePreRender <span class="op">=</span> <span class="dv">4</span><span class="op">,</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Max enum value. Always last.</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        MaxUpdateValue <span class="op">=</span> <span class="dv">5</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>  <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// This is an element that can live on a Canvas.</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="kw">public</span> <span class="kw">interface</span> ICanvasElement</span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Rebuild the element for the given stage.</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;param</span><span class="ot"> name=</span><span class="dt">"executing"</span><span class="kw">&gt;</span><span class="co">The current CanvasUpdate stage being rebuild.</span><span class="kw">&lt;/param&gt;</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">Rebuild</span><span class="op">(</span>CanvasUpdate executing<span class="op">);</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Get the transform associated with the ICanvasElement.</span></span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        Transform transform <span class="op">{</span> <span class="kw">get</span><span class="op">;</span> <span class="op">}</span></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Callback sent when this ICanvasElement has completed layout.</span></span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">LayoutComplete</span><span class="op">();</span></span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Callback sent when this ICanvasElement has completed Graphic rebuild.</span></span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>        <span class="dt">void</span> <span class="fu">GraphicUpdateComplete</span><span class="op">();</span></span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Used if the native representation has been destroyed.</span></span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;returns&gt;</span><span class="co">Return true if the element is considered destroyed.</span><span class="kw">&lt;/returns&gt;</span></span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> <span class="fu">IsDestroyed</span><span class="op">();</span></span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>ICanvesElement 接口实现</p></li><li><p>Rebuild</p></li></ol><pre><code>  &gt; canvasRenderer ui渲染元素依赖组件的**render**组件  &gt;  &gt; 这里只对**渲染前**进行`顶点`和`材质`进行更新。  ```csharp         public virtual void Rebuild(CanvasUpdate update)          {              if (canvasRenderer == null || canvasRenderer.cull)                  return;              switch (update)              {                  case CanvasUpdate.PreRender:                      if (m_VertsDirty)                      {                          UpdateGeometry();                          m_VertsDirty = false;                      }                      if (m_MaterialDirty)                      {                          UpdateMaterial();                          m_MaterialDirty = false;                      }                      break;              }          }  ```</code></pre><ol start="2" type="1"><li>transform</li></ol><pre><code>   ​ transform 沿用基类 `Component` 的transform 属性</code></pre><ol start="3" type="1"><li>LayoutComponent</li></ol><pre><code>   ```csharp   //暂时为空          public virtual void LayoutComplete()   {}   ```</code></pre><ol start="4" type="1"><li><p>GraphicUpdateComplete</p><div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">//暂时为空       </span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">GraphicUpdateComplete</span><span class="op">()</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="op">{}</span></span></code></pre></div></li><li><p>IsDestroyed</p><p>IsDestroyed 沿用 UIBehaviour 的IsDestroyed 属性</p></li><li><p>新增和实现</p><blockquote><p>作为需要渲染的控件， 必须有 <code>Render</code>、渲染的数据<code>顶点数据</code> 、<code>材质数据</code></p></blockquote><ol type="1"><li><p>理论部分</p></li><li><p>Render 使用 <code>CanvasRenderer</code></p></li><li><p>材质以及材质属性</p></li><li><p>代码部分</p><ol type="1"><li>材质以及材质属性静态公共数据 &gt;s_WhiteTexture静态默认贴图属性作为共享的默认贴图，OnEnable 进行赋值</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">static</span> <span class="kw">protected</span> Texture2D s_WhiteTexture <span class="op">=</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="co">// 贴图赋值</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="kw">protected</span> <span class="kw">override</span> <span class="dt">void</span> <span class="fu">OnEnable</span><span class="op">()</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 。。。</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="kw">if</span> <span class="op">(</span>s_WhiteTexture <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        s_WhiteTexture <span class="op">=</span> Texture2D<span class="op">.</span><span class="fu">whiteTexture</span><span class="op">;</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 。。。</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><blockquote><p>s_DefaultUI静态默认材质属性作为共享的默认贴图，Get进行单例赋值</p><div class="sourceCode" id="cb7"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">static</span> <span class="kw">public</span> Material defaultGraphicMaterial</span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>get</span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="kw">if</span> <span class="op">(</span>s_DefaultUI <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>s_DefaultUI <span class="op">=</span> Canvas<span class="op">.</span><span class="fu">GetDefaultCanvasMaterial</span><span class="op">();</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="kw">return</span> s_DefaultUI<span class="op">;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>s_VertexHelper 顶点辅助器</p><div class="sourceCode" id="cb8"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="op">[</span>NonSerialized<span class="op">]</span> <span class="kw">private</span> <span class="kw">static</span> <span class="kw">readonly</span> VertexHelper s_VertexHelper <span class="op">=</span> <span class="kw">new</span> <span class="fu">VertexHelper</span><span class="op">();</span></span></code></pre></div></blockquote><ol start="2" type="1"><li><p>渲染控制相关</p></li><li><p>材质以及材质属性</p></li></ol><pre><code>  ```csharp  //材质对象  [FormerlySerializedAs("m_Mat")]  [SerializeField] protected Material m_Material;    //材质属性 颜色  [SerializeField] private Color m_Color = Color.white;  ```</code></pre><ol start="2" type="1"><li><p>顶点、Mesh (辅助顶点mesh类 <code>VertexHelper</code>)</p><blockquote><p>Rebuild调用<code>UpdateGeometry</code> 进行顶点、Mesh计算，顶点效果<code>IMeshModifier</code>回调触发</p><p>在 <code>OnPopulateMesh</code> 中进行顶点属性处理，简单的顶点和includies, 以及 uv</p></blockquote><div class="sourceCode" id="cb10"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Rebuild</span><span class="op">(</span>CanvasUpdate update<span class="op">)</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>          <span class="co">///...</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>              <span class="fu">UpdateGeometry</span><span class="op">();</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>                 m_VertsDirty <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>              <span class="co">///...</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span> </span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a><span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Call to update the geometry of the Graphic onto the CanvasRenderer.</span></span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">UpdateGeometry</span><span class="op">()</span></span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>useLegacyMeshGeneration<span class="op">)</span></span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>                <span class="fu">DoLegacyMeshGeneration</span><span class="op">();</span></span><span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>                <span class="fu">DoMeshGeneration</span><span class="op">();</span></span><span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span> <span class="dt">void</span> <span class="fu">DoMeshGeneration</span><span class="op">()</span></span><span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>rectTransform <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> rectTransform<span class="op">.</span><span class="fu">rect</span><span class="op">.</span><span class="fu">width</span> <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> rectTransform<span class="op">.</span><span class="fu">rect</span><span class="op">.</span><span class="fu">height</span> <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>                <span class="fu">OnPopulateMesh</span><span class="op">(</span>s_VertexHelper<span class="op">);</span></span><span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>                s_VertexHelper<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span> <span class="co">// clear the vertex helper so invalid graphics dont draw.</span></span><span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> components <span class="op">=</span> ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Get</span><span class="op">();</span></span><span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>            <span class="fu">GetComponents</span><span class="op">(</span><span class="kw">typeof</span><span class="op">(</span>IMeshModifier<span class="op">),</span> components<span class="op">);</span></span><span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> components<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>                <span class="op">((</span>IMeshModifier<span class="op">)</span>components<span class="op">[</span>i<span class="op">]).</span><span class="fu">ModifyMesh</span><span class="op">(</span>s_VertexHelper<span class="op">);</span></span><span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-38"><a href="#cb10-38" aria-hidden="true" tabindex="-1"></a>            ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Release</span><span class="op">(</span>components<span class="op">);</span></span><span id="cb10-39"><a href="#cb10-39" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-40"><a href="#cb10-40" aria-hidden="true" tabindex="-1"></a>            s_VertexHelper<span class="op">.</span><span class="fu">FillMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span><span id="cb10-41"><a href="#cb10-41" aria-hidden="true" tabindex="-1"></a>            canvasRenderer<span class="op">.</span><span class="fu">SetMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span><span id="cb10-42"><a href="#cb10-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb10-43"><a href="#cb10-43" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-44"><a href="#cb10-44" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span> <span class="dt">void</span> <span class="fu">DoLegacyMeshGeneration</span><span class="op">()</span></span><span id="cb10-45"><a href="#cb10-45" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-46"><a href="#cb10-46" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(</span>rectTransform <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> rectTransform<span class="op">.</span><span class="fu">rect</span><span class="op">.</span><span class="fu">width</span> <span class="op">&gt;=</span> <span class="dv">0</span> <span class="op">&amp;&amp;</span> rectTransform<span class="op">.</span><span class="fu">rect</span><span class="op">.</span><span class="fu">height</span> <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb10-47"><a href="#cb10-47" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-48"><a href="#cb10-48" aria-hidden="true" tabindex="-1"></a>#pragma warning disable <span class="dv">618</span></span><span id="cb10-49"><a href="#cb10-49" aria-hidden="true" tabindex="-1"></a>                <span class="fu">OnPopulateMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span><span id="cb10-50"><a href="#cb10-50" aria-hidden="true" tabindex="-1"></a>#pragma warning restore <span class="dv">618</span></span><span id="cb10-51"><a href="#cb10-51" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-52"><a href="#cb10-52" aria-hidden="true" tabindex="-1"></a>            <span class="kw">else</span></span><span id="cb10-53"><a href="#cb10-53" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-54"><a href="#cb10-54" aria-hidden="true" tabindex="-1"></a>                workerMesh<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb10-55"><a href="#cb10-55" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-56"><a href="#cb10-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-57"><a href="#cb10-57" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> components <span class="op">=</span> ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Get</span><span class="op">();</span></span><span id="cb10-58"><a href="#cb10-58" aria-hidden="true" tabindex="-1"></a>            <span class="fu">GetComponents</span><span class="op">(</span><span class="kw">typeof</span><span class="op">(</span>IMeshModifier<span class="op">),</span> components<span class="op">);</span></span><span id="cb10-59"><a href="#cb10-59" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-60"><a href="#cb10-60" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> components<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb10-61"><a href="#cb10-61" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-62"><a href="#cb10-62" aria-hidden="true" tabindex="-1"></a>#pragma warning disable <span class="dv">618</span></span><span id="cb10-63"><a href="#cb10-63" aria-hidden="true" tabindex="-1"></a>                <span class="op">((</span>IMeshModifier<span class="op">)</span>components<span class="op">[</span>i<span class="op">]).</span><span class="fu">ModifyMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span><span id="cb10-64"><a href="#cb10-64" aria-hidden="true" tabindex="-1"></a>#pragma warning restore <span class="dv">618</span></span><span id="cb10-65"><a href="#cb10-65" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-66"><a href="#cb10-66" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-67"><a href="#cb10-67" aria-hidden="true" tabindex="-1"></a>            ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Release</span><span class="op">(</span>components<span class="op">);</span></span><span id="cb10-68"><a href="#cb10-68" aria-hidden="true" tabindex="-1"></a>            canvasRenderer<span class="op">.</span><span class="fu">SetMesh</span><span class="op">(</span>workerMesh<span class="op">);</span></span><span id="cb10-69"><a href="#cb10-69" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb10-70"><a href="#cb10-70" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-71"><a href="#cb10-71" aria-hidden="true" tabindex="-1"></a>     <span class="co">// 提供虚函数，改变顶点属性</span></span><span id="cb10-72"><a href="#cb10-72" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnPopulateMesh</span><span class="op">(</span>VertexHelper vh<span class="op">)</span></span><span id="cb10-73"><a href="#cb10-73" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-74"><a href="#cb10-74" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> r <span class="op">=</span> <span class="fu">GetPixelAdjustedRect</span><span class="op">();</span></span><span id="cb10-75"><a href="#cb10-75" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> v <span class="op">=</span> <span class="kw">new</span> <span class="fu">Vector4</span><span class="op">(</span>r<span class="op">.</span><span class="fu">x</span><span class="op">,</span> r<span class="op">.</span><span class="fu">y</span><span class="op">,</span> r<span class="op">.</span><span class="fu">x</span> <span class="op">+</span> r<span class="op">.</span><span class="fu">width</span><span class="op">,</span> r<span class="op">.</span><span class="fu">y</span> <span class="op">+</span> r<span class="op">.</span><span class="fu">height</span><span class="op">);</span></span><span id="cb10-76"><a href="#cb10-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-77"><a href="#cb10-77" aria-hidden="true" tabindex="-1"></a>            Color32 color32 <span class="op">=</span> color<span class="op">;</span></span><span id="cb10-78"><a href="#cb10-78" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">Clear</span><span class="op">();</span></span><span id="cb10-79"><a href="#cb10-79" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">AddVert</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>v<span class="op">.</span><span class="fu">x</span><span class="op">,</span> v<span class="op">.</span><span class="fu">y</span><span class="op">),</span> color32<span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>0f<span class="op">,</span> 0f<span class="op">));</span></span><span id="cb10-80"><a href="#cb10-80" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">AddVert</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>v<span class="op">.</span><span class="fu">x</span><span class="op">,</span> v<span class="op">.</span><span class="fu">w</span><span class="op">),</span> color32<span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>0f<span class="op">,</span> 1f<span class="op">));</span></span><span id="cb10-81"><a href="#cb10-81" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">AddVert</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>v<span class="op">.</span><span class="fu">z</span><span class="op">,</span> v<span class="op">.</span><span class="fu">w</span><span class="op">),</span> color32<span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>1f<span class="op">,</span> 1f<span class="op">));</span></span><span id="cb10-82"><a href="#cb10-82" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">AddVert</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector3</span><span class="op">(</span>v<span class="op">.</span><span class="fu">z</span><span class="op">,</span> v<span class="op">.</span><span class="fu">y</span><span class="op">),</span> color32<span class="op">,</span> <span class="kw">new</span> <span class="fu">Vector2</span><span class="op">(</span>1f<span class="op">,</span> 0f<span class="op">));</span></span><span id="cb10-83"><a href="#cb10-83" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-84"><a href="#cb10-84" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">AddTriangle</span><span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">);</span></span><span id="cb10-85"><a href="#cb10-85" aria-hidden="true" tabindex="-1"></a>            vh<span class="op">.</span><span class="fu">AddTriangle</span><span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb10-86"><a href="#cb10-86" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>设置Render的贴图和材质属性</p><div class="sourceCode" id="cb11"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">UpdateMaterial</span><span class="op">()</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span><span class="fu">IsActive</span><span class="op">())</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span><span class="op">;</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>            canvasRenderer<span class="op">.</span><span class="fu">materialCount</span> <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>            canvasRenderer<span class="op">.</span><span class="fu">SetMaterial</span><span class="op">(</span>materialForRendering<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>            canvasRenderer<span class="op">.</span><span class="fu">SetTexture</span><span class="op">(</span>mainTexture<span class="op">);</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>Rebuild</p></li></ol><pre><code>  1. GraphicRegistry 按顺序注册缓存     &gt; 储存渲染元素， 以`Canvas`为Key，IndexedSet&lt;Graphic&gt; 为value 的字典     &gt;     &gt; 这个Canvas 是父节点遍历的第一个Canvas     ```csharp     private readonly Dictionary&lt;Canvas, IndexedSet&lt;Graphic&gt;&gt; m_Graphics = new Dictionary&lt;Canvas, IndexedSet&lt;Graphic&gt;&gt;();     ```     1. 注册 GraphicRegistry.RegisterGraphicForCanvas， 静态方法内部处理使用 内部静态对象 s_Instance        &gt; 按顺序添加到 Canvas 对应的Graphic 列表中        1. void RegisterGraphicForCanvas(Canvas c, Graphic graphic)     2. GetGraphicsForCanvas(Canvas c)        &gt; 或者对应的Canvas 的Graphic 的元素列表  2. CanvasUpdateRegistry     &gt; 分为两大类 ：     &gt;     &gt; 1. IndexedSet&lt;ICanvasElement&gt; m_LayoutRebuildQueue     &gt;     &gt; 2. IndexedSet&lt;ICanvasElement&gt; m_GraphicRebuildQueue      &gt;     &gt;    主要提供注册和移除接口， 内部处理使用 Canvas.willRenderCanvases += PerformUpdate; 回调处理     &gt;     &gt;    ~~，因此流程时序很重要~~。     1. RegisterCanvasElementForGraphicRebuild      2. RegisterCanvasElementForLayoutRebuild     3. UnRegisterCanvasElementForRebuild, 移除layout和graphic队列     4. PerformUpdate        &gt; 主要步骤如下：        ```csharp        public enum CanvasUpdate            {                /// &lt;summary&gt;                /// Called before layout.                /// &lt;/summary&gt;                Prelayout = 0,                /// &lt;summary&gt;                /// Called for layout.                /// &lt;/summary&gt;                Layout = 1,                /// &lt;summary&gt;                /// Called after layout.                /// &lt;/summary&gt;                PostLayout = 2,                /// &lt;summary&gt;                /// Called before rendering.                /// &lt;/summary&gt;                PreRender = 3,                /// &lt;summary&gt;                /// Called late, before render.                /// &lt;/summary&gt;                LatePreRender = 4,                /// &lt;summary&gt;                /// Max enum value. Always last.                /// &lt;/summary&gt;                MaxUpdateValue = 5            }        ```        验证非null的UnityObject        ```csharp         private bool ObjectValidForUpdate(ICanvasElement element)                {                    var valid = element != null;                    var isUnityObject = element is Object;                    if (isUnityObject)                        valid = (element as Object) != null; //Here we make use of the overloaded UnityEngine.Object == null, that checks if the native object is alive.                    return valid;                }        ```        1. CleanInvalidItems 移除量大队列的null 元素和标记为销毁的元素， **标记销毁是因为引擎设计销毁操作在下一帧的缘故**        2.  layout队列 根据transform层级排序(父节点数作为的层级)。进行两次迭代验证非null的UnityObject并 执行 Rebuild回调的 Prelayout， 和Rebuild回调的 Layout. 最后遍历回调 LayoutComplete。 清理Layout 临时引用。           ```csharp           m_PerformingLayoutUpdate = true;           m_LayoutRebuildQueue.Sort(s_SortLayoutFunction);           ```                               ```csharp                   private static int ParentCount(Transform child)                   {                       if (child == null)                           return 0;                       var parent = child.parent;                       int count = 0;                       while (parent != null)                       {                           count++;                           parent = parent.parent;                       }                       return count;                   }           ```           ```csharp                 private bool ObjectValidForUpdate(ICanvasElement element)                   {                       var valid = element != null;                       var isUnityObject = element is Object;                       if (isUnityObject)                           valid = (element as Object) != null; //Here we make use of the overloaded UnityEngine.Object == null, that checks if the native object is alive.                       return valid;                   }           ```           ```csharp            m_LayoutRebuildQueue.Sort(s_SortLayoutFunction);                       for (int i = 0; i &lt;= (int)CanvasUpdate.PostLayout; i++)                       {                           for (int j = 0; j &lt; m_LayoutRebuildQueue.Count; j++)                           {                               var rebuild = instance.m_LayoutRebuildQueue[j];                               try                               {                                   if (ObjectValidForUpdate(rebuild))                                       rebuild.Rebuild((CanvasUpdate)i);                               }                               catch (Exception e)                               {                                   Debug.LogException(e, rebuild.transform);                               }                           }                       }           ```           ```csharp           for (int i = 0; i &lt; m_LayoutRebuildQueue.Count; ++i)                m_LayoutRebuildQueue[i].LayoutComplete();           ```           ```csharp           instance.m_LayoutRebuildQueue.Clear();           m_PerformingLayoutUpdate = false;           ```        3.  执行 Cull           ```csharp           // now layout is complete do culling...           ClipperRegistry.instance.Cull();           ```        4. Graphic队列 ,进行两次迭代验证非null的UnityObject并 执行 Rebuild回调的 PreRender， 和Rebuild回调的 LatePreRender. 最后遍历回调 GraphicUpdateComplete。 清理Graphic临时引用。           ```csharp           m_PerformingGraphicUpdate = true;                       for (var i = (int)CanvasUpdate.PreRender; i &lt; (int)CanvasUpdate.MaxUpdateValue; i++)                       {                           for (var k = 0; k &lt; instance.m_GraphicRebuildQueue.Count; k++)                           {                               try                               {                                   var element = instance.m_GraphicRebuildQueue[k];                                   if (ObjectValidForUpdate(element))                                       element.Rebuild((CanvasUpdate)i);                               }                               catch (Exception e)                               {                                   Debug.LogException(e, instance.m_GraphicRebuildQueue[k].transform);                               }                           }                       }           ```           ```csharp           for (int i = 0; i &lt; m_GraphicRebuildQueue.Count; ++i)                           m_GraphicRebuildQueue[i].GraphicUpdateComplete();           ```           ```csharp           instance.m_GraphicRebuildQueue.Clear();            m_PerformingGraphicUpdate = false;           ```  3. LayoutRebuilder， Layout集中的 Rebuild处理     &gt; CanvasElement 包装器，专门处理Layout的rebuild，     &gt;     &gt; 主要接口 `MarkLayoutForRebuild`, 这个包装只处理包含并激活ILayoutGroup的RectTransform     &gt;     &gt; 最后调用 `TryRegisterCanvasElementForLayoutRebuild` 处理     1. 被触发的方法        ```csharp        protected override void OnBeforeTransformParentChanged()        {           GraphicRegistry.UnregisterGraphicForCanvas(canvas, this);            LayoutRebuilder.MarkLayoutForRebuild(rectTransform);        }        ```        ```csharp        public virtual void SetLayoutDirty()        {           if (!IsActive())               return;           LayoutRebuilder.MarkLayoutForRebuild(rectTransform);           if (m_OnDirtyLayoutCallback != null)               m_OnDirtyLayoutCallback();        }        ```        ```csharp           protected override void OnDisable()           {               //。。。               LayoutRebuilder.MarkLayoutForRebuild(rectTransform);               //。。。           }        ```     2. 注册的回调事件        ```csharp        static LayoutRebuilder()        {           RectTransform.reapplyDrivenProperties += ReapplyDrivenProperties;        }        //...        static void ReapplyDrivenProperties(RectTransform driven)        {           MarkLayoutForRebuild(driven);        }        ```     3.  MarkLayoutForRebuild 实现细节        ```csharp        public static void MarkLayoutForRebuild(RectTransform rect)        {           if (rect == null || rect.gameObject == null)               return;           var comps = ListPool&lt;Component&gt;.Get();            bool validLayoutGroup = true;            RectTransform layoutRoot = rect;            var parent = layoutRoot.parent as RectTransform;            //如果父节点含有 ILayoutGroup， 则 layoutRoot = parent,            //parent = parent'parent            while (validLayoutGroup &amp;&amp; !(parent == null || parent.gameObject == null))            {               validLayoutGroup = false;               parent.GetComponents(typeof(ILayoutGroup), comps);                for (int i = 0; i &lt; comps.Count; ++i)                {                     var cur = comps[i];                     if (cur != null &amp;&amp; cur is Behaviour &amp;&amp; ((Behaviour)cur).isActiveAndEnabled)                     {                          validLayoutGroup = true;                          layoutRoot = parent;                          break;                      }                   }                   parent = parent.parent as RectTransform;            }                    // We know the layout root is valid if it's not the same as the rect,                    // since we checked that above. But if they're the same we still need to check.            //1. 不含有 ILayoutGroup组件的情况， 或者ILayoutGroup没有激活的情况           if (layoutRoot == rect &amp;&amp; !ValidController(layoutRoot, comps))            {               ListPool&lt;Component&gt;.Release(comps);                return;             }            //2. 包含 ILayoutGroup且控件激活             MarkLayoutRootForRebuild(layoutRoot);             ListPool&lt;Component&gt;.Release(comps);        }        ```        ```csharp           private static void MarkLayoutRootForRebuild(RectTransform controller)                {                    if (controller == null)                        return;                    var rebuilder = s_Rebuilders.Get();                    rebuilder.Initialize(controller);                    if (!CanvasUpdateRegistry.TryRegisterCanvasElementForLayoutRebuild(rebuilder))                        s_Rebuilders.Release(rebuilder);                }        ```     4. 设置回调， 对应设置徐然数据改变最后的回调方法        1. RegisterDirtyLayoutCallback        2. UnregisterDirtyLayoutCallback        3. RegisterDirtyVerticesCallback        4. UnregisterDirtyVerticesCallback        5. RegisterDirtyMaterialCallback        6. UnregisterDirtyMaterialCallback  4. ~~GraphicRebuildTracker.TrackGraphic~~(this);</code></pre><ol start="3" type="1"><li>物理以及事件</li></ol><blockquote><p>Raycast、</p></blockquote><ol type="1"><li><p>m_RaycastTarget，启动input事件检测</p></li><li><p>Raycast 方法，用于事件监测，<code>Canvas ，eventsystem</code></p><div class="sourceCode" id="cb13"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">bool</span> <span class="fu">Raycast</span><span class="op">(</span>Vector2 sp<span class="op">,</span> Camera eventCamera<span class="op">)</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>            <span class="kw">if</span> <span class="op">(!</span>isActiveAndEnabled<span class="op">)</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>                <span class="kw">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> t <span class="op">=</span> transform<span class="op">;</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>            <span class="dt">var</span> components <span class="op">=</span> ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Get</span><span class="op">();</span></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>            <span class="dt">bool</span> ignoreParentGroups <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>            <span class="dt">bool</span> continueTraversal <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">while</span> <span class="op">(</span>t <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>                t<span class="op">.</span><span class="fu">GetComponents</span><span class="op">(</span>components<span class="op">);</span></span><span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a>                <span class="kw">for</span> <span class="op">(</span><span class="dt">var</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> components<span class="op">.</span><span class="fu">Count</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>                <span class="op">{</span></span><span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> canvas <span class="op">=</span> components<span class="op">[</span>i<span class="op">]</span> <span class="kw">as</span> Canvas<span class="op">;</span></span><span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>canvas <span class="op">!=</span> <span class="kw">null</span> <span class="op">&amp;&amp;</span> canvas<span class="op">.</span><span class="fu">overrideSorting</span><span class="op">)</span></span><span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>                        continueTraversal <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> filter <span class="op">=</span> components<span class="op">[</span>i<span class="op">]</span> <span class="kw">as</span> ICanvasRaycastFilter<span class="op">;</span></span><span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>filter <span class="op">==</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">continue</span><span class="op">;</span></span><span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> raycastValid <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a>                    <span class="dt">var</span> group <span class="op">=</span> components<span class="op">[</span>i<span class="op">]</span> <span class="kw">as</span> CanvasGroup<span class="op">;</span></span><span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(</span>group <span class="op">!=</span> <span class="kw">null</span><span class="op">)</span></span><span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">if</span> <span class="op">(</span>ignoreParentGroups <span class="op">==</span> <span class="kw">false</span> <span class="op">&amp;&amp;</span> group<span class="op">.</span><span class="fu">ignoreParentGroups</span><span class="op">)</span></span><span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>                        <span class="op">{</span></span><span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a>                            ignoreParentGroups <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>                            raycastValid <span class="op">=</span> filter<span class="op">.</span><span class="fu">IsRaycastLocationValid</span><span class="op">(</span>sp<span class="op">,</span> eventCamera<span class="op">);</span></span><span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>                        <span class="op">}</span></span><span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">else</span> <span class="kw">if</span> <span class="op">(!</span>ignoreParentGroups<span class="op">)</span></span><span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>                            raycastValid <span class="op">=</span> filter<span class="op">.</span><span class="fu">IsRaycastLocationValid</span><span class="op">(</span>sp<span class="op">,</span> eventCamera<span class="op">);</span></span><span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">else</span></span><span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>                        raycastValid <span class="op">=</span> filter<span class="op">.</span><span class="fu">IsRaycastLocationValid</span><span class="op">(</span>sp<span class="op">,</span> eventCamera<span class="op">);</span></span><span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a>                    <span class="kw">if</span> <span class="op">(!</span>raycastValid<span class="op">)</span></span><span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a>                    <span class="op">{</span></span><span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>                        ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Release</span><span class="op">(</span>components<span class="op">);</span></span><span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>                        <span class="kw">return</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>                    <span class="op">}</span></span><span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>                <span class="op">}</span></span><span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>                t <span class="op">=</span> continueTraversal <span class="op">?</span> t<span class="op">.</span><span class="fu">parent</span> <span class="op">:</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a>            ListPool<span class="op">&lt;</span>Component<span class="op">&gt;.</span><span class="fu">Release</span><span class="op">(</span>components<span class="op">);</span></span><span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>基础Tween动画</p><ol type="1"><li>CrossFadeColor、</li><li>CrossFadeColor、</li><li>CreateColorFromAlpha、</li><li>CrossFadeAlpha</li></ol></li><li><p>相对坐标像素计算</p><ol type="1"><li>PixelAdjustPoint、</li><li>GetPixelAdjustedRect</li></ol></li><li><p><a href="">辅助类 Pool, IndexedSet</a></p></li></ol></li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/2.ugui-ji-cheng-jie-gou/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/2.ugui-ji-cheng-jie-gou/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui之继承结构">uGUI之继承结构</h2><ol type="1"><li><p>UIBehaviour</p><blockquote><p>继承自MonoBehaviour ，代表ui 组件（区分渲染的ui组件）</p></blockquote><ol type="1"><li>组件流程方法</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>      <span class="co">//流程方法</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Awake</span><span class="op">()</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnEnable</span><span class="op">()</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Start</span><span class="op">()</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnDisable</span><span class="op">()</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnDestroy</span><span class="op">()</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span></code></pre></div><ol start="2" type="1"><li><p>ui 组件结构变动回调函数</p><div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>      <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnRectTransformDimensionsChange</span><span class="op">()</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnBeforeTransformParentChanged</span><span class="op">()</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnTransformParentChanged</span><span class="op">()</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnDidApplyAnimationProperties</span><span class="op">()</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnCanvasGroupChanged</span><span class="op">()</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called when the state of the parent Canvas is changed.</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnCanvasHierarchyChanged</span><span class="op">()</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span></code></pre></div></li><li><p>添加 IsActive 方法</p></li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>      <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Returns true if the GameObject and the Component are active. </span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// isActiveAndEnabled 变量存在于 Behaviour中，组件都有的两个变量，命名规则 isxx 都是只读变量 </span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// 1. enabled  2. isActiveAndEnabled</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">bool</span> <span class="fu">IsActive</span><span class="op">()</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> isActiveAndEnabled<span class="op">;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div><ol start="4" type="1"><li><p>添加 IsDestory 方法（todo）</p><div class="sourceCode" id="cb4"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Returns true if the native representation of the behaviour has been destroyed.</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;remarks&gt;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// When a parent canvas is either enabled, disabled or a nested canvas's OverrideSorting is changed this function is called. You can for example use this to modify objects below a canvas that may depend on a parent canvas - for example, if a canvas is disabled you may want to halt some processing of a UI element.</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/remarks&gt;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span> <span class="dt">bool</span> <span class="fu">IsDestroyed</span><span class="op">()</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Workaround for Unity native side of the object</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>            <span class="co">// having been destroyed but accessing via interface</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">// won't call the overloaded ==</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">this</span> <span class="op">==</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span></code></pre></div></li><li><p>完整代码</p></li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="kw">abstract</span> <span class="kw">class</span> UIBehaviour <span class="op">:</span> MonoBehaviour</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">//流程方法</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Awake</span><span class="op">()</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnEnable</span><span class="op">()</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Start</span><span class="op">()</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnDisable</span><span class="op">()</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnDestroy</span><span class="op">()</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Returns true if the GameObject and the Component are active. </span></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// isActiveAndEnabled 变量存在于 Behaviour中，组件都有的两个变量，命名规则 isxx 都是只读变量 </span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// 1. enabled  2. isActiveAndEnabled</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span> <span class="kw">virtual</span> <span class="dt">bool</span> <span class="fu">IsActive</span><span class="op">()</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> isActiveAndEnabled<span class="op">;</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a><span class="kw">#if</span> UNITY_EDITOR</span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnValidate</span><span class="op">()</span></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">Reset</span><span class="op">()</span></span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="kw">#endif</span></span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// This callback is called if an associated RectTransform has its dimensions changed. The call is also made to all child rect transforms, even if the child transform itself doesn't change - as it could have, depending on its anchoring.</span></span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnRectTransformDimensionsChange</span><span class="op">()</span></span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnBeforeTransformParentChanged</span><span class="op">()</span></span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnTransformParentChanged</span><span class="op">()</span></span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnDidApplyAnimationProperties</span><span class="op">()</span></span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnCanvasGroupChanged</span><span class="op">()</span></span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Called when the state of the parent Canvas is changed.</span></span><span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a>        <span class="kw">protected</span> <span class="kw">virtual</span> <span class="dt">void</span> <span class="fu">OnCanvasHierarchyChanged</span><span class="op">()</span></span><span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a>        <span class="op">{}</span></span><span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;summary&gt;</span></span><span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// Returns true if the native representation of the behaviour has been destroyed.</span></span><span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/summary&gt;</span></span><span id="cb5-63"><a href="#cb5-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;remarks&gt;</span></span><span id="cb5-64"><a href="#cb5-64" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// When a parent canvas is either enabled, disabled or a nested canvas's OverrideSorting is changed this function is called. You can for example use this to modify objects below a canvas that may depend on a parent canvas - for example, if a canvas is disabled you may want to halt some processing of a UI element.</span></span><span id="cb5-65"><a href="#cb5-65" aria-hidden="true" tabindex="-1"></a>        <span class="co">/// </span><span class="kw">&lt;/remarks&gt;</span></span><span id="cb5-66"><a href="#cb5-66" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span> <span class="dt">bool</span> <span class="fu">IsDestroyed</span><span class="op">()</span></span><span id="cb5-67"><a href="#cb5-67" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-68"><a href="#cb5-68" aria-hidden="true" tabindex="-1"></a>            <span class="co">// Workaround for Unity native side of the object</span></span><span id="cb5-69"><a href="#cb5-69" aria-hidden="true" tabindex="-1"></a>            <span class="co">// having been destroyed but accessing via interface</span></span><span id="cb5-70"><a href="#cb5-70" aria-hidden="true" tabindex="-1"></a>            <span class="co">// won't call the overloaded ==</span></span><span id="cb5-71"><a href="#cb5-71" aria-hidden="true" tabindex="-1"></a>            <span class="kw">return</span> <span class="kw">this</span> <span class="op">==</span> <span class="kw">null</span><span class="op">;</span></span><span id="cb5-72"><a href="#cb5-72" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-73"><a href="#cb5-73" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/ugui-yuan-ma-ji-lu/1.ugui-yuan-ma-ban-ben/"/>
      <url>/2022/08/10/unity/ugui-yuan-ma-ji-lu/1.ugui-yuan-ma-ban-ben/</url>
      
        <content type="html"><![CDATA[<h2 id="ugui版本说明">uGUI版本说明</h2><blockquote><p>https://github.com/one2world/Graphics, 主要分析<code>UnityEngine.UI</code> 运行时</p></blockquote><ol type="1"><li>整体框架<ol type="1"><li>UnityEditor.UI 编辑器gui<ol start="2" type="1"><li>UnityEngine.UI 运行时gui</li><li>UnityEngine.UI-Editor 编辑器样式功能等gui</li></ol></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/9.you-hua-tu-xing-xing-neng/"/>
      <url>/2022/08/10/unity/shader/9.you-hua-tu-xing-xing-neng/</url>
      
        <content type="html"><![CDATA[<h1 id="优化图形性能">优化图形性能</h1><blockquote><p>阴影投射物??</p></blockquote><h2 id="绘制调用批处理">绘制调用批处理</h2><p>要在屏幕上绘制游戏对象，引擎必须向图形 API（例如 OpenGL 或Direct3D）<code>发出绘制调用</code>。绘制调用通常为<code>资源密集型操作</code>，图形API 为每次绘制调用执行大量工作，从而导致 <strong>CPU端的性能开销</strong>。此开销的主要原因是绘制调用之间的状态变化（例如切换到不同材质），而这种情况会导致图形驱动程序中执行资源密集型验证和转换步骤。</p><ul><li>动态批处理：对于足够小的网格，此方法会在 CPU上转换网格的顶点，将许多<strong>相似顶点</strong><code>组合在一起</code>，并一次性绘制它们。</li><li>静态批处理：<strong>将静态（不移动</strong>游戏对象<code>组合成大网格</code>，并以较快的速度渲染它们。</li></ul><p>与手动合并游戏对象相比，内置批处理有几个好处；最值得注意的是，仍然可以单独剔除游戏对象。但是，也有一些缺点；<strong>静态批处理会导致内存和存储开销，动态批处理会产生一些CPU 开销</strong>。</p><h3 id="批处理的材质设置">批处理的材质设置</h3><p><strong>只有共享相同材质的游戏对象才可一起接受批处理</strong>。因此，如果想要实现良好批处理，应在尽可能多的不同游戏对象之间共享材质。</p><ul><li><p>如果两种相同材质仅在纹理上不同，<code>可将这些纹理组合成单个大纹理</code>。此过程通常称为纹理镶嵌（纹理图集Textureatlases）。一旦纹理位于相同图集中，即可使用单个材质。</p></li><li><p>如果需要从脚本访问共享材质属性，必须注意，修改 Renderer.material<code>将创建该材质的副本</code>。<strong>应改用 Renderer.sharedMaterial来保留共享的材质</strong>。</p></li><li><p>阴影投射物即使材质不同，通常也可以在渲染时接受批处理。Unity中的阴影投射物即使具有不同材质也可以使用动态批处理，只要阴影 pass所需材质中的值相同即可。例如，许多板条箱可能使用具有不同纹理的材质，但是由于渲染纹理的阴影投射物不相关，所以在此情况下，它们可以一起接受批处理。</p></li></ul><h3 id="动态批处理网格">动态批处理（网格）</h3><p>如果移动的游戏对象共享相同材质并满足其他条件，则 Unity可自动在同一绘制调用中批处理这些游戏对象。动态批处理是自动完成的，无需您进行任何额外工作。</p><ul><li>批处理动态游戏对象在每个顶点都有一定开销，因此批处理仅会应用于总共包含<strong>不超过900 个顶点属性</strong>且<strong>不超过 300 个顶点</strong>的网格。<ul><li>如果着色器使用顶点位置、法线和单个 UV，最多可以批处理 300个顶点，而如果着色器使用顶点位置、法线、UV0、UV1 和切线，则只能批处理180 个顶点。</li><li><strong>注意</strong>：将来可能会更改属性数量限制。</li></ul></li><li>如果游戏对象在变换中包含镜像，则不会对这些对象进行批处理（<strong>例如，具有+1 缩放的游戏对象 A 和具有 –1 缩放的游戏对象 B无法一起接受批处理</strong>）。</li><li>即使游戏对象基本相同，使用不同的材质实例也会导致游戏对象不能一起接受批处理。<strong>例外情况是阴影投射物渲染</strong>。</li><li>带有光照贴图的游戏对象具有其他渲染器参数：光照贴图索引和光照贴图偏移/缩放。通常，动态光照贴图的游戏对象应指向要批处理的完全相同的光照贴图位置。</li><li>多 pass 着色器会中断批处理。<ul><li>几乎所有的 Unity着色器都支持前向渲染中的多个光照，有效地为它们执行额外pass。“其他每像素光照”的绘制调用不进行批处理。</li><li>旧版延迟（光照pre-pass）渲染路径会禁用动态批处理，因为它必须绘制两次游戏对象。</li></ul></li></ul><p>因为动态批处理的工作原理是<strong>将所有游戏对象顶点</strong>转换到<strong>CPU上的世界空间</strong>，所以仅在该工作小于进行绘制调用的情况下，才有优势。绘制调用的资源需求取决于许多因素，主要是使用的图形API。例如，对于游戏主机或诸如 Apple Metal 之类的现代API，<strong>绘制调用的开销通常低得多，通常动态批处理根本没有优势</strong>。</p><h3 id="动态批处理粒子系统线渲染器轨迹渲染器">动态批处理（粒子系统、线渲染器、轨迹渲染器）</h3><p>动态批处理在用于具有 Unity动态生成的几何体的组件时，其工作方式与用于网格时不同。</p><ul><li><ol type="1"><li>对于每个兼容的渲染器类型，Unity 将所有可批处理的内容构建为 1个大型顶点缓冲区。</li></ol></li><li><ol start="2" type="1"><li>渲染器设置材质状态以用于批处理。</li></ol></li><li><ol start="3" type="1"><li>Unity 将顶点缓冲区绑定到图形设备。</li></ol></li><li><ol start="4" type="1"><li>对于批处理中的每个渲染器，Unity将偏移更新到顶点缓冲区中，然后提交新的绘制调用。</li></ol></li></ul><p>在衡量图形设备调用的成本时，<strong>渲染组件时的最慢部分是材质状态的设置</strong>。相比之下，将不同偏移处的绘制调用提交到共享顶点缓冲区中的速度非常快。这种方法与 Unity 在使用静态批处理时提交绘制调用的方式非常相似。</p><h3 id="静态批处理">静态批处理</h3><p>使用静态批处理，引擎可减少任何大小的几何体的绘制调用，但前提是它<strong>共享相同材质并且不移动</strong>。<strong>这种处理方式通常比动态批处理更高效</strong>（它不会在CPU 上转换顶点），<strong>但是使用更多内存</strong>。为了利用静态批处理，您需要显式指定某些游戏对象是静态对象且不会在游戏中移动、旋转或缩放。为此，请使用Inspector 中的 Static 复选框，将游戏对象标记为静态：</p><p>使用静态批处理<strong>需要额外的内存来存储组合的几何体</strong>。如果多个游戏对象在静态批处理之前共享相同几何体，则会在<strong>Editor中或运行时为每个游戏对象创建几何体的副本</strong>。这可能并非总是好办法；有时您必须避免为某些游戏对象进行静态批处理，这样会牺牲渲染性能，但可保持较小的内存占用量。<strong>例如，在茂密森林关卡中，将树标记为静态可能会产生严重的内存影响</strong>。在内部，静态批处理的<strong>工作原理是将静态游戏对象转换到世界空间并为它们构建一个共享的顶点和索引缓冲区</strong>。如果已启用Optimized Mesh Data__（在 Player__ 设置中），则 Unity会在构建顶点缓冲区时删除任何着色器变体未使用的任何顶点元素。为了执行此操作，系统会进行一些特殊的关键字检查；例如，如果Unity 未检测到 LIGHTMAP_ON 关键字，则会从批处理中删除光照贴图UV。然后，针对同一批次中的可见游戏对象，Unity会执行一系列简单的绘制调用，每次调用之间几乎没有状态变化。在技术上，Unity不会减少 API绘制调用，而是减少它们之间的状态变化（这正是消耗大量资源的部分）。在大多数平台上，批处理限制为64k 个顶点和 64k 个索引（OpenGLES 上为 48k 个索引，在 macOS 上为 32k个索引）。</p><p><strong>当前，仅对网格渲染器、轨迹渲染器、线渲染器、粒子系统和精灵渲染器进行批处理。这意味着<code>不会对蒙皮网格、布料和其他类型的渲染组件</code>进行批处理。</strong></p><p>渲染器仅与其他相同类型的渲染器一起接受批处理。半透明着色器通常要求游戏对象按照从后到前的顺序进行渲染，从而实现透明性。Unity首先按此顺序对游戏对象排序，然后尝试对它们进行批处理，但是因为必须严格满足顺序，所以这通常意味着可以实现比不透明游戏对象更少的批处理。手动组合彼此接近的游戏对象可以是绘制调用批处理的极好替代方法。例如，一个带有大量抽屉的静态橱柜通常只需在3D 建模应用程序中或者使用 <code>Mesh.CombineMeshes</code>来组合成一个网格。</p><h2 id="角色建模的优化">角色建模的优化</h2><h2 id="statistics-窗口">Statistics 窗口</h2><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">选项</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Time per frame and FPS</td><td style="text-align: left;">处理和渲染一个游戏帧所花费的时间（及其倒数，即每秒帧数）。请注意，此数字仅包括进行帧更新和渲染Game 视图所用的时间；不包括在 Editor 中绘制 Scene视图、检视面板处理和其他仅限于</td></tr><tr class="even"><td style="text-align: left;">Batches</td><td style="text-align: left;">“批处理(Batching)”可让引擎尝试将多个对象的渲染组合到一个内存块中以便减少由于资源切换而导致的CPU 开销。</td></tr><tr class="odd"><td style="text-align: left;">Saved by batching</td><td style="text-align: left;">合并的批次数。为确保良好的批处理，应尽可能在不同对象之间共享材质。更改渲染状态会将批次分成具有相同状态的组。</td></tr><tr class="even"><td style="text-align: left;">Tris 和 Verts</td><td style="text-align: left;">绘制的三角形和顶点的数量。在针对低端硬件进行优化时，这一点非常重要</td></tr><tr class="odd"><td style="text-align: left;">Screen</td><td style="text-align: left;">屏幕大小以及抗锯齿级别和内存使用情况。</td></tr><tr class="even"><td style="text-align: left;">SetPass</td><td style="text-align: left;">渲染 pass 的数量。每个 pass 都需要 Unity运行时绑定一个新的着色器，这可能会带来 CPU 开销。</td></tr><tr class="odd"><td style="text-align: left;">Visible Skinned Meshes</td><td style="text-align: left;">渲染的蒙皮网格的数量。</td></tr><tr class="even"><td style="text-align: left;">Animations</td><td style="text-align: left;">播放的动画的数量。</td></tr></tbody></table><h2 id="优化着色器加载时间">优化着色器加载时间</h2><p>着色器是在 GPU 上执行的小程序，加载它们可能需要一些时间。每个单独的GPU程序通常不会花费很多时间来加载，<strong>但着色器通常在内部有很多“变体”</strong>。</p><p>例如，标准着色器在完全编译后，最终将成为数千个略微不同的 GPU程序。这种情况可产生两个潜在问题：</p><ul><li>大量的这些着色器变体将<strong>增加游戏构建时间和游戏数据大小</strong>。</li><li>在游戏过程中加载大量着色器变体<strong>将很慢并占用内存</strong>。</li></ul><h3 id="着色器构建时剥离">着色器构建时剥离</h3><p>在构建游戏时，Unity可能检测到游戏不使用某些内部着色器变体，并从构建数据中跳过它们。构建时剥离将用于以下各项：</p><ul><li>各个着色器功能（针对使用 #pragma shader_feature的着色器）。如果所使用的材质都不使用特定变体，则该变体不会包含在构建中。请参阅内部着色器变体文档。在内置着色器中，标准着色器会使用构建时剥离。</li><li>任何场景未使用的可处理雾效和光照贴图模式的着色器变体不会包含在游戏数据中。如果要覆盖此行为，请参阅Graphics 窗口。</li></ul><p>上述的组合通常会大大减小着色器数据大小。例如，完全编译后的标准着色器将占用几百兆字节，但在典型的项目中，通常最终仅占用几兆字节（并且通常会由应用程序打包过程进一步压缩）。</p><h3 id="默认的-unity-着色器加载行为">默认的 Unity 着色器加载行为</h3><p>在所有默认设置下，Unity 将 shaderlab着色器对象加载到内存中，但在实际需要之前不会创建内部着色器变体。</p><p>这意味着仍然可以使用包含在游戏构建中的着色器变体，但是在需要它们之前不会有内存或加载时间成本。例如，着色器总是包含一个变体用于处理带阴影的点光源，但是如果一直未能在游戏中使用带阴影的点光源，那么加载这个特定的变体是没有意义的。</p><p>然而，这种默认行为有一个缺点，即第一次需要某个着色器变体时可能会出现暂时性中断问题，这是因为必须将新的GPU程序代码加载到图形驱动程序中。在游戏过程中通常不希望发生这种问题，因此Unity 提供了 ShaderVariantCollection 资源来帮助解决该问题。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/8.gao-jie-shader-zhu-ti/"/>
      <url>/2022/08/10/unity/shader/8.gao-jie-shader-zhu-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="高阶shader">高阶Shader</h1><h2 id="unity的渲染管线">Unity的渲染管线</h2><p>着色器定义了两点：<strong>1.对象自身的外观（其材质属性）</strong>；<strong>2.对象对光照的反应</strong>。由于光照计算必须内置在着色器中，并且有很多可能的光源和阴影类型，因此编写“好用”的高质量着色器将是一项复杂的任务。为了简化这一任务，Unity提供了表面着色器；在表面着色器中，所有光照、阴影、光照贴图、前向渲染和延迟渲染任务均自动完成。</p><h2 id="渲染路径">渲染路径</h2><p>如何应用光照以及使用着色器的哪些通道取决于使用的<strong>渲染路径</strong>。着色器中的每个通道均通过<strong>通道标签</strong>来表达其<strong>光照类型</strong>。</p><ul><li><p>在前向渲染中，将使用 ForwardBase 和 ForwardAdd 通道。</p></li><li><p>在延迟着色中，将使用 Deferred 通道。</p></li><li><p>在旧版延迟光照中，将使用 PrepassBase 和 PrepassFinal通道。</p></li><li><p>在旧版顶点光照中，将使用 Vertex、VertexLMRGBM 和 VertexLM通道。</p></li><li><p>在上述任何情况中，要渲染阴影或深度纹理，都将使用 ShadowCaster通道。</p></li><li><p>前项渲染 ForwardBase通道可一次性渲染环境光、光照贴图、主方向光和不重要的（顶点/SH）光源。ForwardAdd通道用于任何附加的每像素光源；针对此类光源照亮的每个对象进行一次调用。请参阅前向渲染以了解详细信息。</p></li></ul><p>如果使用前向渲染，<strong>但着色器没有适合前向渲染的通道（即，ForwardBase和 ForwardAdd通道类型均不存在），则会按照在顶点光照通道中的方式来渲染该对象</strong></p><ul><li>延迟着色路径 Deferred通道将渲染光照<strong>需要的所有信息</strong>（在内置着色器中：漫射颜色、镜面反射颜色、平滑度、世界空间法线、发光）。它还在发光通道中增加光照贴图、反射探针和环境光照。有关详细信息，请参阅延迟着色。</li></ul><h2 id="着色器性能">着色器性能</h2><ul><li>着色器代码需要执行的计算和处理越多，它对游戏性能的影响就越大。</li><li>计算的频率也会影响游戏的性能。通常，与顶点数（顶点着色器执行次数）相比，渲染的像素数会更多（因此像素着色器执行次数也更多），而渲染的顶点数比渲染的对象更多。在可能的情况下，可将计算从像素着色器代码移动到顶点着色器代码中，或者将它们完全移出着色器并在脚本中设置值。</li></ul><h3 id="优化的表面着色器">优化的表面着色器</h3><p>表面着色器非常适合编写与光照交互的着色器。但是，它们的默认选项已调整为涵盖大量的一般情况。可针对特定情况调整这些选项以使着色器运行速度更快，或至少让着色器变得更小巧：</p><ul><li>使用视图方向（即镜面反射）的着色器的 <code>approxview</code>指令使视图方向按照顶点（而不是按像素）进行标准化。这是近似值，但通常足够好。</li><li>适用于镜面反射着色器类型的 <code>halfasview</code>速度更快。半矢量（光照方向和视图矢量之间）按照顶点进行计算和标准化，并且光照函数接受半矢量作为参数，而不是视图矢量。</li><li><code>noforwardadd</code>使着色器仅完全支持前向渲染中的单方向光。其余的光源仍然可提供每顶点光源或球谐函数光源的效果。这样可以使着色器更小并确保它始终在一个通道中渲染，即使存在多个光源也是如此。</li><li><code>noambient</code>在着色器中禁用环境光照和球谐函数光源。这样可以稍稍提高性能。</li></ul><h3 id="计算精度">计算精度</h3><p>用 Cg/HLSL 编写着色器时，有三种基本数字类型：float、half 和fixed（请参阅数据类型和精度）。</p><p>为获得良好性能，请始终使用尽可能低的精度。这在移动平台（如 iOS 和Android）上尤为重要。重要的经验法则如下：</p><ul><li>对于世界空间位置和纹理坐标，请使用 float 精度。</li><li>对于所有其他情况（矢量、HDR 颜色等），请首先尝试 half精度。仅在必要的情况下再提高精度。</li><li>要对纹理数据进行非常简单的运算，请使用 fixed 精度。</li></ul><p>实际上，具体应该使用哪种数字类型取决于平台和 GPU。</p><h3 id="alpha-测试">Alpha 测试</h3><p>固定函数 AlphaTest（或者其可编程的等效函数clip()）在不同平台上具有不同的性能特征：</p><ul><li>通常，在使用该函数来移除大多数平台上的完全透明像素时，可获得少量优势。</li><li>但是，在 iOS 和某些 Android 设备的 PowerVR GPU 上，Alpha测试是资源密集型任务。不要试图在这些平台上使用这种测试进行性能优化，因为它会导致游戏运行速度比平常慢。</li></ul><h3 id="颜色遮罩-color-mask">颜色遮罩 (Color Mask)</h3><p>在某些平台（主要是 iOS 和 Android 设备的移动端 GPU）上，使用ColorMask 省略一些通道（例如 ColorMaskRGB）<strong>可能是资源密集型的操作，所以除非绝对需要，否则请不要使用</strong>。</p><h3 id="使用替换的着色器进行渲染">使用替换的着色器进行渲染</h3><p>有些渲染效果需要使用一组不同的着色器来渲染场景。例如，良好的边缘检测要求纹理具有场景法线，这样才能检测出表面方向不同的边缘。其他效果可能要求纹理具有场景深度，诸如此类。为此，可使用所有对象的替换着色器来渲染场景。</p><p>应通过脚本使用函数 Camera.RenderWithShader 或Camera.SetReplacementShader 来实现着色器替换。这两个函数均采用 shader 和replacementTag。</p><p>工作方式如下：摄像机按正常方式渲染场景，对象仍使用自己的材质，但要更改最终使用的实际着色器：</p><ul><li>如果 replacementTag为空，则使用指定的替换着色器来渲染场景中的所有对象。</li><li>如果 replacementTag 不为空，则对于将要渲染的每个对象：<ul><li>查询真实对象的着色器以获取标签值。</li><li>如果没有该标签，则不渲染对象。</li><li>在替换着色器中找到一个子着色器，并且该子着色器的一个给定标签具有找到的值。如果找不到此类子着色器，则不渲染对象。</li><li>现在，使用该子着色器来渲染对象。</li></ul></li></ul><p>因此，比如说，如果所有着色器都要有一个值为“Opaque”、“Transparent”、“Background”或“Overlay”的“RenderType”标签，则可编写一个替换着色器，该着色器只使用一个具有RenderType = Solid标签的子着色器来渲染实体对象。在替换着色器中找不到其他标签类型，因此不会渲染对象。或者您也可以为不同“RenderType”标签值编写若干子着色器。顺便提一下，Unity的所有内置着色器都设置了一个“RenderType”标签。</p><h3 id="光照着色器替换">光照着色器替换</h3><p>使用着色器替换时，将使用摄像机上配置的渲染路径来渲染场景。这意味着用于替换的着色器可以包含阴影和光照通道（您可以使用表面着色器进行着色器替换）。这对于渲染特殊效果和场景调试很有用。</p><h3 id="unity-内置着色器中的着色器替换标签">Unity内置着色器中的着色器替换标签</h3><p>Unity的所有内置着色器都设置了一个“RenderType”标签，可以在使用替换着色器进行渲染时使用此标签。标签值如下：</p><ul><li>Opaque：大部分着色器（法线、自发光、反射和地形着色器）。</li><li>Transparent：大部分半透明着色器（透明、粒子、字体和地形附加通道着色器）。</li><li>TransparentCutout：遮罩透明度着色器（透明镂空、两个通道植被着色器）。</li><li>Background：天空盒着色器。</li><li>Overlay：GUI 纹理、光环、光晕着色器。</li><li>TreeOpaque：地形引擎树皮。</li><li>TreeTransparentCutout：地形引擎树叶。</li><li>TreeBillboard：地形引擎公告牌树。</li><li>Grass：地形引擎草。</li><li>GrassBillboard：地形引擎公告牌草。</li></ul><h3 id="内置场景深度法线纹理">内置场景深度/法线纹理</h3><p>摄像机内置了渲染深度或深度+法线纹理的功能（可能在某些效果中需要该功能）。请参阅摄像机深度纹理页面。请注意，在某些情况下（取决于硬件），可以使用着色器替换方法在内部渲染深度和深度+法线纹理。因此，务必在着色器中设置正确的“RenderType”标签。</p><h3 id="自定义着色器-gui">自定义着色器 GUI</h3><h3 id="使用深度纹理">使用深度纹理</h3><p>深度纹理中的像素值介于 0 和 1 之间，具有非线性分布。精度通常为 32 或16 位，具体取决于所使用的配置和平台。从深度纹理读取时，将返回 0 到1范围内的高精度值。如果您需要获取与摄像机之间的距离或其他 0 到 1之间的线性值，</p><pre><code>Shader "Render Depth" {    SubShader {        Tags { "RenderType"="Opaque" }        Pass {            CGPROGRAM            #pragma vertex vert            #pragma fragment frag            #include "UnityCG.cginc"            struct v2f {                float4 pos : SV_POSITION;                float2 depth : TEXCOORD0;            };            v2f vert (appdata_base v) {                v2f o;                o.pos = UnityObjectToClipPos(v.vertex);                UNITY_TRANSFER_DEPTH(o.depth);                return o;            }            half4 frag(v2f i) : SV_Target {                UNITY_OUTPUT_DEPTH(i.depth);            }            ENDCG        }    }}</code></pre><h3 id="摄像机的深度纹理">摄像机的深度纹理</h3><p><strong>TODO</strong></p><h3 id="平台特定的渲染差异">平台特定的渲染差异</h3><h4 id="渲染纹理坐标">渲染纹理坐标</h4><ul><li>Direct3D 类：顶部坐标为 0 并向下增加。此类型适用于 Direct3D、Metal和游戏主机。</li><li>OpenGL 类：底部坐标为 0 并向上增加。此类适用于 OpenGL 和 OpenGLES。</li></ul><h4 id="图像效果">图像效果</h4><pre><code>// 翻转纹理的采样：// 主纹理的// 纹理像素大小将具有负 Y。# if UNITY_UV_STARTS_AT_TOPif (_MainTex_TexelSize.y &lt; 0)        uv.y = 1-uv.y;# endif</code></pre><h4 id="在-uv-空间中渲染">在 UV 空间中渲染</h4><p>在纹理坐标 (UV)空间中渲染特殊效果或工具时，您可能需要调整着色器，以便在 Direct3D 类和OpenGL类系统之间进行一致渲染。您还可能需要在渲染到屏幕和渲染到纹理之间进行渲染调整。为进行此类调整，应上下翻转Direct3D 类投影，使其坐标与 OpenGL 类投影坐标相匹配。</p><p>内置变量 ProjectionParams.x 包含值 +1 或 –1。-1表示投影已上下翻转以匹配 OpenGL 类投影坐标，而 +1 表示尚未翻转。您可以在着色器中检查此值，然后执行不同的操作。下面的示例将检查是否已翻转投影，如果已翻转，则再次进行翻转，然后返回UV 坐标以便匹配。</p><pre><code>float4 vert(float2 uv : TEXCOORD0) : SV_POSITION{    float4 pos;    pos.xy = uv;    // 此示例使用上下翻转的投影进行渲染，    // 因此也翻转垂直 UV 坐标    if (_ProjectionParams.x &lt; 0)        pos.y = 1 - pos.y;    pos.z = 0;    pos.w = 1;    return pos;}</code></pre><h4 id="裁剪空间坐标">裁剪空间坐标</h4><p>与纹理坐标类似，裁剪空间坐标（也称为投影后空间坐标）在 Direct3D 类和OpenGL 类平台之间有所不同：</p><ul><li><p>Direct3D 类：裁剪空间深度从近平面的 0.0 到远平面的+1.0。此类型适用于 Direct3D、Metal 和游戏主机。</p></li><li><p>OpenGL 类：裁剪空间深度从近平面的 –1.0 到远平面的+1.0。此类适用于 OpenGL 和 OpenGL ES。</p></li></ul><p>在着色器代码内，可使用内置宏 UNITY_NEAR_CLIP_VALUE来获取基于平台的近平面值。</p><h4 id="着色器计算的精度">着色器计算的精度</h4><p>要避免精度问题，<strong>请确保在目标平台上测试着色器</strong>。移动设备和PC 中的 GPU 在处理浮点类型方面有所不同。</p><h4 id="着色器中的-const-声明">着色器中的 const 声明</h4><p>const 的使用在 Microsoft HSL（请参阅 msdn.microsoft.com）和 OpenGL 的GLSL（请参阅 Wikipedia）着色器语言之间有所不同。</p><ul><li><p>Microsoft 的 HLSL const 与 C# 和 C++中的含义大致相同：声明的变量在其作用域内是只读的，但可按任何方式初始化。</p></li><li><p>OpenGL 的 GLSL const表示变量实际上是<strong>编译时常量</strong>，因此必须使用编译时约束（文字值或其他对于const 的计算）进行初始化。</p></li></ul><p>最好是遵循 OpenGL 的 GLSL语义，并且只有当变量真正不变时才将变量声明为const。避免使用其他一些可变值初始化 const变量（例如，作为函数中的局部变量）。这一原则也适用于 Microsoft 的HLSL，因此以这种方式使用 const 可以避免在某些平台上混淆错误</p><h3 id="提取深度缓冲区">提取深度缓冲区</h3><p>如果要手动提取深度 (Z)缓冲区值，则可能需要检查缓冲区方向。以下是执行此操作的示例：</p><pre><code>float z = tex2D(_CameraDepthTexture, uv);# if defined(UNITY_REVERSED_Z)    z = 1.0f - z;# endif</code></pre><h3 id="使用裁剪空间">使用裁剪空间</h3><p>如果要手动使用裁剪空间 (Z)深度，则可能还需要使用以下宏来抽象化平台差异：</p><pre><code>float clipSpaceRange01 = UNITY_Z_0_FAR_FROM_CLIPSPACE(rawClipSpace);</code></pre><p>注意：此宏不会改变 OpenGL 或 OpenGL ES平台上的裁剪空间，因此在这些平台上，此宏返回“-near”1（近平面）到far（远平面）之间的值。</p><h3 id="投影矩阵">投影矩阵</h3><p>如果处于深度 (Z) 发生反转的平台上，则 GL.GetGPUProjectionMatrix()返回一个还原了 z 的矩阵。但是，如果要手动从投影矩阵中进行合成（例如，对于自定义阴影或深度渲染），您需要通过脚本按需自行还原深度(Z) 方向。</p><p>以下是执行此操作的示例：</p><pre><code>var shadowProjection = Matrix4x4.Ortho(...); //阴影摄像机投影矩阵var shadowViewMat = ...     //阴影摄像机视图矩阵var shadowSpaceMatrix = ... //从裁剪空间到阴影贴图纹理空间    //当引擎通过摄像机投影计算设备投影矩阵时，//"m_shadowCamera.projectionMatrix"被隐式反转m_shadowCamera.projectionMatrix = shadowProjection; //"shadowProjection"在连接到"m_shadowMatrix"之前被手动翻转，//因为它被视为着色器的其他矩阵。if(SystemInfo.usesReversedZBuffer) {    shadowProjection[2, 0] = -shadowProjection[2, 0];    shadowProjection[2, 1] = -shadowProjection[2, 1];    shadowProjection[2, 2] = -shadowProjection[2, 2];    shadowProjection[2, 3] = -shadowProjection[2, 3];}m_shadowMatrix = shadowSpaceMatrix * shadowProjection * shadowViewMat;</code></pre><h3 id="深度-z-偏差">深度 (Z) 偏差</h3><p>Unity 自动处理深度 (Z) 偏差，以确保其与 Unity 的深度 (Z)方向匹配。但是，如果要使用本机代码渲染插件，则需要在 C 或 C++代码中消除（反转）深度 (Z) 偏差。</p><h3 id="深度-z-方向检查工具">深度 (Z) 方向检查工具</h3><ul><li>使用 SystemInfo.usesReversedZBuffer 可确认所在平台是否使用反转深度(Z)。</li></ul><h2 id="着色器细节级别">着色器细节级别</h2><p>仅当使用的着色器或子着色器的细节级别 (LOD) 值低于指定数字时，着色器LOD 才有效。</p><p>默认情况下，允许的 LOD级别无限大，因此可以使用用户硬件支持的所有着色器。但在某些情况下，即使硬件可以支持更高的着色器细节级别，您也可能希望降低细节级别。例如，一些廉价的显卡可能支持所有功能，但使用起来会导致响应过慢。因此，您可能不希望在这些显卡上使用视差法线贴图。</p><p>可为各个着色器分别设置着色器 LOD（使用Shader.maximumLOD），也可为所有着色器进行全局设置（使用Shader.globalMaximumLOD）。</p><p>Unity 中的内置着色器按以下方式设置 LOD：</p><ul><li>顶点光照 (VertexLit) 类型着色器 = 100</li><li>贴花、反光顶点光照 = 150</li><li>漫射 = 200</li><li>漫射细节、反光凹凸无光照、反光凹凸顶点光照 = 250</li><li>凹凸、镜面反射 = 300</li><li>凹凸镜面反射 = 400</li><li>视差 = 500</li><li>视差镜面反射 = 600</li></ul><h2 id="纹理数组">纹理数组</h2><p>类似于常规 2D 纹理（Texture2D 类，着色器中的sampler2D__）、立方体贴图（Cubemap 类，着色器中的 samplerCUBE__）和 3D纹理（Texture3D 类，着色器中的 <strong>sampler3D</strong>），Unity也支持 2D 纹理数组。</p><p>纹理数组是具有相同大小/格式/标记的 2D纹理的<strong>集合</strong>，这些纹理对于 GPU而言像是单个对象，并可在着色器中使用纹理元素索引进行采样。它们可以用于实现自定义地形渲染系统或其他特殊效果，让您高效访问大量相同大小和格式的纹理。2D纹理数组的元素也称为<strong>切片或图层</strong>。</p><h3 id="平台支持">平台支持</h3><p>纹理数组需要受到底层图形 API 和 GPU的支持。纹理数组在以下平台上可用：</p><ul><li>Direct3D 11/12（Windows、Xbox One）</li><li>OpenGL Core（Mac OS X、Linux）</li><li>Metal（iOS、Mac OS X）</li><li>OpenGL ES 3.0（Android、iOS、WebGL 2.0）</li><li>PlayStation 4</li></ul><p>其他平台（OpenGL ES 2.0 或 WebGL 1.0）不支持纹理数组。可使用<code>SystemInfo.supports2DArrayTextures</code>在运行时确定纹理数组支持情况。</p><h3 id="创建和填充纹理数组">创建和填充纹理数组</h3><p>由于纹理数组没有纹理导入管线，必须在脚本中创建纹理数组。可使用Texture2DArray类来创建和填充纹理数组。请注意，纹理数组可序列化为资源，因此可以借助Editor 脚本中的数据创建和填充纹理数组。</p><p>通常，纹理数组完全是在 GPU 内存中使用，但您可以使用Graphics.CopyTexture、Texture2DArray.GetPixels 和Texture2DArray.SetPixels 与系统内存之间双向传输像素。</p><h3 id="将纹理数组用作渲染目标">将纹理数组用作渲染目标</h3><p>纹理数组元素也可用作渲染目标。使用 RenderTexture.dimension提前指定渲染目标是否是 2D 纹理数组。Graphics.SetRenderTarget 的depthSlice 参数可指定要渲染到的 Mipmap级别或立方体贴图面。在支持“分层渲染”（例如，几何着色器）的平台上，可将depthSlice 参数设置为 –1以便将整个纹理数组设置为渲染目标。此外还可使用几何着色器来渲染到个别元素中。</p><h3 id="在着色器中使用纹理数组">在着色器中使用纹理数组</h3><p>由于纹理数组并非适用于所有平台，因此着色器需要使用适当的编译目标或功能要求来访问纹理数组。支持纹理数组的最低着色器模型<strong>编译目标为3.5，功能名称为 2darray</strong>。</p><p>使用以下宏可声明和采样纹理数组：</p><ul><li>UNITY_DECLARE_TEX2DARRAY(name) 在 HLSL代码中声明纹理数组采样器变量。</li><li>UNITY_SAMPLE_TEX2DARRAY(name,uv) 使用 float3 UV 采样纹理数组；坐标的z 分量是数组元素索引。</li><li>UNITY_SAMPLE_TEX2DARRAY_LOD(name,uv,lod) 使用显式 Mipmap级别采样纹理数组。</li></ul><pre><code>Shader "Example/Sample2DArrayTexture"{    Properties    {        _MyArr ("Tex", 2DArray) = "" {}        _SliceRange ("Slices", Range(0,16)) = 6        _UVScale ("UVScale", Float) = 1.0    }    SubShader    {        Pass        {            CGPROGRAM            #pragma vertex vert            #pragma fragment frag            // 纹理数组并非在任何地方都可用，            // 只能在它们所在的平台上编译着色器            #pragma require 2darray                        #include "UnityCG.cginc"            struct v2f            {                float3 uv : TEXCOORD0;                float4 vertex : SV_POSITION;            };            float _SliceRange;            float _UVScale;            v2f vert (float4 vertex : POSITION)            {                v2f o;                o.vertex = mul(UNITY_MATRIX_MVP, vertex);                o.uv.xy = (vertex.xy + 0.5) * _UVScale;                o.uv.z = (vertex.z + 0.5) * _SliceRange;                return o;            }                        UNITY_DECLARE_TEX2DARRAY(_MyArr);            half4 frag (v2f i) : SV_Target            {                return UNITY_SAMPLE_TEX2DARRAY(_MyArr, i.uv);            }            ENDCG        }    }}</code></pre><h2 id="使用-visual-studio-来调试-directx-1112-着色器">使用 VisualStudio 来调试 DirectX 11/12 着色器</h2><h2 id="使用-pix-来调试-directx-12-着色器">使用 PIX 来调试 DirectX 12着色器</h2><h2 id="在着色器中实现固定函数-texgen">在着色器中实现固定函数TexGen</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/7.shaderlab-yu-fa/"/>
      <url>/2022/08/10/unity/shader/7.shaderlab-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="shaderlab-语法">ShaderLab 语法</h1><h2 id="语法">语法</h2><pre><code>Shader "name" { [Properties] Subshaders [Fallback] [CustomEditor] }</code></pre><h2 id="属性">属性</h2><h3 id="数字">数字</h3><p>Range、 Float、Int</p><pre><code>name ("display name", Range (min, max)) = numbername ("display name", Float) = numbername ("display name", Int) = number</code></pre><p><code>Range 和 Float</code>默认值仅仅是单个数字，例如“13.37”。<strong><code>Int</code> 默认值仅仅是单个数字，例如 "13.5"?</strong></p><h3 id="颜色和矢量">颜色和矢量</h3><p>Color、 Vector</p><pre><code>name ("display name", Color) = (number,number,number,number)name ("display name", Vector) = (number,number,number,number)</code></pre><p><code>Color 和 Vector</code>属性，默认值是括在<code>圆括号</code>中的<code>四个数字</code>，例如“(1,0.5,0.2,1)”。### 纹理</p><pre><code>name ("display name", 2D) = "defaulttexture" {}name ("display name", Cube) = "defaulttexture" {}name ("display name", 3D) = "defaulttexture" {}</code></pre><p><code>2D 纹理</code>，默认值为空字符串或内置默认纹理之一：“white”（RGBA：1,1,1,1）、“black”（RGBA：0,0,0,0）、“gray”（RGBA：0.5,0.5,0.5,0.5）、“bump”（RGBA：0.5,0.5,1,0.5）或“red”（RGBA：1,0,0,0）。</p><p>非 2D 纹理（立方体、3D 或 2D数组），默认值为空字符串。如果材质未指定立方体贴图/3D/数组纹理，则使用灰色（RGBA：0.5,0.5,0.5,0.5）。</p><h3 id="属性特性和绘制器">属性特性和绘制器</h3><p>在属性前面，可指定可选的特性（用方括号括起）。这些是 Unity可以识别的特性，或者它们可以指示您自己的 MaterialPropertyDrawer 类来控制它们在材质检视面板中的呈现方式。Unity 可以识别的特性包括：</p><ul><li>[HideInInspector] - 不在材质检视面板中显示属性值。</li><li>[NoScaleOffset] -对于具有此特性的纹理属性，材质检视面板不会显示纹理平铺/偏移字段。</li><li>[Normal] - 表示纹理属性需要法线贴图。</li><li>[HDR] - 表示纹理属性需要高动态范围 (HDR) 纹理。</li><li>[Gamma] - 表示在 UI 中将浮点/矢量属性指定为 sRGB值（就像颜色一样），并且可能需要根据使用的颜色空间进行转换。请参阅着色器程序中的属性。</li><li>[PerRendererData] - 表示纹理属性将以 MaterialPropertyBlock的形式来自每渲染器数据。材质检视面板会更改这些属性的纹理字段 UI。</li></ul><h2 id="subshader">SubShader</h2><p>子着色器定义渲染通道的列表，并且可选择性地设置所有通道共同的任意状态。此外，还可以设置子着色器专用的标签。</p><p>当 Unity 选择要用于渲染的子着色器时，它会为每个定义的通道 (Pass)渲染一次对象（并且数量可能由于光交互而增加）。由于对象的每次渲染成本都很高，因此应以尽可能少的通道数量定义着色器。当然，有时在某些图形硬件上，所需的效果不能在单个通道中完成；那么您别无选择，只能使用多个通道。</p><p>每个通道定义可以是常规 Pass、Use Pass 或 Grab Pass。</p><p>Pass 定义中允许的任何语句也可能出现在子 Subshader代码块中。这将使所有通道都使用这一“共享”状态。</p><h3 id="pass">Pass</h3><p><strong>Pass 代码块将使游戏对象的几何体被渲染一次。</strong></p><h4 id="语法-1">语法</h4><p>Pass { [Name and Tags] [RenderSetup] }</p><h4 id="名称和标签">名称和标签</h4><p>一个通道 (Pass) 可以定义一个名称 (Name) 和任意数量的标签(Tags)。这些名称/值字符串用于将通道的意图传达给渲染引擎。</p><h4 id="渲染状态设置">渲染状态设置</h4><p>一个通道将设置图形硬件的各种状态，例如是否应开启 Alpha混合或是否应使用深度测试。</p><h4 id="剔除和深度测试">剔除和深度测试</h4><p><img src="imgs/PipelineCullDepth.png"></p><p>剔除是一种优化方式，即不渲染背离观察者的多边形。所有多边形都有正面和背面。剔除利用大多数对象均为封闭体这一事实；如果您有一个立方体，您将永远不会看到背离您的面（前方始终只有一面朝向您），所以我们不需要绘制背离的面。因此有了“背面剔除”一词。</p><p>让渲染看起来正确的另一个功能是“深度测试”。深度测试确保在场景中仅绘制距离最近的表面对象。</p><ul><li>设置多边形剔除模式。 Cull</li></ul><pre><code>Cull Back | Front | Off</code></pre><p>控制应该剔除多边形的哪些面（不绘制）</p><pre><code>*   Back 不渲染背离观察者的多边形**（默认值）**。*   Front 不渲染面向观察者的多边形。用于从里到外翻转对象。*   Off 禁用剔除 - 绘制所有面。**用于特殊效果**。</code></pre><ul><li>设置深度缓冲区写入模式。 ZWrite</li></ul><pre><code>ZWrite On | Off</code></pre><p>控制是否将此对象的像素写入深度缓冲区（默认值为<em>On</em>）。如果要绘制实体对象，请将其保留为on。如果要绘制半透明效果，请切换到 ZWrite Off。</p><ul><li>设置深度缓冲区测试模式。</li></ul><p>ZTest</p><pre><code>ZTest (Less | Greater | LEqual | GEqual | Equal | NotEqual | Always)</code></pre><p>应如何执行深度测试。默认值为<code>LEqual</code>（将前方或远处的对象作为现有对象绘制；隐藏其后面的对象）。</p><ul><li>设置 Z 缓冲区深度偏移。 Offset</li></ul><pre><code>Offset Factor, Units</code></pre><p>允许使用两个参数指定深度偏移：factor 和 units。Factor 相对于多边形的X 或 Y 缩放最大 Z 斜率，而 units缩放最小可分辨深度缓冲区值。因此可强制将一个多边形绘制在另一个多边形上，尽管它们实际上位于相同位置。例如，Offset0, -1 将多边形拉近摄像机并忽略多边形的斜率，而 Offset -1, -1在观察掠射角时进一步拉近多边形。</p><h4 id="设置-alpha-混合alpha-操作和-alpha-to-coverage-模式">设置 Alpha混合、Alpha 操作和 alpha-to-coverage 模式。</h4><pre><code>Blend sourceBlendMode destBlendModeBlend sourceBlendMode destBlendMode, alphaSourceBlendMode alphaDestBlendModeBlendOp colorOpBlendOp colorOp, alphaOpAlphaToMask On | Off</code></pre><h4 id="设置颜色通道写入遮罩">设置颜色通道写入遮罩</h4><p>设置颜色通道写入遮罩。写入 ColorMask 0可关闭对所有颜色通道的渲染。默认模式是 写入所有通道(RGBA)，但是对于某些特殊效果，您可能希望不修改某些通道，或完全禁用颜色写入。</p><p>使用多渲染目标 (MRT) 渲染时，可通过在末尾添加索引（0 到7）来为每个渲染目标设置不同的颜色遮罩。例如，<strong><code>ColorMask RGB 3</code></strong>将使渲染目标 #3 仅写入到 RGB 通道。</p><pre><code>ColorMask RGB | A | 0 | R、G、B、A 的任意组合</code></pre><h4 id="旧版固定函数着色器命令">旧版固定函数着色器命令</h4><p>一些命令用于编写旧版“固定函数样式”着色器。这是视为已弃用的功能，因为编写表面着色器或着色器程序可带来更大的灵活性。但是，对于非常简单的着色器，以固定函数样式编写着色器有时会更容易，因此这里提供了命令。请注意，如果不使用固定函数着色器，则会忽略以下所有命令。##### 固定函数 Lighting 和 Material</p><pre><code>Lighting On | OffMaterial { Material Block }SeparateSpecular On | OffColor Color-valueColorMaterial AmbientAndDiffuse | Emission</code></pre><p>所有这些均控制固定函数每顶点光照：它们将其开启，设置材质颜色，开启镜面高光，提供默认颜色（如果顶点光照关闭），并控制网格顶点颜色如何影响光照。</p><h5 id="固定函数-fog">固定函数 Fog</h5><pre><code>Fog { Fog Block }</code></pre><h5 id="固定函数-alphatest">固定函数 AlphaTest</h5><pre><code>AlphaTest (Less | Greater | LEqual | GEqual | Equal | NotEqual | Always) CutoffValue</code></pre><h5 id="固定函数纹理组合器">固定函数纹理组合器</h5><pre><code>SetTexture textureProperty { combine options }</code></pre><h4 id="混合">混合</h4><h4 id="shaderlab通道标签">ShaderLab：通道标签</h4><pre><code> Tags { "TagName1" = "Value1" "TagName2" = "Value2" }</code></pre><h5 id="lightmode-标签定义通道在光照管线中的角色">LightMode标签定义通道在光照管线中的角色。</h5><p>LightMode 标签的可能值：</p><ul><li>Always：始终渲染；不应用光照。</li><li>ForwardBase：在前向渲染中使用；应用环境光、主方向光、顶点/SH光源和光照贴图。</li><li>ForwardAdd：在前向渲染中使用；应用附加的每像素光源（每个光源有一个通道）。</li><li>Deferred：在延迟渲染中使用；渲染 G 缓冲区。</li><li>ShadowCaster：将对象深度渲染到阴影贴图或深度纹理中。</li><li>MotionVectors：用于计算每对象运动矢量。</li><li>PrepassBase：在旧版延迟光照中使用；渲染法线和镜面反射指数。</li><li>PrepassFinal：在旧版延迟光照中使用；通过组合纹理、光照和反光来渲染最终颜色。</li><li>Vertex：当对象不进行光照贴图时在旧版顶点光照渲染中使用；应用所有顶点光源。</li><li>VertexLMRGBM：当对象不进行光照贴图时在旧版顶点光照渲染中使用；在光照贴图为RGBM 编码的平台上（PC 和游戏主机）。</li><li>VertexLM：当对象不进行光照贴图时在旧版顶点光照渲染中使用；在光照贴图为双LDR 编码的平台上（移动平台）。</li></ul><p>#####PassFlags 标签</p><p>一个通道可指示一些标志来更改渲染管线向通道传递数据的方式。这可通过使用PassFlags标签来实现，该标签的值为空格分隔的标志名称。目前支持以下标志：</p><ul><li>OnlyDirectional：在 ForwardBase通道类型中使用时，此标志的作用是仅允许主方向光和环境光/光照探针数据传递到着色器。这意味着非重要光源的数据将不会传递到顶点光源或球谐函数着色器变量。请参阅前向渲染以了解详细信息。</li></ul><p>#####RequireOptions 标签</p><p>一个通道可指示仅当满足某些外部条件时才渲染该通道。这可通过使用RequireOptions 标签来实现，该标签的值为空格分隔的选项字符串。目前，Unity支持以下选项：</p><ul><li>SoftVegetation：仅当 Quality 窗口中开启了 Soft Vegetation时才渲染此通道。</li></ul><h4 id="模板缓冲">模板缓冲</h4><p>模板缓冲区可用作一般目的的每像素遮罩，以便保存或丢弃像素。</p><p>模板缓冲区通常是每像素 8位整数。该值可以写入、递增或递减。后续绘制调用可以根据该值进行测试，以确定在运行像素着色器之前是否应丢弃像素。</p><p>Ref</p><pre><code>    Ref referenceValue</code></pre><p>要比较的参考值（如果 Comp 是 always以外的任何值）和/或要写入缓冲区的值（如果 Pass、Fail 或 ZFail设置为替换）。值为 0 到 255 之间的整数。</p><p>ReadMask、WriteMask、Comp、Pass、Fail、ZFail</p><pre><code>    ReadMask readMask</code></pre><p>这是一个 8 位掩码，值为 0 到 255之间的整数，用于比较参考值和缓冲区的内容 (referenceValue &amp; readMask)comparisonFunction (stencilBufferValue &amp;readMask)。默认值：<em>255</em>。</p><pre><code>    WriteMask writeMask</code></pre><p>这是一个 8 位掩码，值为 0 到 255之间整数，写入缓冲区时使用。请注意，与其他写掩码一样，它指定写操作将影响模板缓冲区的哪些位（例如WriteMask 0 表示不会影响任何位，也不会写入0）。默认值：<em>255</em>。</p><pre><code>    Comp comparisonFunction</code></pre><p>用于将参考值与缓冲区的当前内容进行比较的函数。默认值：<em>always</em>。</p><pre><code>    Pass stencilOperation</code></pre><p>如果模板测试（和深度测试）通过，如何处理缓冲区的内容。默认值：<em>keep</em>。</p><pre><code>    Fail stencilOperation</code></pre><p>如果模板测试（和深度测试）失败，如何处理缓冲区的内容。默认值：<em>keep</em>。</p><pre><code>    ZFail stencilOperation</code></pre><p>如果模板测试通过但深度测试失败，如何处理缓冲区的内容。默认值：<em>keep</em>。</p><p>Comp、Pass、Fail 和 ZFail 将应用于正面几何体，除非指定了 <em>CullFront</em>，在这种情况下将应用于背面几何体。您还可以通过定义CompFront、PassFront、FailFront 或 ZFailFront（用于正面几何体）以及CompBack、PassBack、FailBack 或ZFailBack（用于背面几何体）来显式指定双面模板状态。</p><h5 id="比较函数">比较函数</h5><table><thead><tr class="header"><th style="text-align: left;">函数</th><th style="text-align: left;">解释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Greater</td><td style="text-align: left;">仅渲染参考值大于缓冲区值的像素。</td></tr><tr class="even"><td style="text-align: left;">GEqual</td><td style="text-align: left;">仅渲染参考值大于或等于缓冲区值的像素。</td></tr><tr class="odd"><td style="text-align: left;">Less</td><td style="text-align: left;">仅渲染参考值小于缓冲区值的像素。</td></tr><tr class="even"><td style="text-align: left;">LEqual</td><td style="text-align: left;">仅渲染参考值小于或等于缓冲区值的像素。</td></tr><tr class="odd"><td style="text-align: left;">Equal</td><td style="text-align: left;">仅渲染参考值等于缓冲区值的像素。</td></tr><tr class="even"><td style="text-align: left;">NotEqual</td><td style="text-align: left;">仅渲染参考值不同于缓冲区值的像素。</td></tr><tr class="odd"><td style="text-align: left;">Always</td><td style="text-align: left;">使模板测试始终通过。</td></tr><tr class="even"><td style="text-align: left;">Never</td><td style="text-align: left;">使模板测试始终失败。</td></tr></tbody></table><h5 id="模板操作">模板操作</h5><table><thead><tr class="header"><th style="text-align: left;">函数</th><th style="text-align: left;">解释</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">Keep</td><td style="text-align: left;">保持缓冲区的当前内容。</td></tr><tr class="even"><td style="text-align: left;">Zero</td><td style="text-align: left;">将 0 写入缓冲区。</td></tr><tr class="odd"><td style="text-align: left;">Replace</td><td style="text-align: left;">将参考值写入缓冲区。</td></tr><tr class="even"><td style="text-align: left;">IncrSat</td><td style="text-align: left;">递增缓冲区中的当前值。如果该值已经是255，则保持为 255。</td></tr><tr class="odd"><td style="text-align: left;">DecrSat</td><td style="text-align: left;">递减缓冲区中的当前值。如果该值已经是0，则保持为 0。</td></tr><tr class="even"><td style="text-align: left;">Invert</td><td style="text-align: left;">将所有位求反。</td></tr><tr class="odd"><td style="text-align: left;">IncrWrap</td><td style="text-align: left;">递增缓冲区中的当前值。如果该值已经是255，则变为 0。</td></tr><tr class="even"><td style="text-align: left;">DecrWrap</td><td style="text-align: left;">递减缓冲区中的当前值。如果该值已经是0，则变为 255。</td></tr></tbody></table><h5 id="延迟渲染路径">延迟渲染路径</h5><p>在延迟渲染路径中渲染的对象的模板功能在某种程度上受到限制，因为在基础通道和光照通道期间，模板缓冲区用于其他目的。<strong>在这两个阶段中，着色器中定义的模板状态将被忽略，而仅在最终通道期间考虑。因此，不可能基于模板测试来屏蔽这些对象，但是它们仍然可以修改缓冲区内容，以供稍后在帧中渲染的对象使用</strong>。在延迟路径之后在前向渲染路径中渲染的对象（例如透明对象或没有表面着色器的对象）将再次正常设置其模板状态。</p><p>延迟渲染路径使用模板缓冲区的三个最高位，加上最多四个最高位（具体取决于场景中使用的光遮罩层数）。可以使用模板读写掩码在“干净”的位范围内操作，也可以使用Camera.clearStencilAfterLightingPass强制摄像机在光照通道后清理模板缓冲区。</p><h4 id="shaderlabname">ShaderLab：Name</h4><pre><code>Name "PassName"</code></pre><p>为当前通道提供 PassName名称。<strong>请注意，在内部，名称将转换为大写</strong>。</p><h4 id="shaderlabusepass">ShaderLab：UsePass</h4><pre><code>UsePass "Shader/Name"</code></pre><p>插入来自给定着色器的具有给定名称的所有通道。Shader/Name包含着色器名称和通道名称，以斜杠字符分隔。请注意，系统只会考虑第一个受支持的子着色器。</p><h4 id="shaderlabgrabpass">ShaderLab：GrabPass</h4><p>GrabPass是一种特殊通道类型，它把即将绘制对象时的屏幕内容抓取到纹理中。在后续通道中即可使用此纹理，从而执行基于图像的高级效果。</p><p>GrabPass 包含在子着色器内部。它可采用两种形式：</p><ul><li>简单的 GrabPass { }可将当前屏幕内容抓取到某个纹理中。在随后的通道中可通过 _GrabTexture名称访问该纹理。注意：这种抓取通道的形式将为使用它的每个对象执行耗时的屏幕抓取操作。</li><li>GrabPass { "TextureName" }可将当前屏幕内容抓取到纹理中，但仅为使用给定纹理名称的第一个对象在每一帧执行一次该操作。在后续通道中可通过给定纹理名称访问该纹理。场景中有多个对象在使用GrabPass 时，这种方法更高效。</li></ul><h4 id="shaderlab子着色器标签-subshader-tags">ShaderLab：子着色器标签(SubShader Tags)</h4><p>标签用于确定子着色器的渲染顺序和其他参数。<strong>请注意，以下由Unity 识别的标签必须位于 SubShader 部分中，不能在 Pass 中！</strong></p><p>除了 Unity 可以识别的内置标签外，您还可以使用自己的标签并使用Material.GetTag 函数来查询这些标签。</p><ul><li>渲染顺序 - Queue 标签</li></ul><p>有四个预定义的渲染队列，但预定义的渲染队列之间可以有更多的队列。预定义队列包括：</p><ul><li>Background -此渲染队列在任何其他渲染队列之前渲染。通常会对需要处于背景中的对象使用此渲染队列。</li><li>Geometry（默认值）-此队列用于大部分对象。不透明几何体使用此队列。</li><li>AlphaTest - 进行 Alpha 测试的几何体将使用此队列。这是不同于 Geometry队列的单独队列，因为在绘制完所有实体对象之后再渲染经过 Alpha测试的对象会更有效。</li><li>Transparent - 此渲染队列在 Geometry 和 AlphaTest之后渲染，按照从后到前的顺序。<strong>任何经过 Alpha混合者（即不写入深度缓冲区的着色器）都应该放在这里</strong>（玻璃、粒子效果）。</li><li>Overlay -此渲染队列旨在获得覆盖效果。<strong>最后渲染的任何内容都应该放在此处</strong>（例如，镜头光晕）。</li></ul><p>对于特殊用例，可以使用中间队列。在内部，每个队列由整数索引表示；<strong>Background是 1000，Geometry 是 2000，AlphaTest 是 2450，Transparent 是3000，Overlay 是 4000</strong>。如果着色器使用如下所示的队列：</p><pre><code>Tags { "Queue" = "Geometry+1" }</code></pre><p>这将使对象在所有不透明对象之后渲染，但在透明对象之前渲染，因为渲染队列索引值将是2001（几何体索引值加一）。如果您希望始终在其他对象集之间绘制某些对象，那么这非常有用。例如，在大多数情况下，透明的水应该在不透明对象之后绘制，但又要在透明对象之前绘制。</p><p>索引值高达 2500的队列（“Geometry+500”）视为“不透明”，并且会优化对象的绘制顺序以获得最佳性能。较高索引的渲染队列被认为是“透明对象”并按距离将对象进行排序，从距离最远的对象开始渲染，最后渲染距离最近的对象。天空盒在所有不透明对象和所有透明对象之间绘制。</p><ul><li><p>RenderType 标签 RenderType标签将着色器分为几个预定义的组，例如，不透明的着色器，或经过 Alpha测试的着色器等等。着色器替换将使用该标签，在某些情况下还用于产生摄像机的深度纹理。</p></li><li><p>DisableBatching 标签</p></li></ul><p>使用绘制调用批处理时，一些着色器（主要是进行对象空间顶点变形的着色器）不起作用，这是因为批处理会将所有几何体转换为世界空间，所以“对象空间”丢失。</p><p>可使用 DisableBatching标签来指示这一情况。有三个可能的值：“True”（始终对此着色器禁用批处理）、“False”（不禁用批处理；这是默认值）和“LODFading”（当LOD 淡化处于激活状态时禁用批处理；主要用于树）。</p><p><strong>不起作用的情况下，禁用提高性能？</strong></p><ul><li><p>ForceNoShadowCasting 标签 如果提供了 ForceNoShadowCasting标签并且值为“True”，则使用该子着色器渲染的对象绝不会投射阴影。对透明对象使用着色器替换并且不希望从其他子着色器继承阴影通道时，这非常有用。</p></li><li><p>IgnoreProjector 标签</p></li></ul><p>如果提供了 IgnoreProjector标签并且值为“True”，则使用此着色器的对象不会受到投影器的影响。这对半透明对象非常有用，因为投影器无法影响它们。</p><ul><li>CanUseSpriteAtlas 标签</li></ul><p>如果着色器用于精灵，请将 CanUseSpriteAtlas标签设置为“False”，这样在精灵打包到图集内时，该标签将不起作用。（精灵打包器(Sprite Packer)。</p><ul><li>PreviewType 标签</li></ul><p>PreviewType指示材质检视面板预览应如何显示材质。默认情况下，材质显示为球体，但也可以将PreviewType 设置为“Plane”（将显示为2D）或“Skybox”（将显示为天空盒）。</p><h3 id="fallback">Fallback</h3><p>在所有子着色器的后面可定义Fallback。基本上就是说，“如果没有任何子着色器能够在此硬件上运行，则尝试使用另一个着色器中的子着色器”。</p><pre><code> Fallback "name" //或者 // Fallback Off</code></pre><h3 id="customeditor">CustomEditor</h3><h3 id="shaderlab其他命令">ShaderLab：其他命令</h3><p>Category是一种逻辑分组，其中包含属于该分组的所有命令。这主要用于“继承”渲染状态。例如，您的着色器可能有多个子着色器，并且其中每个子着色器都需要关闭雾效、将混合设置为附加等，便可为此使用Category：</p><pre><code>Shader "example" {Category {    Fog { Mode Off }    Blend One One    SubShader {        // ...    }    SubShader {        // ...    }    // ...}}</code></pre><p><strong>Category 代码块仅影响着色器解析，效果完全等同于将 Category中设置的任意状态“粘贴”到 Category下面的所有代码块中。这完全不会影响着色器执行速度。</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/6.zhao-se-qi-lei-xing-de-jing-du/"/>
      <url>/2022/08/10/unity/shader/6.zhao-se-qi-lei-xing-de-jing-du/</url>
      
        <content type="html"><![CDATA[<h1 id="着色器数据类型和精度">着色器数据类型和精度</h1><p>Unity 中的标准着色器语言为 HLSL，支持一般 HLSL 数据类型。但是，Unity对 HLSL 类型有一些补充，特别是为了在移动平台上提供更好的支持。</p><h2 id="基本数据类型">基本数据类型</h2><p>着色器中的大多数计算是对浮点数（在 C# 等常规编程语言中为float）进行的。浮点类型有几种变体：float、half 和fixed（以及它们的矢量/矩阵变体，比如 half3 和float4x4）。这些类型的精度不同（因此性能或功耗也不同）：</p><h3 id="高精度float">高精度：float</h3><p>最高精度浮点值；一般是 32 位（就像常规编程语言中的 float）。 完整的float精度通常用于世界空间位置、纹理坐标或涉及复杂函数（如三角函数或幂/取幂）的标量计算。</p><h3 id="中等精度half">中等精度：half</h3><p>中等精度浮点值；通常为 16 位（范围为 –60000 至 +60000，精度约为 3位小数）。半精度对于短矢量、方向、对象空间位置、高动态范围颜色非常有用。</p><h3 id="低精度fixed">低精度：fixed</h3><p>最低精度的定点值。通常是 11 位，<strong>范围从 –2.0 到 +2.0，精度为1/256</strong>。固定精度对于常规颜色（通常存储在常规纹理中）以及对它们执行简单运算非常有用。</p><h3 id="整数数据类型">整数数据类型</h3><p>整数（int数据类型）通常用作循环计数器或数组索引。为此，它们通常可以在各种平台上正常工作。</p><p>根据平台的不同，GPU 可能不支持整数类型。例如，Direct3D 9 和 OpenGL ES2.0 GPU仅对浮点数据进行运算，并且可以使用相当复杂的浮点数学指令来模拟简单的整数表达式（涉及位运算或逻辑运算）。Direct3D 11、OpenGL ES 3、Metal和其他现代平台都对整数数据类型有适当的支持，因此使用位移位和位屏蔽可以按预期工作。</p><h3 id="复合矢量矩阵类型">复合矢量/矩阵类型</h3><p>HLSL 具有从基本类型创建的内置矢量和矩阵类型。例如，float3 是一个 3D矢量，具有分量 .x、.y 和 .z，而 half4 是一个中等精度 4D 矢量，具有分量.x、.y、.z 和 .w。或者，可使用 .r、.g、.b 和 .a分量来对矢量编制索引，这在处理颜色时很有用。</p><p>矩阵类型以类似的方式构建；例如 float4x4 是一个 4x4变换矩阵。<strong>请注意，某些平台仅支持方形矩阵，最主要的是 OpenGL ES2.0</strong>。</p><h3 id="纹理采样器类型">纹理/采样器类型</h3><p>通常按照如下方式在 HLSL 代码中声明纹理：</p><pre><code>sampler2D _MainTex;samplerCUBE _Cubemap;</code></pre><p>对于移动平台，这些将转换为“低精度采样器”，即预期纹理应具有低精度数据。如果您知道纹理包含HDR 颜色，则可能需要使用半精度采样器：</p><pre><code>sampler2D_half _MainTex;samplerCUBE_half _Cubemap;</code></pre><p>或者，如果纹理包含完整浮点精度数据（例如<code>深度纹理</code>），请使用完整精度采样器：</p><pre><code>sampler2D_float _MainTex;samplerCUBE_float _Cubemap;</code></pre><h3 id="精度硬件支持和性能">精度、硬件支持和性能</h3><p>使用 <code>float/half/fixed</code> 数据类型的一个难题是：<strong>PCGPU 始终为高精度</strong>。也就是说，对于所有 PC (Windows/Mac/Linux)GPU，在着色器中编写 float、half 还是 fixed 数据类型都无关紧要。这些 GPU将始终以 32 位浮点精度来计算所有数据。</p><p>仅当目标平台是移动端 GPU 时，half 和 fixed类型才变得重要，在这种情况下，这些类型主要面临功耗（有时候是性能）约束。<strong>请记住，要确认是否遇到精度/数值问题，必须在移动设备上测试着色器</strong>。</p><p>即使在移动端 GPU 上，不同的精度支持也会因 GPU产品系列而异。下面概述了个<strong>每个移动端 GPU产品系列</strong>如何处理每个浮点类型（以用于该产品系列的位数来表示）：</p><h2 id="使用采样器状态">使用采样器状态</h2><h3 id="耦合的纹理和采样器">耦合的纹理和采样器</h3><p>大多数情况下，在着色器采样纹理时，纹理采样状态来自纹理设置；本质上。纹理和采样器耦合在一起。使用 DX9 风格的着色器语法时，这是默认行为：</p><pre><code>sampler2D _MainTex;// ...half4 color = tex2D(_MainTex, uv);</code></pre><p>使用 HLSL 关键字 sampler2D、sampler3D 和 samplerCUBE可声明纹理和采样器。 大部分情况下，这是您想要的结果，而且在较旧的图形API (OpenGL ES) 中，这是唯一受支持的选项。</p><h3 id="单独的纹理和采样器">单独的纹理和采样器</h3><p>很多图形 API 和 GPU都允许使用的采样器数量少于纹理，而耦合的纹理+采样器语法可能不允许编写更复杂的着色器。例如，Direct3D11 允许在单个着色器中最多使用 128 个纹理，但最多仅允许使用 16 个采样器。Unity 允许使用 DX11 风格的 HLSL语法来声明纹理和采样器，但需要通过一个特殊的命名约定来让它们匹配：名称为“sampler”+TextureName格式的采样器将从该纹理中获取采样状态。 以上部分中的着色器代码片段可以用DX11 风格的 HLSL 语法重写，并且也会执行相同的操作：</p><pre><code>Texture2D _MainTex;SamplerState sampler_MainTex; //"sampler"+"_MainTex"// ...half4 color = _MainTex.Sample(sampler_MainTex, uv);</code></pre><p>但这样一来，就可以编写着色器来重复使用其他纹理中的采样器，同时采样多个纹理。在以下示例中，采样了三个纹理，但仅一个采样器用于所有这些纹理：</p><pre><code>Texture2D _MainTex;Texture2D _SecondTex;Texture2D _ThirdTex;SamplerState sampler_MainTex; //"sampler"+"_MainTex"// ...half4 color = _MainTex.Sample(sampler_MainTex, uv);color += _SecondTex.Sample(sampler_MainTex, uv);color += _ThirdTex.Sample(sampler_MainTex, uv);</code></pre><p>但是请注意，DX11 风格的 HLSL 语法在某些较旧的平台（例如，OpenGL ES2.0）上无效，请参阅着色语言以了解详细信息。您可能希望指定 #pragma target3.5（请参阅着色器编译目标）以避免较旧的平台使用着色器。 Unity提供了一些着色器宏帮助您使用这种“单独采样器”方法来声明和采样纹理，请参阅内置宏。以上示例可以采用所述的宏重写为下列形式：</p><pre><code>UNITY_DECLARE_TEX2D(_MainTex);UNITY_DECLARE_TEX2D_NOSAMPLER(_SecondTex);UNITY_DECLARE_TEX2D_NOSAMPLER(_ThirdTex);// ...half4 color = UNITY_SAMPLE_TEX2D(_MainTex, uv);color += UNITY_SAMPLE_TEX2D_SAMPLER(_SecondTex, _MainTex, uv);color += UNITY_SAMPLE_TEX2D_SAMPLER(_ThirdTex, _MainTex, uv);</code></pre><p><strong>以上代码将在 Unity 支持的所有平台上进行编译，但会在 DX9等旧平台上回退到使用三个采样器。</strong></p><h3 id="内联采样器状态">内联采样器状态</h3><p>除了能识别名为“sampler”+TextureName 的 HLSL SamplerState 对象，Unity还能识别采样器名称中的某些其他模式。这对于直接在着色器中声明简单硬编码采样状态很有用。例如：</p><pre><code>Texture2D _MainTex;SamplerState my_point_clamp_sampler;// ...half4 color = _MainTex.Sample(my_point_clamp_sampler, uv);</code></pre><p>名称“my_point_clamp_sampler”将被识别为应该使用点（距离最近）纹理过滤和钳制纹理包裹模式的采样器。</p><p>采样器名称被识别为“内联”采样器状态（全都不区分大小写）：</p><ul><li><p>“Point”、“Linear”或“Trilinear”（必需）设置纹理过滤模式。</p></li><li><p>“Clamp”、“Repeat”、“Mirror”或“MirrorOnce”（必需）设置纹理包裹模式。</p></li><li><p>可根据每个轴 (UVW)来指定包裹模式，例如"ClampU_RepeatV"。</p></li><li><p>“Compare”（可选）设置用于深度比较的采样器；与 HLSLSamplerComparisonState 类型和 SampleCmp/SampleCmpLevelZero函数配合使用。</p></li></ul><p>以下是分别使用 sampler_linear_repeat 和 sampler_point_repeat采样器状态进行纹理采样的示例，说明了如何通过名称控制过滤模式：</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/5.nei-zhi-zhao-se-qi-de-include-wen-jian/"/>
      <url>/2022/08/10/unity/shader/5.nei-zhi-zhao-se-qi-de-include-wen-jian/</url>
      
        <content type="html"><![CDATA[<h1 id="unity内置的包含文件">Unity内置的包含文件</h1><blockquote><p>appdata_full?</p></blockquote><p>通过在 <code>Cg/HLSL</code>代码块中，使用<code>#include</code>指令来完成包含。</p><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>CGPROGRAM</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include</span><span class="im">"UnityCG.cginc"</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="co">// ...</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>ENDCG</span></code></pre></div><p>Unity 中着色器<code>include 文件</code> 采用 <code>.cginc</code>拓展名， 内置的着色器 include文件包括：</p><ul><li>HLSLSupport.cginc -_（自动包含）_用于跨平台着色器编译的 helper宏和定义。</li><li>UnityShaderVariables.cginc -_（自动包含）_常用的全局变量。</li><li>UnityCG.cginc - 常用的 helper 函数。</li><li>AutoLight.cginc -光照和阴影功能，例如表面着色器在内部使用此文件。</li><li>Lighting.cginc -标准表面着色器光照模型；当您编写表面着色器时会自动包含。</li><li>TerrainEngine.cginc - 地形和植被着色器的 helper 函数。</li></ul><h2 id="hlslsupport.cginc">HLSLSupport.cginc</h2><p>编译 CGPROGRAM 着色器时会自动包含此文件（但不会对 HLSLPROGRAM着色器包含此文件）。此文件声明各种预处理器宏以帮助进行多平台着色器开发。</p><h2 id="unityshadervariables.cginc">UnityShaderVariables.cginc</h2><p>编译 CGPROGRAM 着色器时会自动包含此文件（但不会对 HLSLPROGRAM着色器包含此文件）。此文件声明着色器中常用的各种内置全局变量。</p><h2 id="unitycg.cginc">UnityCG.cginc</h2><p>Unity 着色器中通常会包含此文件。此文件声明大量内置 helper函数和数据结构。</p><h3 id="unitycg.cginc-中的数据结构">UnityCG.cginc 中的数据结构</h3><ul><li>structappdata_base：顶点着色器输入，包含位置、法线和一个纹理坐标。</li><li>structappdata_tan：顶点着色器输入，包含位置、法线、切线和一个纹理坐标。</li><li>structappdata_full：顶点着色器输入，包含位置、法线、切线、顶点颜色和两个纹理坐标。</li><li>struct appdata_img: 顶点着色器输入，包含位置和一个纹理坐标。</li></ul><h2 id="预定义的着色器预处理器宏">预定义的着色器预处理器宏</h2><p>目标平台</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">宏：</th><th style="text-align: left;">目标平台：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">SHADER_API_D3D11</td><td style="text-align: left;">Direct3D 11</td></tr><tr class="even"><td style="text-align: left;">SHADER_API_GLCORE</td><td style="text-align: left;">桌面端 OpenGL“核心”(GL 3/4)</td></tr><tr class="odd"><td style="text-align: left;">SHADER_API_GLES</td><td style="text-align: left;">OpenGL ES 2.0</td></tr><tr class="even"><td style="text-align: left;">SHADER_API_GLES3</td><td style="text-align: left;">OpenGL ES 3.0/3.1</td></tr><tr class="odd"><td style="text-align: left;">SHADER_API_METAL</td><td style="text-align: left;">iOS/Mac Metal</td></tr><tr class="even"><td style="text-align: left;">SHADER_API_VULKAN</td><td style="text-align: left;">Vulkan</td></tr><tr class="odd"><td style="text-align: left;">SHADER_API_D3D11_9X</td><td style="text-align: left;">适用于通用 Windows 平台的 Direct3D11“功能级别 9.x”目标</td></tr><tr class="even"><td style="text-align: left;">SHADER_API_PS4</td><td style="text-align: left;">PlayStation 4。也定义了SHADER_API_PSSL。</td></tr><tr class="odd"><td style="text-align: left;">SHADER_API_XBOXONE</td><td style="text-align: left;">Xbox One</td></tr></tbody></table><p><strong>SHADER_API_MOBILE</strong>是针对所有常规移动平台（GLES、GLES3、METAL）定义的。</p><p>此外，当目标着色语言为 GLSL 时，还会定义 SHADER_TARGET_GLSL（对于OpenGL/GLES 平台来说始终会定义）。</p><h3 id="着色器目标模型">着色器目标模型</h3><p>SHADER_TARGET 被定义为与着色器目标编译模型匹配的数值（即匹配 #pragmatarget 指令）。例如，当编译到着色器模型 3.0 时，SHADER_TARGET 为30。您可以在着色器代码中使用此宏来进行条件检查。例如：</p><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp"># if SHADER_TARGET &lt; 30</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 低于着色器模型 3.0：</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 着色器功能非常有限，执行近似操作</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="pp"># else</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 不错的功能，执行更高级的任务</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="pp"># endif</span></span></code></pre></div><h3 id="unity-版本">Unity 版本</h3><p>UNITY_VERSION 包含 Unity 版本的数值。例如，对于 Unity5.0.1，UNITY_VERSION 为501。如果您需要编写使用不同着色器内置功能的着色器，则可以将其用于版本比较。例如，#ifUNITY_VERSION &gt;= 500 预处理器检查仅在版本为 5.0.0或更高时可以通过</p><h3 id="编译的着色器阶段">编译的着色器阶段</h3><p>编译每个着色器阶段时会定义预处理器宏SHADER_STAGE_VERTEX、SHADER_STAGE_FRAGMENT、SHADER_STAGE_DOMAIN、SHADER_STAGE_HULL、SHADER_STAGE_GEOMETRY或SHADER_STAGE_COMPUTE。<strong>通常，在像素着色器和计算着色器之间共享着色器代码时，这些宏非常有用，可以解决某些工作必须以略有不同的方式来完成的情况</strong>。</p><h3 id="平台差异-helper">平台差异 helper</h3><p><strong>不鼓励直接使用这些平台宏，因为它们并非始终有助于代码的未来验证</strong>。例如，如果您正在编写一个检查D3D11 的着色器，您可能希望确保在将来将这项检查扩展为包含 Vulkan。应改用Unity 定义的几个 helper 宏（在 HLSLSupport.cginc 中）：</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">宏：</th><th style="text-align: left;">用途：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">UNITY_BRANCH</td><td style="text-align: left;">在条件语句之前添加此宏，告知编译器应将其编译为实际分支。在HLSL 平台上扩展为 [branch]。</td></tr><tr class="even"><td style="text-align: left;">UNITY_FLATTEN</td><td style="text-align: left;">在条件语句之前添加此宏，告知编译器应该将其展平以避免实际的分支指令。在HLSL 平台上扩展为 [flatten]。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_NO_SCREENSPACE_SHADOWS</td><td style="text-align: left;">在不使用级联屏幕空间阴影贴图的平台（移动平台）上定义。</td></tr><tr class="even"><td style="text-align: left;">UNITY_NO_LINEAR_COLORSPACE</td><td style="text-align: left;">在不支持线性颜色空间的平台（移动平台）上定义。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_NO_RGBM</td><td style="text-align: left;">在不使用光照贴图 RGBM压缩的平台（移动平台）上定义。</td></tr><tr class="even"><td style="text-align: left;">UNITY_NO_DXT5nm</td><td style="text-align: left;">在不使用 DXT5nm法线贴图压缩的平台（移动平台）上定义。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_FRAMEBUFFER_FETCH_AVAILABLE</td><td style="text-align: left;">在可使用“帧缓冲颜色提取”功能的平台（通常为iOS 平台 - OpenGL ES 2.0、3.0 和 Metal）上定义。</td></tr><tr class="even"><td style="text-align: left;">UNITY_USE_RGBA_FOR_POINT_SHADOWS</td><td style="text-align: left;">在点光源阴影贴图使用具有编码深度的 RGBA纹理的平台（其他平台使用单通道浮点纹理）上定义。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_ATTEN_CHANNEL</td><td style="text-align: left;">定义光源衰减纹理的哪个通道包含数据；用于每像素光照代码。定义为“r”或“a”。</td></tr><tr class="even"><td style="text-align: left;">UNITY_HALF_TEXEL_OFFSET</td><td style="text-align: left;">在将纹理像素映射到像素时需要进行半纹素偏移调整的平台（例如Direct3D 9）上定义。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_UV_STARTS_AT_TOP</td><td style="text-align: left;">始终定义值为 1 或 0。值为 1表示在平台上的纹理之上的纹理 V 坐标为 0。Direct3D 类平台使用值 1；OpenGL类平台使用值 0。</td></tr><tr class="even"><td style="text-align: left;">UNITY_MIGHT_NOT_HAVE_DEPTH_Texture</td><td style="text-align: left;">如果平台可以通过手动将深度渲染到纹理中来模拟阴影贴图或深度纹理，则定义此宏。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_PROJ_COORD(a)</td><td style="text-align: left;">给定一个 4分量矢量，此宏返回一个适合投影纹理读取的纹理坐标。在大多数平台上，它直接返回给定值。</td></tr><tr class="even"><td style="text-align: left;">UNITY_NEAR_CLIP_VALUE</td><td style="text-align: left;">定义为近裁剪面的值。Direct3D 类平台使用0.0，而 OpenGL 类平台使用 –1.0。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_VPOS_TYPE</td><td style="text-align: left;">定义像素位置输入 (VPOS)所需的数据类型：D3D9 上为 float2，其他为 float4。</td></tr><tr class="even"><td style="text-align: left;">UNITY_CAN_COMPILE_TESSELLATION</td><td style="text-align: left;">在着色器编译器“理解”曲面细分着色器 HLSL语法时定义（当前仅限 D3D11）。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_INITIALIZE_OUTPUT(type,name)</td><td style="text-align: left;">将给定_类型_的变量_名称_初始化为零。</td></tr><tr class="even"><td style="text-align: left;">UNITY_COMPILER_HLSL,UNITY_COMPILER_HLSL2GLSL, UNITY_COMPILER_CG</td><td style="text-align: left;">指示正在使用哪个着色器编译器来编译着色器 -分别为：Microsoft 的 HLSL、HLSL 到 GLSL 转换器和 NVIDIA 的</td></tr></tbody></table><p>UNITY_REVERSED_Z - 在使用反转 Z 缓冲区的平台上定义。存储的 Z值的范围是 1 到 0，而不是 0 到 1。</p><h3 id="阴影贴图宏">阴影贴图宏</h3><p>根据平台的不同，声明和采样阴影贴图可能会有很大差异。Unity有几个宏可帮助解决这个问题： |宏： |用途： | |:-- |:-- ||UNITY_DECLARE_SHADOWMAP(tex)| 声明一个名为“tex”的阴影贴图纹理变量。 ||UNITY_SAMPLE_SHADOW(tex,uv)|在给定的“uv”坐标处采样阴影贴图纹理“tex”（XY 分量是纹理位置，Z分量是要比较的深度）。返回单个浮点值，阴影项的范围在 0 到 1 之间。 ||UNITY_SAMPLE_SHADOW_PROJ(tex,uv)|与上面类似，但是会读取投影阴影贴图。“uv”是一个 float4，所有其他分量除以.w 来执行查找。 |</p><p><strong>注意：并非所有显卡都支持阴影贴图。请使用SystemInfo.SupportsRenderTextureFormat 检查是否支持。</strong></p><h3 id="常量缓冲区宏">常量缓冲区宏</h3><p>Direct3D 11 将所有着色器变量分组为“常量缓冲区”。Unity的大多数内置变量已经分组，但对于您自己的着色器中的变量，更加理想的做法是，根据预期的更新频率将它们放入单独的常量缓冲区。对此，请使用 CBUFFER_START(name) 和 CBUFFER_END 宏：</p><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>CBUFFER_START<span class="op">(</span>MyRarelyUpdatedVariables<span class="op">)</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    float4 _SomeGlobalValue<span class="op">;</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>CBUFFER_END</span></code></pre></div><h3 id="纹理采样器声明宏">纹理/采样器声明宏</h3><p>通常，在着色器代码中使用 texture2D 来声明纹理和采样器对。但是在某些平台（例如 DX11）上，纹理和采样器是单独的游戏对象，并且可能的采样器最大数量非常有限。Unity 有一些宏来声明没有采样器的纹理，并使用另一个纹理中的采样器对纹理进行采样。如果您遇到采样器限制，并且知道几个纹理实际上可以共享同一个采样器（采样器定义纹理过滤和包裹模式），请使用这些宏。</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">宏：</th><th style="text-align: left;">用途：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">UNITY_DECLARE_TEX2D(name)</td><td style="text-align: left;">声明纹理和采样器对。</td></tr><tr class="even"><td style="text-align: left;">UNITY_DECLARE_TEX2D_NOSAMPLER(name)</td><td style="text-align: left;">声明不含采样器的纹理。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_DECLARE_TEX2DARRAY(name)</td><td style="text-align: left;">声明纹理数组采样器变量。</td></tr><tr class="even"><td style="text-align: left;">UNITY_SAMPLE_TEX2D(name,uv)</td><td style="text-align: left;">使用给定的纹理坐标从纹理和采样器对中采样。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_SAMPLE_TEX2D_SAMPLER(name,samplername,uv)</td><td style="text-align: left;">使用另一个纹理中的采样器(samplername)，从纹理 (name) 中采样。</td></tr><tr class="even"><td style="text-align: left;">UNITY_SAMPLE_TEX2DARRAY(name,uv)</td><td style="text-align: left;">从具有 float3 UV 的纹理数组中采样；坐标的z 分量是数组元素索引。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_SAMPLE_TEX2DARRAY_LOD(name,uv,lod)</td><td style="text-align: left;">从具有显式 Mipmap级别的纹理数组中采样。</td></tr></tbody></table><h3 id="表面着色器通道指示符">表面着色器通道指示符</h3><p>编译表面着色器时，表面着色器会为各种通道生成大量代码以产生光照。编译每个通道时，将定义以下宏之一：</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">宏：</th><th style="text-align: left;">用途：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">UNITY_PASS_FORWARDBASE</td><td style="text-align: left;">前向渲染基础通道（主方向光、光照贴图和SH）。</td></tr><tr class="even"><td style="text-align: left;">UNITY_PASS_FORWARDADD</td><td style="text-align: left;">前向渲染附加通道（每个通道一个光源）。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_PASS_DEFERRED</td><td style="text-align: left;">延迟着色通道（渲染 G 缓冲区）。</td></tr><tr class="even"><td style="text-align: left;">UNITY_PASS_SHADOWCASTER</td><td style="text-align: left;">阴影投射物和深度纹理渲染通道。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_PASS_PREPASSBASE</td><td style="text-align: left;">旧版延迟光照基础通道（渲染法线和镜面反射指数）。</td></tr><tr class="even"><td style="text-align: left;">UNITY_PASS_PREPASSFINAL</td><td style="text-align: left;">旧版延迟光照最终通道（应用光照和纹理）。</td></tr></tbody></table><h3 id="禁用自动升级">禁用自动升级</h3><p>UNITY_SHADER_NO_UPGRADE 允许您禁止 Unity自动升级或修改着色器文件。</p><h2 id="内置着色器-helper-函数">内置着色器 helper 函数</h2><h3 id="顶点变换函数">顶点变换函数</h3><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">功能：</th><th style="text-align: left;">描述：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">float4 UnityObjectToClipPos(float3pos)</td><td style="text-align: left;">将对象空间中的点变换到齐次坐标中的摄像机裁剪空间。这等效于mul(UNITY_MATRIX_MVP, float4(pos, 1.0))，应该在适当的位置使用。</td></tr><tr class="even"><td style="text-align: left;">float3 UnityObjectToViewPos(float3pos)</td><td style="text-align: left;">将对象空间中的点变换到视图空间。这等效于<strong>mul(UNITY_MATRIX_MV, float4(pos,1.0)).xyz</strong>，应该在适当的位置使用。</td></tr></tbody></table><h3 id="unitycg.cginc-中的通用-helper-函数">UnityCG.cginc 中的通用helper 函数</h3><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">功能：</th><th style="text-align: left;">描述：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">float3 WorldSpaceViewDir (float4 v)</td><td style="text-align: left;">返回从给定对象空间顶点位置朝向摄像机的世界空间方向（<strong>未标准化</strong>）。</td></tr><tr class="even"><td style="text-align: left;">float3 ObjSpaceViewDir (float4 v)</td><td style="text-align: left;">返回从给定对象空间顶点位置朝向摄像机的对象空间方向（<strong>未标准化</strong>）。</td></tr><tr class="odd"><td style="text-align: left;">float2 ParallaxOffset (half h, halfheight, half3 viewDir)</td><td style="text-align: left;">计算视差法线贴图的 UV 偏移。</td></tr><tr class="even"><td style="text-align: left;">fixed Luminance (fixed3 c)</td><td style="text-align: left;">将颜色转换为亮度（灰阶）。</td></tr><tr class="odd"><td style="text-align: left;">fixed3 DecodeLightmap (fixed4 color)</td><td style="text-align: left;">从 Unity 光照贴图（RGBM 或dLDR，具体取决于平台）解码颜色。</td></tr><tr class="even"><td style="text-align: left;">float4 EncodeFloatRGBA (float v)</td><td style="text-align: left;">将 [0..1) 范围浮点数编码为 RGBA颜色，用于存储在低精度渲染目标中。</td></tr><tr class="odd"><td style="text-align: left;">float DecodeFloatRGBA (float4 enc)</td><td style="text-align: left;">将 RGBA 颜色解码为浮点数。</td></tr><tr class="even"><td style="text-align: left;">float2 EncodeFloatRG (float v)</td><td style="text-align: left;">将 [0..1) 范围浮点数编码为 float2。</td></tr><tr class="odd"><td style="text-align: left;">float DecodeFloatRG (float2 enc)</td><td style="text-align: left;">解码先前编码的 RG 浮点数。</td></tr><tr class="even"><td style="text-align: left;">float2 EncodeViewNormalStereo (float3n)</td><td style="text-align: left;">将视图空间法线编码为 0 到 1范围内的两个数字。</td></tr><tr class="odd"><td style="text-align: left;">float3 DecodeViewNormalStereo (float4enc4)</td><td style="text-align: left;">从 enc4.xy 解码视图空间法线。</td></tr></tbody></table><h3 id="unitycg.cginc-中的前向渲染-helper-函数">UnityCG.cginc中的前向渲染 helper 函数</h3><p><strong>仅当使用前向渲染（ForwardBase 或 ForwardAdd通道类型）时，这些函数才有用。</strong> |功能： |描述： | |:-- |:-- ||float3 WorldSpaceLightDir (float4 v)|根据给定的对象空间顶点位置计算朝向光源的世界空间方向（<strong>未标准化</strong>）。| |float3 ObjSpaceLightDir (float4 v)|根据给定对象空间顶点位置计算朝向光源的对象空间方向（<strong>未标准化</strong>）。| |float3 Shade4PointLights (...)|计算四个点光源的光照，将光源数据紧密打包到矢量中。前向渲染使用它来计算每顶点光照。|</p><h3 id="unitycg.cginc-中的屏幕空间-helper-函数">UnityCG.cginc中的屏幕空间 helper 函数</h3><p>以下 helper 函数可计算用于采样屏幕空间纹理的坐标。它们返回float4，其中用于纹理采样的最终坐标可以通过透视除法（例如xy/w）计算得出。</p><p>这些函数还处理渲染纹理坐标中的平台差异。</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">功能：</th><th style="text-align: left;">描述：</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">float4 ComputeScreenPos (float4clipPos)</td><td style="text-align: left;">计算用于执行屏幕空间贴图纹理采样的纹理坐标。输入是裁剪空间位置。</td></tr><tr class="even"><td style="text-align: left;">float4 ComputeGrabScreenPos (float4clipPos)</td><td style="text-align: left;">计算用于 <code>GrabPass</code>纹理采样的纹理坐标。输入是裁剪空间位置。</td></tr></tbody></table><h3 id="unitycg.cginc-中的顶点光照-helper-函数">UnityCG.cginc中的顶点光照 helper 函数</h3><p><strong>仅当使用每顶点光照着色器（“Vertex”通道类型）时，这些函数才有用。</strong></p><p>float3 ShadeVertexLights (float4 vertex, float3 normal) :根据给定的对象空间位置和法线计算四个每顶点光源和环境光的光照。</p><h2 id="内置着色器变量">内置着色器变量</h2><p>Unity为着色器提供了一些内置的全局变量：当前对象的变换矩阵、光源参数、当前时间等等。就像任何其他变量一样，可在着色器程序中使用这些变量，唯一的区别是不必声明它们，因为它们都是在自动包含的UnityShaderVariables.cginc include 文件中声明的。</p><h3 id="变换">变换</h3><p>所有这些矩阵都是 float4x4 类型。</p><table><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">UNITY_MATRIX_MVP</td><td style="text-align: left;">当前模型 * 视图 * 投影矩阵。</td></tr><tr class="even"><td style="text-align: left;">UNITY_MATRIX_MV</td><td style="text-align: left;">当前模型 * 视图矩阵。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_MATRIX_V</td><td style="text-align: left;">当前视图矩阵。</td></tr><tr class="even"><td style="text-align: left;">UNITY_MATRIX_P</td><td style="text-align: left;">当前投影矩阵。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_MATRIX_VP</td><td style="text-align: left;">当前视图 * 投影矩阵。</td></tr><tr class="even"><td style="text-align: left;">UNITY_MATRIX_T_MV</td><td style="text-align: left;">模型转置 * 视图矩阵。</td></tr><tr class="odd"><td style="text-align: left;">UNITY_MATRIX_IT_MV</td><td style="text-align: left;">模型逆转置 * 视图矩阵。</td></tr><tr class="even"><td style="text-align: left;"><strong>unity_ObjectToWorld</strong></td><td style="text-align: left;">当前模型矩阵。</td></tr><tr class="odd"><td style="text-align: left;"><strong>unity_WorldToObject</strong></td><td style="text-align: left;">当前世界矩阵的逆矩阵。</td></tr></tbody></table><h3 id="摄像机和屏幕">摄像机和屏幕</h3><p>这些变量将对应于正在渲染的摄像机。例如，在阴影贴图渲染中，它们仍将引用摄像机组件值，而不是用于阴影贴图投影的“虚拟摄像机”。</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">_WorldSpaceCameraPos</td><td style="text-align: left;">float3</td><td style="text-align: left;">摄像机的世界空间位置。</td></tr><tr class="even"><td style="text-align: left;">_ProjectionParams</td><td style="text-align: left;">float4</td><td style="text-align: left;">x 是1.0（如果当前使用<code>翻转投影矩阵</code>进行渲染，则为 –1.0），y是摄像机的近平面，z 是摄像机的远平面，w 是远平面的倒数。</td></tr><tr class="odd"><td style="text-align: left;">_ScreenParams</td><td style="text-align: left;">float4</td><td style="text-align: left;">x是摄像机目标纹理的宽度（以像素为单位），y是摄像机目标纹理的高度（以像素为单位），z 是 1.0 + 1.0/宽度，w 为 1.0 +1.0/高度。</td></tr><tr class="even"><td style="text-align: left;">_ZBufferParams</td><td style="text-align: left;">float4</td><td style="text-align: left;">用于线性化 Z 缓冲区值。x 是 (1-远/近)，y是 (远/近)，z 是 (x/远)，w 是 (y/远)。</td></tr><tr class="odd"><td style="text-align: left;">unity_OrthoParams</td><td style="text-align: left;">float4</td><td style="text-align: left;">x 是正交摄像机的宽度，y是正交摄像机的高度，z 未使用，<strong>w 在摄像机为正交模式时是1.0，而在摄像机为透视模式时是 0.0。</strong></td></tr><tr class="even"><td style="text-align: left;">unity_CameraProjection</td><td style="text-align: left;">float4x4</td><td style="text-align: left;">摄像机的投影矩阵。</td></tr><tr class="odd"><td style="text-align: left;">unity_CameraInvProjection</td><td style="text-align: left;">float4x4</td><td style="text-align: left;">摄像机投影矩阵的逆矩阵。</td></tr><tr class="even"><td style="text-align: left;">unity_CameraWorldClipPlanes[6]</td><td style="text-align: left;">float4</td><td style="text-align: left;">摄像机视锥体平面世界空间方程，按以下顺序：左、右、底、顶、近、远。</td></tr></tbody></table><h3 id="时间">时间</h3><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">_Time</td><td style="text-align: left;">float4</td><td style="text-align: left;">自关卡加载以来的时间 (t/20, t, t<em>2,t</em>3)，用于将着色器中的内容动画化。</td></tr><tr class="even"><td style="text-align: left;">_SinTime</td><td style="text-align: left;">float4</td><td style="text-align: left;">时间正弦：(t/8, t/4, t/2, t)。</td></tr><tr class="odd"><td style="text-align: left;">_CosTime</td><td style="text-align: left;">float4</td><td style="text-align: left;">时间余弦：(t/8, t/4, t/2, t)。</td></tr><tr class="even"><td style="text-align: left;">unity_DeltaTime</td><td style="text-align: left;">float4</td><td style="text-align: left;">增量时间：(dt, 1/dt, smoothDt,1/smoothDt)。</td></tr></tbody></table><h3 id="光照">光照</h3><p>光源参数以不同的方式传递给着色器，具体取决于使用哪个<strong>渲染路径</strong>，以及着色器中使用哪种<strong>光源模式通道标签</strong>。</p><h4 id="前向渲染forwardbase-和-forwardadd-通道类型">前向渲染（ForwardBase 和ForwardAdd 通道类型）：</h4><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">_LightColor0（在 Lighting.cginc中声明）</td><td style="text-align: left;">fixed4</td><td style="text-align: left;">光源颜色。</td></tr><tr class="even"><td style="text-align: left;">_WorldSpaceLightPos0</td><td style="text-align: left;">float4</td><td style="text-align: left;">方向光：（世界空间方向，0）。其他光源：（世界空间位置，1）。</td></tr><tr class="odd"><td style="text-align: left;">_LightMatrix0（在 AutoLight.cginc中声明）</td><td style="text-align: left;">float4x4</td><td style="text-align: left;">世界/光源矩阵。用于对剪影和衰减纹理进行采样。</td></tr><tr class="even"><td style="text-align: left;">unity_4LightPosX0、unity_4LightPosY0、unity_4LightPosZ0</td><td style="text-align: left;">float4</td><td style="text-align: left;">（仅限 ForwardBase通道）前四个非重要点光源的世界空间位置。</td></tr><tr class="odd"><td style="text-align: left;">unity_4LightAtten0</td><td style="text-align: left;">float4</td><td style="text-align: left;">（仅限 ForwardBase通道）前四个非重要点光源的衰减因子。</td></tr><tr class="even"><td style="text-align: left;">unity_LightColor</td><td style="text-align: left;">half4[4]</td><td style="text-align: left;">（仅限 ForwardBase通道）前四个非重要点光源的颜色。</td></tr><tr class="odd"><td style="text-align: left;">unity_WorldToShadow</td><td style="text-align: left;">float4x4[4]</td><td style="text-align: left;">世界/阴影矩阵。聚光灯的一个矩阵，方向光级联最多有四个矩阵。</td></tr></tbody></table><h4 id="延迟着色和延迟光照在光照通道着色器中使用全部在-unitydeferredlibrary.cginc-中声明">延迟着色和延迟光照，在光照通道着色器中使用（全部在UnityDeferredLibrary.cginc 中声明）：</h4><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">_LightColor</td><td style="text-align: left;">float4</td><td style="text-align: left;">光源颜色。</td></tr><tr class="even"><td style="text-align: left;">_LightMatrix0</td><td style="text-align: left;">float4x4</td><td style="text-align: left;">世界/光源矩阵。用于对剪影和衰减纹理进行采样。</td></tr><tr class="odd"><td style="text-align: left;">unity_WorldToShadow</td><td style="text-align: left;">float4x4[4]</td><td style="text-align: left;">世界/阴影矩阵。聚光灯的一个矩阵，方向光级联最多有四个矩阵。</td></tr></tbody></table><p>为 ForwardBase、PrePassFinal 和 Deferred 通道类型设置了球谐函数系数（由环境光和光照探针使用）。这些系数包含由世界空间法线求值的三阶 SH函数（请参阅 UnityCG.cginc 中的 ShadeSH9）。 这些变量都是 half4类型、unity_SHAr 和类似名称。</p><h4 id="顶点光照渲染vertex-通道类型">顶点光照渲染（Vertex通道类型）：</h4><p>最多可为 Vertex 通道类型设置 8个光源；始终从最亮的光源开始排序。因此，如果您希望一次渲染受两个光源影响的对象，可直接采用数组中前两个条目。如果影响对象的光源数量少于 8，则其余光源的颜色将设置为黑色。</p><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">unity_LightColor</td><td style="text-align: left;">half4[8]</td><td style="text-align: left;">光源颜色。</td></tr><tr class="even"><td style="text-align: left;">unity_LightPosition</td><td style="text-align: left;">float4[8]</td><td style="text-align: left;">视图空间光源位置。方向光为(-direction,0)；点光源/聚光灯为 (position,1)。</td></tr><tr class="odd"><td style="text-align: left;">unity_LightAtten</td><td style="text-align: left;">half4[8]</td><td style="text-align: left;">光源衰减因子。x 是 cos(spotAngle/2) 或–1（非聚光灯）；<em>y</em> 是1/cos(spotAngle/4) 或1（非聚光灯）；<em>z</em> 是二次衰减；<em>w</em> 是平方光源范围。</td></tr><tr class="even"><td style="text-align: left;">unity_SpotDirection</td><td style="text-align: left;">float4[8]</td><td style="text-align: left;">视图空间聚光灯位置；非聚光灯为(0,0,1,0)。</td></tr></tbody></table><h3 id="雾效和环境光">雾效和环境光</h3><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">unity_AmbientSky</td><td style="text-align: left;">fixed4</td><td style="text-align: left;">梯度环境光照情况下的天空环境光照颜色。</td></tr><tr class="even"><td style="text-align: left;">unity_AmbientEquator</td><td style="text-align: left;">fixed4</td><td style="text-align: left;">梯度环境光照情况下的赤道环境光照颜色。</td></tr><tr class="odd"><td style="text-align: left;">unity_AmbientGround</td><td style="text-align: left;">fixed4</td><td style="text-align: left;">梯度环境光照情况下的地面环境光照颜色。</td></tr><tr class="even"><td style="text-align: left;">UNITY_LIGHTMODEL_AMBIENT</td><td style="text-align: left;">fixed4</td><td style="text-align: left;">环境光照颜色（梯度环境情况下的天空颜色）。旧版变量。</td></tr><tr class="odd"><td style="text-align: left;">unity_FogColor</td><td style="text-align: left;">fixed4</td><td style="text-align: left;">雾效颜色。</td></tr><tr class="even"><td style="text-align: left;">unity_FogParams</td><td style="text-align: left;">float4</td><td style="text-align: left;">用于雾效计算的参数：(density /sqrt(ln(2))、density / ln(2)、–1/(end-start) 和 end/(end-start))。x 对于Exp2 雾模式很有用；<em>y</em> 对于 Exp 模式很有用，<em>z</em> 和 w 对于Linear 模式很有用。</td></tr></tbody></table><h3 id="其他">其他</h3><table><colgroup><col style="width: 33%"><col style="width: 33%"><col style="width: 33%"></colgroup><thead><tr class="header"><th style="text-align: left;">名称</th><th style="text-align: left;">类型</th><th style="text-align: left;">值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">unity_LODFade</td><td style="text-align: left;">float4</td><td style="text-align: left;">使用 LODGroup 时的细节级别淡入淡出。x为淡入淡出（0 到 1），<em>y</em> 为量化为 16 级的淡入淡出，<em>z</em> 和w 未使用。</td></tr><tr class="even"><td style="text-align: left;">_TextureSampleAdd</td><td style="text-align: left;">float4</td><td style="text-align: left;">根据所使用的纹理是 Alpha8 格式（值设置为(1,1,1,0)）还是不是该格式（值设置为 (0,0,0,0)）由 Unity 仅针对 UI自动设置。</td></tr></tbody></table><h2 id="多个着色器程序变体">多个着色器程序变体</h2><p>通常方便的做法是保持大部分着色器代码固定，但也允许生成稍微不同的着色器“变体”。这种变体通常称为“大型着色器”或“超级着色器”，实现的方式是针对每种情况使用不同的预处理器指令多次编译着色器代码。在 Unity 中，可通过向着色器代码片段中添加<code>#pragma multi_compile 或 #pragma shader_feature</code>指令来实现目的。这在表面着色器中也有效。 在运行时将从 Material关键字<code>（Material.EnableKeyword 和 DisableKeyword）</code>或全局着色器关键字<code>（Shader.EnableKeyword 和 DisableKeyword）</code>中选取适当的着色器变体。</p><h3 id="multi_compile-的工作方式">multi_compile 的工作方式</h3><p>如下指令：</p><pre><code># pragma multi_compile FANCY_STUFF_OFF FANCY_STUFF_ON</code></pre><p>将生成两个着色器变体，一个定义了 FANCY_STUFF_OFF，另一个定义了FANCY_STUFF_ON。在运行时，将根据“Material”或全局着色器关键字激活其中一个变体。如果这两个关键字均未启用，则将使用第一个（“off”）。</p><p>一行 multi_compile中可以有两个以上的关键字，例如，以下指令将生成四个着色器变体：</p><pre><code># pragma multi_compile SIMPLE_SHADING BETTER_SHADING GOOD_SHADING BEST_SHADING</code></pre><p>当任何名称为全下划线时，将生成未定义预处理器宏的着色器变体。这通常用于着色器功能，以避免使用多达两个关键字（请参阅下面的关键字限制说明）。例如，下面的指令将生成两个着色器变体；第一个变体未定义任何内容，第二个变体定义了FOO_ON：</p><h1 id="pragma-multi_compile-__-foo_on">pragma multi_compile __FOO_ON</h1><h3 id="shader_feature-与-multi_compile-之间的区别">shader_feature 与multi_compile 之间的区别</h3><p><code>#pragma shader_feature</code> 与<code>#pragma multi_compile</code> 非常类似，<strong>唯一的区别是shader_feature着色器的未使用变体不会包含在游戏构建中。因此，<code>shader_feature</code>对于将在材质上设置的关键字最合适，而 <code>multi_compile</code>对于将通过代码进行全局设置的关键字最合适。</strong></p><p>此外，它有一个只包含一个关键字的速记符号：</p><pre><code># pragma shader_feature FANCY_STUFF</code></pre><p>这只是 #pragma shader_feature _ FANCY_STUFF的快捷方式，即它会扩展为两个着色器变体（第一个没有定义；第二个有定义）。</p><h3 id="合并多个-multi_compile-行">合并多个 multi_compile 行</h3><p>可提供多个 multi_compile行，此情况下将针对所有可能的行组合来编译生成的着色器：</p><pre><code># pragma multi_compile A B C# pragma multi_compile D E</code></pre><p>此指令将为第一行产生三种变体，为第二行产生两种变体，或者总共产生六种着色器变体（A+D、B+D、C+D、A+E、B+E和 C+E）。</p><p>最简单的方法是将每个 multi_compile行视为控制单个着色器“功能”。<strong>请记住，着色器变体的总数会以这种方式急速增长</strong>。例如，十个带有两个选项的multi_compile“功能”总共将生成 1024 个着色器变体！</p><h3 id="关键字限制">关键字限制</h3><p>使用着色器变体时，请记住 Unity 中<strong>关键字数量上限是256，其中大约 60个保留供内部使用（因此降低了可用上限）</strong>。此外，关键字会在整个特定Unity项目中全局启用，因此在多个不同着色器中定义多个关键字时，请注意不要超过限制。</p><h3 id="内置-multi_compile-快捷方式">内置 multi_compile 快捷方式</h3><p>有几个“快捷方式”符号用于编译多个着色器变体；它们主要用于处理 Unity中不同的光照、阴影和光照贴图类型。请参阅渲染管线以了解详细信息。</p><pre><code>multi_compile_fwdbase 将编译 ForwardBase（前向渲染基础）通道类型需要的所有变体。这些变体处理不同的光照贴图类型以及开启或关闭阴影的主方向光。multi_compile_fwdadd 将编译 ForwardAdd（前向渲染附加）通道类型的变体。这将编译变体来处理方向光、聚光灯或点光源类型，以及它们带有剪影纹理的变体。multi_compile_fwdadd_fullshadows - 同上，但还能够让光源具有实时阴影。multi_compile_fog 扩展为多个变体以处理不同的雾效类型 (off/linear/exp/exp2)。</code></pre><p>大多数内置快捷方式都会产生许多着色器变体。如果您知道不需要某些变体，可通过使用#pragma skip_variants 来跳过这些变体的编译。例如：</p><pre><code># pragma multi_compile_fwdadd// 将跳过包含// "POINT" 或 "POINT_COOKIE" 的所有变体# pragma skip_variants POINT POINT_COOKIE</code></pre><p>着色器硬件变体</p><p>使用着色器变体的一个常见原因是创建可同时在单个目标平台（例如 OpenGLES）内的高端和低端硬件上高效运行的后备着色器或简化着色器。要为不同的硬件功能级别提供特别优化的变体集，可以使用着色器硬件变体。</p><p>要启用着色器硬件变体的生成，请添加 #pragma hardware_tier_variantsrenderer，其中 renderer 是着色器程序杂注的可用渲染平台之一。使用此#pragma，将为每个着色器生成 3个着色器变体，并忽略其他所有关键字。每个变体将定义以下指令之一：</p><pre><code>UNITY_HARDWARE_TIER1UNITY_HARDWARE_TIER2UNITY_HARDWARE_TIER3</code></pre><p>您可以使用它们为更低端或更高端硬件编写条件性回退或额外功能。在 Editor中，您可以使用 Graphics Emulation菜单测试任何层（允许您在每个层之间进行更改）。为了帮助尽可能降低这些变体的影响，播放器中只加载了一组着色器。此外，任何最终相同的着色器（例如，如果您只为TIER1 编写专用版本而其他所有版本都相同）将不占用磁盘上的任何额外空间。在加载时，Unity 将检查其正在使用的 GPU 并自动检测层值；如果未自动检测到GPU，它将默认为最高层。您可以通过设置 Shader.globalShaderHardwareTier来覆盖此层值，但必须在加载要更改的任何着色器之前完成此操作。加载着色器后，着色器将选择一组变体，此值将无效。一个良好的设置位置是在加载主场景之前的预加载场景中。</p><p><strong>请注意，这些着色器硬件层与播放器的 Quality设置无关，它们纯粹是从运行播放器的 GPU的相对功能中检测到的。</strong></p><p>平台着色器设置</p><p>除了调整不同硬件层的着色器代码之外，您可能还需要调整 Unity内部定义（例如，您可能希望在移动设备上强制使用级联阴影贴图）。您可以在<code>UnityEditor.Rendering.PlatformShaderSettings</code>文档中找到与此相关的详细信息，其中提供了按层覆盖的最新支持功能的列表。使用<code>UnityEditor.Rendering.EditorGraphicsSettings.SetShaderSettingsForPlatform</code>可根据平台按层调整硬件着色器设置。 <strong>请注意，如果设置为不同层的<code>PlatformShaderSetting</code> 不相同，则即使缺少<code>#pragma hardware_tier_variants</code>，也会为着色器生成层变体。</strong></p><h2 id="glsl-着色器程序">GLSL 着色器程序</h2><h2 id="着色器编译器">着色器编译器</h2><p>在 Unity 中，着色器程序是用 HLSL 语言的一个变种（也称为Cg，但对于大部分实际使用情况，这两种语言没有区别）编写的。目前，为了在不同平台之间实现最大程度的可移植性，请使用 DX9 风格的 HLSL编写程序（例如，使用 DX9 风格的 sampler2D 和 tex2D进行纹理采样，而不是使用 DX10 风格的 Texture2D、SamplerState 和tex.Sample）。</p><p>在内部将使用不同的着色器编译器来编译着色器程序：</p><ul><li>Windows 和 Microsoft 平台（DX11、DX12 和 Xbox One）全部使用Microsoft 的 HLSL 编译器（最新版本为 d3dcompiler_47）。</li><li>OpenGL Core、OpenGL ES 3、OpenGL ES 2.0 和 Metal <strong>使用Microsoft 的 HLSL，然后使用 HLSLcc 按字节代码转换为 GLSL 或Metal</strong>。</li><li>OpenGL ES 2.0 可以通过 hlsl2glslfork 和 glsl优化器进行源代码级别转换。这是通过添加 #pragma prefer_hlsl2glsl gles实现的</li><li>其他游戏主机平台使用其各自的编译器（例如，PS4 使用 PSSL）。</li><li>表面着色器使用 Cg 2.2 和 MojoShader 来完成代码生成分析步骤。</li></ul><p>如果确实需要确定正在使用哪个编译器（为了使用仅一种编译器支持的 HLSL语法，或解决编译器错误），可以使用预定义的着色器宏。例如，使用 HLSL编译器进行编译时设置 UNITY_COMPILER_HLSL（针对 D3D 或 GLCore/GLES3/GLES平台）；通过 hlsl2glsl 进行编译时设置 UNITY_COMPILER_HLSL2GLSL。</p><h2 id="着色器目标">着色器目标</h2><p>编写表面着色器或常规 着色器程序时，HLSL 源代码可以编译到不同“着色器模型”中。 为了支持使用更现代的 GPI功能，必须使用更高的着色器编译目标。<strong>注意：使用更高的着色器编译目标可能会阻止着色器在较旧的 GPU或平台上运行。</strong> 应使用 #pragma target 名称 指令或更具体的#pragma require 功能 … 指令来指示编译目标。例如：</p><pre><code># pragma target 3.5# pragma require integers 2darray instancing</code></pre><h3 id="默认编译目标">默认编译目标</h3><h3 id="支持的pragma-target名称">支持的“#pragma target”名称</h3><h3 id="支持的pragma-require名称">支持的“#pragma require”名称</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/4.xiang-ding-dian-cheng-xu-ti-gong-ding-dian-shu-ju/"/>
      <url>/2022/08/10/unity/shader/4.xiang-ding-dian-cheng-xu-ti-gong-ding-dian-shu-ju/</url>
      
        <content type="html"><![CDATA[<h1 id="向顶点程序提供顶点数据">向顶点程序提供顶点数据</h1><blockquote><p>切线 w 分量含义？</p></blockquote><p>对于 <code>Cg/HLSL</code> 顶点程序，网格顶点数据作为输入传递给顶点着色器函数。每个输入都需要有指定的<code>语义</code>：例如， <code>POSITION</code> 输入表示顶点位置，<code>NORMAL</code>表示顶点法线。 通常，顶点数据输入在结构中声明，而不是逐个列出。<code>UnityCG.cginc</code>文件中定义了几个常用的顶点结构：</p><ul><li><code>appdata_base</code> ： 位置、法线 和一个纹理坐标。</li><li><code>appdata_tan</code> ： 位置、切线、法线 和一个纹理坐标。</li><li><code>appdata_full</code> ： 位置、切线、法线 和四个纹理坐标。</li></ul><p>要访问不同的顶点数据，您需要自己声明 顶点结构，或者将输入参数添加到顶点着色器。顶点数据由 Cg/HLSL 语义标识，并且必须来自 以下列表：</p><ul><li>POSITION 是顶点位置，通常为 float3 或 float4。</li><li>NORMAL 是顶点法线，通常为 float3。</li><li>TEXCOORD0 是第一个 UV 坐标，通常为 float2、float3 或 float4。</li><li>TEXCOORD1、TEXCOORD2 和 TEXCOORD3 分别是第 2、第 3 和第 4 个 UV坐标。</li><li><strong>TANGENT 是切线矢量（用于法线贴图），通常为float4</strong>。</li><li>COLOR 是每顶点颜色，通常为 float4。</li></ul><p>当网格数据包含的分量少于顶点着色器输入所需的分量时，其余部分用零填充，但默认值为 1 的 .w分量除外。例如，网格纹理坐标 通常是仅包含 x 和 y 分量的 2D 矢量。如果顶点着色器使用 TEXCOORD0 语义声明一个 float4 输入，则顶点着色器接收的值将包含 (x,y,0,1)。</p><h3 id="可视化-uv">可视化 uv</h3><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Debug/UV 1"</span> <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>SubShader <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    Pass <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma vertex vert</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma fragment frag</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"UnityCG.cginc"</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点输入：位置、UV</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> appdata <span class="op">{</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            float4 vertex <span class="op">:</span> POSITION<span class="op">;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            float4 texcoord <span class="op">:</span> TEXCOORD0<span class="op">;</span> <span class="co">//第一组uv</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>            float4 uv <span class="op">:</span> TEXCOORD0<span class="op">;</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        v2f vert <span class="op">(</span>appdata v<span class="op">)</span> <span class="op">{</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>            v2f o<span class="op">;</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>v<span class="op">.</span>vertex <span class="op">);</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>uv <span class="op">=</span> float4<span class="op">(</span> v<span class="op">.</span>texcoord<span class="op">.</span>xy<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span> <span class="op">);</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> o<span class="op">;</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        half4 frag<span class="op">(</span> v2f i <span class="op">)</span> <span class="op">:</span> SV_Target <span class="op">{</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>            half4 c <span class="op">=</span> frac<span class="op">(</span> i<span class="op">.</span>uv <span class="op">);</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>any<span class="op">(</span>saturate<span class="op">(</span>i<span class="op">.</span>uv<span class="op">)</span> <span class="op">-</span> i<span class="op">.</span>uv<span class="op">))</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>                c<span class="op">.</span>b <span class="op">=</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> c<span class="op">;</span></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="可视化顶点颜色直接输出顶点的颜色">可视化顶点颜色(直接输出顶点的颜色)</h3><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Debug/Vertex color"</span> <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>SubShader <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    Pass <span class="op">{</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma vertex vert</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma fragment frag</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"UnityCG.cginc"</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点输入：位置、颜色</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> appdata <span class="op">{</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>            float4 vertex <span class="op">:</span> POSITION<span class="op">;</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            fixed4 color <span class="op">:</span> COLOR<span class="op">;</span>  <span class="co">// 顶点的颜色</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>            float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>            fixed4 color <span class="op">:</span> COLOR<span class="op">;</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        v2f vert <span class="op">(</span>appdata v<span class="op">)</span> <span class="op">{</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>            v2f o<span class="op">;</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>v<span class="op">.</span>vertex <span class="op">);</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>color <span class="op">=</span> v<span class="op">.</span>color<span class="op">;</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> o<span class="op">;</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>        fixed4 frag <span class="op">(</span>v2f i<span class="op">)</span> <span class="op">:</span> SV_Target <span class="op">{</span> <span class="cf">return</span> i<span class="op">.</span>color<span class="op">;</span> <span class="op">}</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="可视化法线">可视化法线</h3><p>以下着色器使用顶点位置和法线作为顶点着色器输入（在结构 appdata中定义）。法线的 X、Y 和 Z 分量可视化为 RGB 颜色。由于法线分量在 –1 到 1范围内，我们对这些分量进行缩放和偏置，使输出颜色可在 0 到 1范围内显示。</p><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Debug/Normals"</span> <span class="op">{</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>SubShader <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    Pass <span class="op">{</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma vertex vert</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma fragment frag</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"UnityCG.cginc"</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点输入：位置、法线</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> appdata <span class="op">{</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>            float4 vertex <span class="op">:</span> POSITION<span class="op">;</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>            float3 normal <span class="op">:</span> NORMAL<span class="op">;</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>            float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>            fixed4 color <span class="op">:</span> COLOR<span class="op">;</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        v2f vert <span class="op">(</span>appdata v<span class="op">)</span> <span class="op">{</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>            v2f o<span class="op">;</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>v<span class="op">.</span>vertex <span class="op">);</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>            <span class="co">// (-1, 1) 转换到 （0， 1）</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>color<span class="op">.</span>xyz <span class="op">=</span> v<span class="op">.</span>normal <span class="op">*</span> <span class="fl">0.5</span> <span class="op">+</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>color<span class="op">.</span>w <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> o<span class="op">;</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>        fixed4 frag <span class="op">(</span>v2f i<span class="op">)</span> <span class="op">:</span> SV_Target <span class="op">{</span> <span class="cf">return</span> i<span class="op">.</span>color<span class="op">;</span> <span class="op">}</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h3 id="可视化切线和副法线">可视化切线和副法线</h3><p>切线和副法线矢量用于法线贴图。在 Unity中，只有切线矢量存储在顶点中，而副法线是从法线值和切线值中推导出的。</p><div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Debug/Tangents"</span> <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>SubShader <span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    Pass <span class="op">{</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma vertex vert</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma fragment frag</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"UnityCG.cginc"</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点输入：位置、切线</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> appdata <span class="op">{</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            float4 vertex <span class="op">:</span> POSITION<span class="op">;</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            float4 tangent <span class="op">:</span> TANGENT<span class="op">;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>            float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>            fixed4 color <span class="op">:</span> COLOR<span class="op">;</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        v2f vert <span class="op">(</span>appdata v<span class="op">)</span> <span class="op">{</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>            v2f o<span class="op">;</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>v<span class="op">.</span>vertex <span class="op">);</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>color <span class="op">=</span> v<span class="op">.</span>tangent <span class="op">*</span> <span class="fl">0.5</span> <span class="op">+</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> o<span class="op">;</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>        fixed4 frag <span class="op">(</span>v2f i<span class="op">)</span> <span class="op">:</span> SV_Target <span class="op">{</span> <span class="cf">return</span> i<span class="op">.</span>color<span class="op">;</span> <span class="op">}</span></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Debug/Bitangents"</span> <span class="op">{</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>SubShader <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    Pass <span class="op">{</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        Fog <span class="op">{</span> Mode Off <span class="op">}</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma vertex vert</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma fragment frag</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"UnityCG.cginc"</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点输入：位置、法线、切线</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> appdata <span class="op">{</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>            float4 vertex <span class="op">:</span> POSITION<span class="op">;</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>            float3 normal <span class="op">:</span> NORMAL<span class="op">;</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>            float4 tangent <span class="op">:</span> TANGENT<span class="op">;</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>        <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>            float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>            float4 color <span class="op">:</span> COLOR<span class="op">;</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        v2f vert <span class="op">(</span>appdata v<span class="op">)</span> <span class="op">{</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>            v2f o<span class="op">;</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>v<span class="op">.</span>vertex <span class="op">);</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 三者垂直，计算双切线,</span></span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>            float3 bitangent <span class="op">=</span> cross<span class="op">(</span> v<span class="op">.</span>normal<span class="op">,</span> v<span class="op">.</span>tangent<span class="op">.</span>xyz <span class="op">)</span> <span class="op">*</span> v<span class="op">.</span>tangent<span class="op">.</span>w<span class="op">;</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>color<span class="op">.</span>xyz <span class="op">=</span> bitangent <span class="op">*</span> <span class="fl">0.5</span> <span class="op">+</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>            o<span class="op">.</span>color<span class="op">.</span>w <span class="op">=</span> <span class="fl">1.0</span><span class="op">;</span></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> o<span class="op">;</span></span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a>        fixed4 frag <span class="op">(</span>v2f i<span class="op">)</span> <span class="op">:</span> SV_Target <span class="op">{</span> <span class="cf">return</span> i<span class="op">.</span>color<span class="op">;</span> <span class="op">}</span></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/3.zhao-se-qi-shu-xing/"/>
      <url>/2022/08/10/unity/shader/3.zhao-se-qi-shu-xing/</url>
      
        <content type="html"><![CDATA[<h1 id="着色器属性">着色器属性</h1><h2 id="使用cghlsl-访问着色器属性">使用Cg/HLSL 访问着色器属性</h2><p>着色器在<code>Properties</code>代码块中声明材质属性。如果要在着色器程序中访问其中一些属性，则需要声明具有相同名称和匹配类型的<code>Cg/HLSL</code>变量。</p><p>着色器属性：</p><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="co">//形式：</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co">// Cg/HLSL变量名称 （"Inspector中显示的名称", 类型）= 默认值</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>_MyColor <span class="op">(</span><span class="st">"Some Color"</span><span class="op">,</span> Color<span class="op">)</span> <span class="op">=</span> <span class="op">(</span><span class="dv">1</span><span class="op">,</span><span class="dv">1</span><span class="op">,</span><span class="dv">1</span><span class="op">,</span><span class="dv">1</span><span class="op">)</span> </span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>_MyVector <span class="op">(</span><span class="st">"Some Vector"</span><span class="op">,</span> Vector<span class="op">)</span> <span class="op">=</span> <span class="op">(</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">,</span><span class="dv">0</span><span class="op">)</span> </span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>_MyFloat <span class="op">(</span><span class="st">"My float"</span><span class="op">,</span> Float<span class="op">)</span> <span class="op">=</span> <span class="fl">0.5</span> </span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>_MyTexture <span class="op">(</span><span class="st">"Texture"</span><span class="op">,</span> <span class="dv">2</span><span class="er">D</span><span class="op">)</span> <span class="op">=</span> <span class="st">"white"</span> <span class="op">{}</span> </span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>_MyCubemap <span class="op">(</span><span class="st">"Cubemap"</span><span class="op">,</span> CUBE<span class="op">)</span> <span class="op">=</span> <span class="st">""</span> <span class="op">{}</span></span></code></pre></div><p>Cg/HLSL 代码进行声明以供访问:</p><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>fixed4 _MyColor<span class="op">;</span> <span class="co">// 低精度类型对于颜色而言通常已经足够</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>float4 _MyVector<span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> _MyFloat<span class="op">;</span> </span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>sampler2D _MyTexture<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>samplerCUBE _MyCubemap<span class="op">;</span></span></code></pre></div><p>同时 Cg/HLSL 还可以接受 <strong>uniform</strong> 关键字，但该关键字不是必须的：</p><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>uniform float4 _MyColor<span class="op">;</span></span></code></pre></div><p>ShaderLab 中的属性类型以如下方式映射到 Cg/HLSL 变量类型：</p><ul><li>Color 和 Vector 属性映射到<strong>float4</strong>、<strong>half4</strong> 或<strong>fixed4</strong> 变量。</li><li>Range 和 Float 属性映射到<strong>float</strong>、<strong>half</strong> 或 <strong>fixed</strong>变量。</li><li>对于普通 (2D) 纹理，Texture 属性映射到 <strong>sampler2D</strong>变量；立方体贴图 (Cubemap) 映射到 <strong>samplerCUBE__</strong>；3D纹理映射到 <strong>sampler3D__</strong>。</li></ul><h2 id="向着色器提供属性值">向着色器提供属性值</h2><p>在下列位置中查找着色器属性值并提供给着色器：</p><ul><li>MaterialPropertyBlock中设置的每渲染器值。这通常是“每实例”数据（例如，全部共享相同材质的许多对象的自定义着色颜色）。</li><li>在渲染的对象上使用的材质中设置的值。</li><li>全局着色器属性，通过 Unity渲染代码自身设置（请参阅内置着色器变量），或通过您自己的脚本来设置（例如Shader.SetGlobalTexture）。</li></ul><p>优先顺序如上所述：每实例数据覆盖所有内容；然后使用材质数据；最后，如果这两个地方不存在着色器属性，则使用全局属性值。最终，如果在任何地方都没有定义着色器属性值，则将提供“默认值”（浮点数的默认值为零，颜色的默认值为黑色，纹理的默认值为空的白色纹理）。</p><h2 id="序列化和运行时材质属性">序列化和运行时材质属性</h2><p>材质可以同时包含序列化属性值和运行时设置的属性值。</p><ul><li><p>序列化的数据是在着色器的<code>Properties</code>代码中定义的所有属性。通常，这些是需要储存在材质的值，并且可由用户在材质的<code>Inspector</code>面板中进行调整。</p></li><li><p>材质也可以具有着色器使用的一些属性，但不在着色器的<code>Properties</code>代码块中声明。通常，这适用于运行时从脚本代码(eg，<code>Material.SetColor</code>)设置的属性。<strong>矩阵和数组只能作为非序列化的运行时属性存在(因为无法在Properties代码块中定义他们)。</strong></p></li></ul><h2 id="特殊纹理属性">特殊纹理属性</h2><p>对于设置为种色器/材质属性的每个纹理，Unity还会在其他矢量属性中设置一些额外信息。</p><h3 id="纹理平铺和偏移">纹理平铺和偏移</h3><p>材质通常具有纹理属性的 <code>Tiling</code> 和<code>Offset</code>字段。 <strong>此信息将传递到着色器的 float4{TextureName}_ST 属性</strong>：</p><ul><li><code>x</code> 包含 X平铺值</li><li><code>y</code> 包含 Y平铺值</li><li><code>z</code> 包含 X偏移值</li><li><code>w</code> 包含 Y偏移值</li></ul><p>例如，着色器包含名为 <code>_MainTex</code>的纹理，则平铺信息为<code>_MainTex_ST</code> 中。</p><h3 id="纹理大小">纹理大小</h3><p>{TextureName}_TexelSize -float4属性,包含纹理大小信息。</p><ul><li><code>x</code> 包含 1.0/宽度</li><li><code>y</code> 包含 1.0/高度</li><li><code>z</code> 包含 宽度</li><li><code>w</code> 包含 高度</li></ul><h3 id="纹理-hdr-参数">纹理 HDR 参数</h3><p>{TextureName}_HDR-float4属性,包含有关如何根据所使用的<code>颜色空间</code> 解码潜在<code>HDR</code>(例如 RGBM 编码) 纹理信息。参见<code>DecodeHDR 函数</code></p><h3 id="颜色空间和颜色矢量着色器数据"><strong>颜色空间和颜色/矢量着色器数据</strong></h3><p>使用<code>线性颜色空间</code>时，所有材质颜色属性均以<code>sRGB</code>颜色提供，但在传递到着色器时会转换为线性值。</p><p>例如，如果 Properties 着色器代码块包含名为“MyColor“的 Color属性，则相应的”MyColor”HLSL 变量将获得线性颜色值。</p><p>对于标记为 Float 或 Vector类型的属性，默认情况下不进行颜色空间转换；而是假设它们包含非颜色数据。可为浮点/矢量属性添加[Gamma] 特性，以表示它们是以 sRGB空间指定，就像颜色一样（请参阅属性）。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/2.unlitshader/"/>
      <url>/2022/08/10/unity/shader/2.unlitshader/</url>
      
        <content type="html"><![CDATA[<h1 id="unlitshader着色器">UnlitShader着色器</h1><blockquote><p>Unity的ShaderLab最受欢迎的Shader方式。着色器代码是用<code>HLSL语言</code>编写，在着色器文本的<code>Pass命令</code>中嵌入<code>代码片段</code>eg:</p></blockquote><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a> Pass <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...常规通道状态设置 ...</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>      </span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        CGPROGRAM</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 此代码片段的编译指令，例如：</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma vertex vert</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="pp">#pragma fragment frag</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>      </span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">// Cg/HLSL 代码本身</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>      </span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ...通道设置的剩余部分 ...</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><h2 id="hlsl-代码片段">HLSL 代码片段</h2><p>HLSL 程序代码写入到 <strong>CGPROGRAM</strong> 和<strong>ENDCG</strong> 关键字之间。或者<strong>HLSLPROGRAM</strong>和<strong>ENDHLSL</strong>之间，后一种形式不会自动包含<code>HLSLSupport</code>和<code>UnityShaderVariables</code>内置头文件。</p><p>在代码片段的开头，可使用<strong>#pragma</strong>语句的形式提供编译指令。 指定编译的着色器函数: *#pragma vertex name-作为顶点着色器来编译函数name * #pragma fragmentname-作为片元着色器来编译函数name</p><ul><li>#pragma geometryname-作为<strong>DX10</strong>几何着色器来编译函数name。如下所述，设置此选项会自动开启#pragma taeget 4.0。</li><li>#pragma hullname-作为<strong>DX11</strong>外壳着色器来编译函数name。如下所述，设置此选项会自动开启#pragma taeget 5.0。</li><li>#pragma domainname-作为<strong>DX11</strong>域着色器来编译函数name。如下所述，设置此选项会自动开启#pragma taeget 5.0。</li></ul><p>其他编译指令：</p><ul><li><p>#pragma targetname-要编译到的着色器<code>Unity GPI</code>目标。</p></li><li><p>#pragma require feature…-对着色器需要的GPU功能进行<strong>精细控制</strong>。</p></li><li><p>#pragma only_renderers 空格分隔的名称 -仅为给定的渲染器编译着色器。默认情况下，将为所有渲染器编译着色器。</p></li><li><p>#pragma exclude_renderers 空格分隔的名称 -不为给定渲染器编译着色器。默认情况下，将为所有渲染器编译着色器。</p></li><li><p>#pragma multi_compile … - 用于处理多个着色器变体。</p></li><li><p>#pragma enable_d3d11_debug_symbols - 为针对 <strong>DirectX11</strong> 编译的着色器生成调试信息，这将允许您通过 <strong>VisualStudio 2012（或更高版本）图形调试器</strong>来调试着色器。</p></li><li><p>#pragma hardware_tier_variants 渲染器名称 -为每个可以运行所选渲染器的硬件层生成每个编译着色器的多个着色器硬件变体。</p></li><li><p>#pragmahlslcc_bytecode_disassembly-将分解的HLSLcc字节码嵌入翻译的着色器中。</p></li><li><p>#pragma disable_fastmath - 启用精确的IEEE754规则，主要涉及NaN处理(目前只影响<strong>Metal</strong>平台)。</p></li><li><p>#pragma glsl_es2 - 当在一个GLSL着色器中设置，生成一个GLSL ES1.0(OpenGL ES 2.0)，即使着色器目标是OpenGL ES 3</p></li></ul><p><strong>每个代码片段必须至少包含一个顶点程序和一个片元程序。因此，#pragmavertex 和 #pragma fragment 指令是必需的。</strong> 从 Unity 5.0开始不执行任何操作并且可以安全删除的编译指令：#pragma glsl、#pragmaglsl_no_auto_normalization、#pragma profileoption 和 #pragmafragmentoption。 Unity 仅支持着色器文件中的 <code>#pragma</code>指令，而不支持 <code>include</code> 中的指令。</p><h2 id="渲染平台">渲染平台</h2><p>Unity 支持多种渲染 API（例如 Direct3D 11 和OpenGL），默认情况下，所有着色器程序都编译到所有支持的渲染器中。您可以使用#pragma only_renderers 或 #pragma exclude_renderers指令指示要编译到的渲染器。如果您确信自己显式使用的一些着色器语言功能在某些平台上无法实现，这样做将非常有用。</p><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//仅会将着色器编译到 D3D11 模式</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#pragma only_renderers d3d11</span></span></code></pre></div><p>支持的渲染器名称包括：</p><ul><li>d3d11 - Direct3D 11/12</li><li>glcore - OpenGL 3.x/4.x</li><li>gles - OpenGL ES 2.0</li><li>gles3 - OpenGL ES 3.x</li><li>metal - iOS/Mac Metal</li><li>vulkan - Vulkan</li><li>d3d11_9x - Direct3D 11 9.x 功能级别，通常在 WSA 平台上使用</li><li>xboxone - Xbox One</li><li>ps4 - PlayStation 4</li><li>n3ds - Nintendo 3DS</li><li>wiiu - Nintendo Wii U</li></ul><h2 id="unlitshader">UnlitShader</h2><ul><li><ol type="1"><li>Shader命令包含一个着色器名称的字符串，可以使用正斜杠<code>/</code>将着色器放在子菜单中显示。</li></ol></li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"类别名称/子类别名称/Shader名称"</span></span></code></pre></div><ul><li><ol start="2" type="1"><li>Properties 代码块包含着色器变量(纹理、颜色等)，这些变量保存为材质的一部分，并且显示在材质的<code>Inspector</code>面板中</li></ol></li><li><ol start="3" type="1"><li>SubShader.一个Shader可以包含一个或者多个SubShader,<strong>主要用于实现不同的GPU功能的着色器</strong>。</li></ol></li><li><ol start="4" type="1"><li>Pass.每个SubShader由多个<code>Pass</code>通道组成，每个<code>Pass</code>通道代表为使用着色器材质渲染的同一对象执行 顶点和片元代码。许多简单的着色器只使用一个通道，但与光照交互的着色器可能需要更多通道.通道内部的命令通常设置<code>fixed function</code>状态，例如 混合模式。 使用<code>CGPROGRAM ..ENDCG</code>关键字包含的<code>HLSL</code>代码。</li></ol></li></ul><p>顶点着色器是对3D模型的每个顶点运行的程序。通常情况下，它并不做任何特别有趣的事情。这里我们只是将顶点位置从对象空间转换为所谓的“裁剪空间”（由GPU用于栅格化屏幕上的对象）。我们还传递未修改的输入纹理坐标；我们需要该坐标来对片元着色器中的纹理进行采样。</p><p>片元着色器是对屏幕上对象占据的每个像素运行的程序，通常用于计算和输出每个像素的颜色。通常，屏幕上有数百万个像素，并且片元着色器将针对所有像素执行！优化片元着色器是整体游戏性能优化工作的重要组成部分。一些变量或函数定义后跟一个语义指示符，例如 : POSITION 或 :SV_Target。这些语义指示符将这些变量的“含义”传达给 GPU。</p><h2 id="着色器语义">着色器语义</h2><p>编写 HLSL 着色器程序时， 输入和输出变量需要通过语义来表明其“意图”。这是 HLSL 着色器语言中的 标准概念；</p><h3 id="顶点着色器输入语义">顶点着色器<code>输入语义</code></h3><p>主顶点着色器函数(由<code>#pragma vertex</code> 指令表示)需要在所有输入参数上都有语义。这些对应各个<code>网格数据元素</code>,如顶点位置、法线网格和纹理坐标。</p><p>以下示例直接使用参数形式。</p><div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Unlit/Show UVs"</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        Pass</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            CGPROGRAM</span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma vertex vert</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma fragment frag</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>                float2 uv <span class="op">:</span> TEXCOORD0<span class="op">;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>                float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>            <span class="op">};</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>            v2f vert <span class="op">(</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>                float4 vertex <span class="op">:</span> POSITION<span class="op">,</span> <span class="co">// 顶点位置输入</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>                float2 uv <span class="op">:</span> TEXCOORD0 <span class="co">// 第一个纹理坐标输入</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>                <span class="op">)</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>                v2f o<span class="op">;</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>                o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>                o<span class="op">.</span>uv <span class="op">=</span> uv<span class="op">;</span></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> o<span class="op">;</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>            </span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>            fixed4 frag <span class="op">(</span>v2f i<span class="op">)</span> <span class="op">:</span> SV_Target</span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> fixed4<span class="op">(</span>i<span class="op">.</span>uv<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>            ENDCG</span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>不必逐个拼写出所有的每个输入， 可以声明一个输入结构，并在该结构的每个单独成员变量上指示语义。例如：</p><div class="sourceCode" id="cb5"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// ....省略</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> a2v <span class="op">{</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    float4 vertex <span class="op">:</span> POSITION<span class="op">;</span> <span class="co">// 顶点位置输入</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    float2 uv <span class="op">:</span> TEXCOORD0<span class="op">;</span> <span class="co">// 第一个纹理坐标输入</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>v2f vert <span class="op">(</span>a2v i<span class="op">)</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    v2f o<span class="op">;</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>i<span class="op">.</span>vertex<span class="op">);</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    o<span class="op">.</span>uv <span class="op">=</span> i<span class="op">.</span>uv<span class="op">;</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> o<span class="op">;</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a><span class="co">// ....省略</span></span></code></pre></div><h3 id="片元着色器输出语义">片元着色器<code>输出语义</code></h3><p>通常，片元着色器会输出颜色，并具有 <code>SV_Target</code>语义。</p><div class="sourceCode" id="cb6"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    fixed4 frag<span class="op">(</span>v2f i<span class="op">):</span> SV_Target</span></code></pre></div><p>函数 <code>frag</code> 的返回类型为<code>fixed4</code>（低精度RGBA颜色)。因为它只返回一个值，所以语义由函数自身指示<code>: SV_target</code>。 也可以返回结构体形式。</p><div class="sourceCode" id="cb7"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> fragOutput <span class="op">{</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    fixed4 color <span class="op">:</span> SV_Target<span class="op">;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="op">};</span>            </span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>fragOutput frag <span class="op">(</span>v2f i<span class="op">)</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    fragOutput o<span class="op">;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    o<span class="op">.</span>color <span class="op">=</span> fixed4<span class="op">(</span>i<span class="op">.</span>uv<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> o<span class="op">;</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>从片元着色器返回结构对于不止返回单个颜色的 着色器非常有用。片元着色器输出支持的其他语义如下。</p><ul><li><p>SV_TargetN：多个渲染目标<code>SV_Target1</code>、<code>SV_Target2</code>等等：这些是着色器写入的附加颜色。这在一次渲染到多个渲染目标（称为“多渲染目标”渲染技术，简称MRT）时使用。<strong>SV_Target0 等同于 SV_Target</strong>。</p></li><li><p>SV_Depth：像素着色器深度输出 通常情况下， 片元着色器不会覆盖 Z缓冲区值，并使用常规三角形栅格化中的默认值。但是，对于某些效果，输出每个像素的自定义Z 缓冲区深度值很有用。</p></li></ul><p>请注意，在许多 GPU上，这会关闭一些深度缓冲区优化，因此如果没有充分的理由，请不要覆盖 Z缓冲区值。SV_Depth 产生的成本取决于 GPU 架构，但总体上与 Alpha测试（使用 HLSL 中的内置 clip()函数）的成本非常相似。通过渲染着色器在所有常规不透明着色器之后修改深度（例如，使用AlphaTest 渲染队列）。<strong>深度输出值必须为单个 float。</strong></p><h3 id="顶点着色器输出和片元着色器输入">顶点着色器输出和片元着色器输入</h3><p>顶点着色器需要输出顶点的最<strong>终裁剪空间</strong>位置，以便 GPU知道屏幕上的栅格化位置以及深度。此输出需要具有 <code>SV_POSITION</code>语义，<strong>并为 float4 类型</strong>。顶点着色器生成的所有其他输出（“插值器”或“变化”）都是您的特定着色器需要的。从顶点着色器输出的值将在渲染三角形的面上进行插值，并且每个像素的值将作为输入传递给片元着色器。</p><p>许多现代 GPU 并不真正关心这些变量的语义；然而，一些旧系统（最主要的是Direct3D 9 上的着色器模型 2 GPU）存在关于语义的特殊规则：</p><ul><li>TEXCOORD0、TEXCOORD1等语义用于指示<strong>任意高精度数据</strong>，如纹理坐标和位置。</li><li>顶点输出和片元输入的 COLOR0 和 COLOR1 语义用于<strong>低精度 0 到 1范围的数据</strong>（如简单的颜色值）。</li></ul><p><strong>为了获得最佳的跨平台支持，应将顶点输出和 片元输入标记为TEXCOORDn 语义。</strong></p><h4 id="插值器数量限制">插值器数量限制</h4><p>对于总共可以使用多少个插值器变量将信息从顶点传递到片元着色器，存在一些限制。该限制 取决于平台和GPU，一般准则如下：</p><ul><li>最多 8 个插值器：OpenGL ES 2.0 (iOS/Android)、Direct3D 11 9.x 级别(Windows Phone) 和 Direct3 9 着色器模型 2.0（老旧 PC）。由于插值器数量受到限制，但每个插值器可以是一个 4 分量矢量，所以一些着色器将内容打包在一起以便不会超过限制。例如，两个纹理坐标可以在一个 float4 变量中传递（.xy 表示一个坐标，.zw表示第二个坐标）。</li><li>最多 10 个插值器：Direct3D 9 着色器模型 3.0 (#pragma target3.0)。</li><li>最多 16 个插值器：OpenGL ES 3.0 (iOS/Android) 和 Metal (iOS)。</li><li>最多 32 个插值器：Direct3D 10 着色器模型 4.0 (#pragma target4.0)。</li></ul><p><strong>无论特定目标硬件如何，出于性能原因，通常最好使用尽可能少的插值器。</strong></p><h3 id="其他特殊语义">其他特殊语义</h3><h4 id="屏幕空间像素位置vpos">屏幕空间像素位置：VPOS</h4><p>片元着色器可以接收渲染为特殊 VPOS 语义的像素的位置。此功能仅从着色器模型 <strong>3.0</strong> 开始存在，因此着色器需要具有<code>#pragma target 3.0</code> 编译指令。在不同的平台上，屏幕空间位置输入的基础类型会有所不同，因此为了获得最大的可移植性，请对其使用<code>UNITY_VPOS_TYPE</code>类型（在大多数平台上将是<code>float4</code>，在 <strong>Direct3D 9 上将是<code>float2</code></strong>）。另外，使用像素位置语义将导致难以让裁剪空间位置 (SV_POSITION) 和 VPOS处于相同的顶点到片元结构中。因此顶点着色器应<strong>将裁剪空间位置输出为单独的“out”变量</strong>。</p><div class="sourceCode" id="cb8"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Unlit/Screen Position"</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    Properties</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>        _MainTex <span class="op">(</span><span class="st">"Texture"</span><span class="op">,</span> <span class="dv">2</span><span class="er">D</span><span class="op">)</span> <span class="op">=</span> <span class="st">"white"</span> <span class="op">{}</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>        Pass</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>            CGPROGRAM</span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma vertex vert</span></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma fragment frag</span></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma target 3.0</span></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 注意：此结构中没有 SV_POSITION</span></span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>            <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a>                float2 uv <span class="op">:</span> TEXCOORD0<span class="op">;</span></span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>            <span class="op">};</span></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>            v2f vert <span class="op">(</span></span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>                float4 vertex <span class="op">:</span> POSITION<span class="op">,</span> <span class="co">// 顶点位置输入</span></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>                float2 uv <span class="op">:</span> TEXCOORD0<span class="op">,</span> <span class="co">// 纹理坐标输入</span></span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>                out float4 outpos <span class="op">:</span> SV_POSITION <span class="co">// 裁剪空间位置输出</span></span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>                <span class="op">)</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>                v2f o<span class="op">;</span></span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>                o<span class="op">.</span>uv <span class="op">=</span> uv<span class="op">;</span></span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>                outpos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> o<span class="op">;</span></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a>            sampler2D _MainTex<span class="op">;</span></span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>            fixed4 frag <span class="op">(</span>v2f i<span class="op">,</span> UNITY_VPOS_TYPE screenPos <span class="op">:</span> VPOS<span class="op">)</span> <span class="op">:</span> SV_Target</span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a>                <span class="co">// screenPos.xy 将包含像素整数坐标。</span></span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 使用它们来实现一个跳过渲染 4x4 像素块的</span></span><span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 棋盘图案</span></span><span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 棋盘图案中 4x4 像素块的 checker 值</span></span><span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 为负</span></span><span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a>                screenPos<span class="op">.</span>xy <span class="op">=</span> floor<span class="op">(</span>screenPos<span class="op">.</span>xy <span class="op">*</span> <span class="fl">0.25</span><span class="op">)</span> <span class="op">*</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a>                <span class="dt">float</span> checker <span class="op">=</span> <span class="op">-</span>frac<span class="op">(</span>screenPos<span class="op">.</span>r <span class="op">+</span> screenPos<span class="op">.</span>g<span class="op">);</span></span><span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 如果值为负，则 clip HLSL 指令停止渲染像素</span></span><span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a>                clip<span class="op">(</span>checker<span class="op">);</span></span><span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 对于保留的像素，读取纹理并将其输出</span></span><span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a>                fixed4 c <span class="op">=</span> tex2D <span class="op">(</span>_MainTex<span class="op">,</span> i<span class="op">.</span>uv<span class="op">);</span></span><span id="cb8-51"><a href="#cb8-51" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> c<span class="op">;</span></span><span id="cb8-52"><a href="#cb8-52" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb8-53"><a href="#cb8-53" aria-hidden="true" tabindex="-1"></a>            ENDCG</span><span id="cb8-54"><a href="#cb8-54" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb8-55"><a href="#cb8-55" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb8-56"><a href="#cb8-56" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="面对方向vface">面对方向：VFACE</h4><p>片元着色器可以接收一种指示渲染表面是面向摄像机还是背对摄像机的变量。这在渲染应从两侧可见的几何体时非常有用- 通常用于树叶和类似的薄型物体。VFACE语义输入变量将包含表示正面三角形的正值，以及表示背面三角形的负值。</p><p>此功能从着色器模型 <strong>3.0</strong>开始才存在，因此着色器需要具有 <code>#pragma target 3.0</code>编译指令。</p><div class="sourceCode" id="cb9"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Unlit/Face Orientation"</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    Properties</span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        _ColorFront <span class="op">(</span><span class="st">"Front Color"</span><span class="op">,</span> Color<span class="op">)</span> <span class="op">=</span> <span class="op">(</span><span class="dv">1</span><span class="op">,</span><span class="fl">0.7</span><span class="op">,</span><span class="fl">0.7</span><span class="op">,</span><span class="dv">1</span><span class="op">)</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        _ColorBack <span class="op">(</span><span class="st">"Back Color"</span><span class="op">,</span> Color<span class="op">)</span> <span class="op">=</span> <span class="op">(</span><span class="fl">0.7</span><span class="op">,</span><span class="dv">1</span><span class="op">,</span><span class="fl">0.7</span><span class="op">,</span><span class="dv">1</span><span class="op">)</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>        Pass</span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>            Cull Off <span class="co">// 关闭背面剔除</span></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>            CGPROGRAM</span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma vertex vert</span></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma fragment frag</span></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma target 3.0</span></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>            float4 vert <span class="op">(</span>float4 vertex <span class="op">:</span> POSITION<span class="op">)</span> <span class="op">:</span> SV_POSITION</span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> UnityObjectToClipPos<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>            fixed4 _ColorFront<span class="op">;</span></span><span id="cb9-25"><a href="#cb9-25" aria-hidden="true" tabindex="-1"></a>            fixed4 _ColorBack<span class="op">;</span></span><span id="cb9-26"><a href="#cb9-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-27"><a href="#cb9-27" aria-hidden="true" tabindex="-1"></a>            fixed4 frag <span class="op">(</span>fixed facing <span class="op">:</span> VFACE<span class="op">)</span> <span class="op">:</span> SV_Target</span><span id="cb9-28"><a href="#cb9-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb9-29"><a href="#cb9-29" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 正面的 VFACE 输入为正，</span></span><span id="cb9-30"><a href="#cb9-30" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 背面的为负。根据这种情况</span></span><span id="cb9-31"><a href="#cb9-31" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 输出两种颜色中的一种。</span></span><span id="cb9-32"><a href="#cb9-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> facing <span class="op">&gt;</span> <span class="dv">0</span> <span class="op">?</span>_ColorFront <span class="op">:</span> _ColorBack<span class="op">;</span></span><span id="cb9-33"><a href="#cb9-33" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb9-34"><a href="#cb9-34" aria-hidden="true" tabindex="-1"></a>            ENDCG</span><span id="cb9-35"><a href="#cb9-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb9-36"><a href="#cb9-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb9-37"><a href="#cb9-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h4 id="顶点-idsv_vertexid">顶点 ID：SV_VertexID</h4><p>顶点着色器可以接收具有“顶点编号”（为无符号整数）的变量。当您想要从纹理或ComputeBuffers 中 获取额外的每顶点数据时，这非常有用。 此功能从DX10（着色器模型 4.0）和 GLCore/OpenGL ES 3开始才存在，因此着色器需要具有 #pragma target 3.5 编译指令。</p><div class="sourceCode" id="cb10"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Unlit/VertexID"</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        Pass</span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>            CGPROGRAM</span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma vertex vert</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma fragment frag</span></span><span id="cb10-10"><a href="#cb10-10" aria-hidden="true" tabindex="-1"></a>            <span class="pp">#pragma target 3.5</span></span><span id="cb10-11"><a href="#cb10-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-12"><a href="#cb10-12" aria-hidden="true" tabindex="-1"></a>            <span class="kw">struct</span> v2f <span class="op">{</span></span><span id="cb10-13"><a href="#cb10-13" aria-hidden="true" tabindex="-1"></a>    fixed4 color <span class="op">:</span> TEXCOORD0<span class="op">;</span></span><span id="cb10-14"><a href="#cb10-14" aria-hidden="true" tabindex="-1"></a>                float4 pos <span class="op">:</span> SV_POSITION<span class="op">;</span></span><span id="cb10-15"><a href="#cb10-15" aria-hidden="true" tabindex="-1"></a>            <span class="op">};</span></span><span id="cb10-16"><a href="#cb10-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-17"><a href="#cb10-17" aria-hidden="true" tabindex="-1"></a>            v2f vert <span class="op">(</span></span><span id="cb10-18"><a href="#cb10-18" aria-hidden="true" tabindex="-1"></a>                float4 vertex <span class="op">:</span> POSITION<span class="op">,</span> <span class="co">// 顶点位置输入</span></span><span id="cb10-19"><a href="#cb10-19" aria-hidden="true" tabindex="-1"></a>                uint vid <span class="op">:</span> SV_VertexID <span class="co">// 顶点 ID，必须为 uint</span></span><span id="cb10-20"><a href="#cb10-20" aria-hidden="true" tabindex="-1"></a>                <span class="op">)</span></span><span id="cb10-21"><a href="#cb10-21" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-22"><a href="#cb10-22" aria-hidden="true" tabindex="-1"></a>                v2f o<span class="op">;</span></span><span id="cb10-23"><a href="#cb10-23" aria-hidden="true" tabindex="-1"></a>                o<span class="op">.</span>pos <span class="op">=</span> UnityObjectToClipPos<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb10-24"><a href="#cb10-24" aria-hidden="true" tabindex="-1"></a>                <span class="co">// 基于顶点 ID 输出时髦颜色</span></span><span id="cb10-25"><a href="#cb10-25" aria-hidden="true" tabindex="-1"></a>                <span class="dt">float</span> f <span class="op">=</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>vid<span class="op">;</span></span><span id="cb10-26"><a href="#cb10-26" aria-hidden="true" tabindex="-1"></a>                o<span class="op">.</span>color <span class="op">=</span> half4<span class="op">(</span>sin<span class="op">(</span>f<span class="op">/</span><span class="dv">10</span><span class="op">),</span>sin<span class="op">(</span>f<span class="op">/</span><span class="dv">100</span><span class="op">),</span>sin<span class="op">(</span>f<span class="op">/</span><span class="dv">1000</span><span class="op">),</span><span class="dv">0</span><span class="op">)</span> <span class="op">*</span> <span class="fl">0.5</span> <span class="op">+</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb10-27"><a href="#cb10-27" aria-hidden="true" tabindex="-1"></a>                <span class="cf">return</span> o<span class="op">;</span></span><span id="cb10-28"><a href="#cb10-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-29"><a href="#cb10-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-30"><a href="#cb10-30" aria-hidden="true" tabindex="-1"></a>            fixed4 frag <span class="op">(</span>v2f i<span class="op">)</span> <span class="op">:</span> SV_Target</span><span id="cb10-31"><a href="#cb10-31" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb10-32"><a href="#cb10-32" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> i<span class="op">.</span>color<span class="op">;</span></span><span id="cb10-33"><a href="#cb10-33" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb10-34"><a href="#cb10-34" aria-hidden="true" tabindex="-1"></a>            ENDCG</span><span id="cb10-35"><a href="#cb10-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb10-36"><a href="#cb10-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb10-37"><a href="#cb10-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/10.computeshader/"/>
      <url>/2022/08/10/unity/shader/10.computeshader/</url>
      
        <content type="html"><![CDATA[<h1 id="computeshader">ComputeShader</h1>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/10.commandbuffer/"/>
      <url>/2022/08/10/unity/shader/10.commandbuffer/</url>
      
        <content type="html"><![CDATA[<h1 id="commandbuffer">CommandBuffer</h1><h2 id="应用一-屏幕截图">应用一、 屏幕截图</h2><pre><code>CommandBuffer buf = new CommandBuffer();buf.name = "Grab Screen Texture";// 名称任意起screenCopyID = Shader.PropertyToID("_ScreenCopyTexture");// 创建临时 RT。// 像素宽度，或为 -1，表示“摄像机像素宽度”。// 像素高度，或为 -1，表示“摄像机像素高度”。buf.GetTemporaryRT(screenCopyID, -1, -1, 0, FilterMode.Bilinear);// 复制当前屏幕到 RTbuf.Blit(BuiltinRenderTextureType.CurrentActive, screenCopyID);// 如何使用这个 rt， 这里测试，赋值给Shader 贴图。//buf.SetGlobalTexture("_CustomMainTex", screenCopyID);m_camera.AddCommandBuffer(_cameraEvent, buf);</code></pre><p>接下来使用 RawImage 作为输出实验。</p><h3 id="shader-1">Shader 1</h3><pre><code>Shader "Unlit/GrabScreenTexture"{    SubShader    {        Tags { "RenderType"="Overlay" }        LOD 100        Pass        {            CGPROGRAM            #pragma vertex vert            #pragma fragment frag            // make fog work            #pragma multi_compile_fog            #include "UnityCG.cginc"            struct appdata            {                float4 vertex : POSITION;                float2 uvgrab : TEXCOORD0;            };            struct v2f            {                float2 uvgrab : TEXCOORD0;                UNITY_FOG_COORDS(1)                float4 vertex : SV_POSITION;            };            // 1. 作为普通图使用            sampler2D _CustomMainTex;            float4 _CustomMainTex_ST;            v2f vert (appdata v)            {                v2f o;                o.vertex = UnityObjectToClipPos(v.vertex);                //o.uvgrab = TRANSFORM_TEX(v.uvgrab, _CustomMainTex);                o.uvgrab = v.uvgrab.xy *  _CustomMainTex_ST.xy + _CustomMainTex_ST.zw;                UNITY_TRANSFER_FOG(o,o.vertex);                return o;            }            fixed4 frag (v2f i) : SV_Target            {                // sample the texture                fixed4 col = tex2D(_CustomMainTex, i.uvgrab);                // apply fog                UNITY_APPLY_FOG(i.fogCoord, col);                return col;            }            ENDCG        }    }}</code></pre><p><img src="/imgs/CommandBuffer_GrabScreen1.png"></p><p>作为普通图使用，这样出来的效果： 1. 图像为全屏图 2. Dx和 OpenGL坐标没有适应， 导致颠倒图。</p><h3 id="shader-2">Shader 2</h3><pre><code>Shader "Unlit/GrabScreenTextureFinal"{    // 调试作用    Properties{        _Color("Color", Color) = (1, 1, 1, 1)        _OffetX("OffetX", Range(-0.5, 0.5)) = 0    }    SubShader    {        Tags { "RenderType" = "Overlay" }        LOD 100        Pass        {            CGPROGRAM            #pragma vertex vert            #pragma fragment frag            // make fog work            #pragma multi_compile_fog            #include "UnityCG.cginc"            struct appdata            {                float4 vertex : POSITION;                float2 texcoord: TEXCOORD0;            };            struct v2f            {                float4 vertex : SV_POSITION;                float4 uvgrab : TEXCOORD0;                UNITY_FOG_COORDS(1)            };            half _OffetX;            v2f vert(appdata v)            {                v2f o;                o.vertex = UnityObjectToClipPos(v.vertex);                //1。 OpenGL /DX 坐标适应#if UNITY_UV_STARTS_AT_TOP                float scale = -1.0;#else                float scale = 1.0;#endif                //2. 齐次坐标 转换为 屏幕坐标                // 齐次坐标，原点在中间， (-w， w)                // 屏幕坐标, 原点左下角（统一OpenGL系）                o.uvgrab.xy = (float2(o.vertex.x, o.vertex.y*scale) + o.vertex.w) * 0.5;                o.uvgrab.zw = o.vertex.zw;                // 添加调试  _OffetX                o.uvgrab.x = o.uvgrab.x+ _OffetX;                UNITY_TRANSFER_FOG(o,o.vertex);                return o;            }            sampler2D _CustomMainTex;            float4 _CustomMainTex_TexelSize;            half4 _Color;            fixed4 frag(v2f i) : SV_Target            {                // 屏幕比例， 转换为图像比例， 把这个比例作为 uv采样。                i.uvgrab.xy = _CustomMainTex_TexelSize.xy * i.uvgrab.z + i.uvgrab.xy;                // sample the texture                // 添加调试  _Color                half4 col = tex2Dproj(_CustomMainTex, UNITY_PROJ_COORD(i.uvgrab)) * _Color;                UNITY_APPLY_FOG(i.fogCoord, col);                col.a = 1.0;                return col;            }            ENDCG        }    }}</code></pre><p><img src="imgs/CommandBuffer_GrabScreen2.png"></p><p>修正后： 1. 图像为渲染物体区域图 2. Dx和 OpenGL 坐标适应。</p><p>从效果上看到和没有渲染一样，那是因为一模一样的完全重合。 调整 OffsetX和Color 就能看到了。</p><h3 id="关于坐标徐转换">关于坐标徐转换</h3><p><img src="imgs/TEXCOORD0.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/1.surfaceshader/"/>
      <url>/2022/08/10/unity/shader/1.surfaceshader/</url>
      
        <content type="html"><![CDATA[<h1 id="surfaceshader处理方式">SurfaceShader处理方式</h1><blockquote><p>作为Unity支持的ShaderLab 之一，也是<code>Standard Shader</code>采用的形式。 SurfaceShader实际上是<code>UnlitShader</code>的逐片元处理</p></blockquote><p>此系列需要一点ShaderLab知识,主要讨论<code>为什么</code>。接下来会由浅入深从<strong>生成的源代码</strong>分析。</p><h2 id="一基本代码结构">一、基本代码结构</h2><div class="sourceCode" id="cb1"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Custom/SampleSurfaceShader"</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    Tags <span class="op">{</span> <span class="st">"RenderType"</span> <span class="op">=</span> <span class="st">"Opaque"</span> <span class="op">}</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    CGPROGRAM</span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. surface 处理函数 光照处理函数</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#pragma surface surf Lambert</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 输入结构</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Input <span class="op">{</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>      float4 color <span class="op">:</span> COLOR<span class="op">;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 处理函数</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> surf<span class="op">(</span>Input IN<span class="op">,</span> inout SurfaceOutput o<span class="op">)</span> <span class="op">{</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>      o<span class="op">.</span>Albedo <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 不支持的情况被使用</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    FallBack FallBackShaderName</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p>以上结构是比较简单的结构。接下来逐条解释:</p><ul><li><ol type="1"><li>surf 处理函数 <code>surf</code> 对应<code>void surf(Input IN, inout SurfaceOutput o)</code></li></ol></li><li><ol start="2" type="1"><li>Lambert 光照处理函数 <code>Lambert</code> 对应<code>inline fixed4 LightingLambert (SurfaceOutput s, UnityGI gi)</code>,此函数在 <code>Lighting.cginc</code>文件中可找到。</li></ol></li><li><ol start="3" type="1"><li>输入数据结构 根据需要添加，主要是经过<code>surf</code>处理函数给输出结构SurfaceOutput 赋值。</li></ol></li><li><ol start="4" type="1"><li>输出数据结构根据需要添加，主要是经过光照处理函数<code>Lambert</code>函数确定fragment 的输出。</li></ol></li></ul><p>** 这里面几个点(处理函数surf、 光照函数、输入结构、输出结构)需要细说，在下面展开讨论.**</p><h2 id="二从代码深究基本结构">二、从代码深究基本结构</h2><p>首先框架是Unity定的，所以就从UnityShader 流程入手。Unity内置辅助函数文件： Unity安装目录 Unity的Shader编译工具：Unity安装目录.exe Unity 两个内置光照模型： * Lambert： 用于漫射光照 *BlinnPhong ： 用于镜面反射光照。</p><p>先看规则：</p><ul><li><ol type="1"><li>通过 <code>#pragma surface a b</code>指定 处理函数a 和光照函数b</li></ol></li><li><ol start="2" type="1"><li>处理函数的形式结构<code>void surf (输入结构类型 IN, inout 输出结构类型 o) { /*一些代码*/ }</code></li></ol></li><li><ol start="3" type="1"><li>光照函数，光照函数是以 <code>half4 Lighting</code>开头的常规函数，比如 LightingSample, 使用时只需要写<code>#pragma surface surf Sample</code></li></ol><ul><li><ol type="1"><li>half4 Lighting<name> (SurfaceOutput s, UnityGI gi);在<strong>不依赖于视图方向</strong>的光照模型的<strong>前向渲染路径</strong>中使用此函数。</name></li></ol></li><li><ol start="2" type="1"><li>half4 Lighting<name> (SurfaceOutput s, half3 viewDir, UnityGI gi);在<strong>依赖于视图方向</strong>的光照模型的<strong>前向渲染路径</strong>中使用此函数。</name></li></ol></li><li><ol start="3" type="1"><li>half4 Lighting<name>_Deferred (SurfaceOutput s, UnityGI gi, outhalf4 outDiffuseOcclusion, out half4 outSpecSmoothness, out half4outNormal); 在<strong>延迟光照路径</strong>中使用此函数。</name></li></ol></li><li><ol start="4" type="1"><li>half4 Lighting<name>_PrePass (SurfaceOutput s, half4 light);在<strong>光照预通道（旧版延迟）光照路径</strong>中使用此函数。</name></li></ol></li></ul><p>请注意无需声明所有函数。光照模型不一定会使用视图方向。同样，<strong>如果仅在前向渲染中使用光照模型，请勿声明_Deferred 和 _Prepass函数。</strong>这确保了使用视图方向的着色器仅编译到前向渲染。</p></li><li><ol start="4" type="1"><li>输入结构需要对应处理函数<code>surf</code> 输入参数</li></ol></li><li><ol start="5" type="1"><li>输出结构需要对应处理函数<code>surf</code>传出参数，并且需要对应光照函数的输入参数</li></ol></li></ul><p>另外提一点，查看ShaderLab编译文件的方法: ShaderLab最终会 编译为平台的<code>vert</code> 和 <code>fragment</code> Shader 平台生成代码：引擎中选中ShaderLab--&gt; Inspector面板的<code>Compile and show code</code>的下拉菜单选择编译平台的选项--&gt;点击<code>Compile and show code</code>可查看生成代码。 ShaderLab生成：引擎中选中ShaderLab--&gt; 点击 Inspector面板的<code>Show genterated code</code> 可查看ShaderLab生成代码</p><h3 id="生成代码分析">生成代码分析</h3><p>SurfaceShader</p><div class="sourceCode" id="cb2"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>Shader <span class="st">"Custom/SampleSurfaceShader"</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    SubShader</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    Tags <span class="op">{</span> <span class="st">"RenderType"</span> <span class="op">=</span> <span class="st">"Opaque"</span> <span class="op">}</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    CGPROGRAM</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#pragma surface surf Lambert</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Input <span class="op">{</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>      float4 color <span class="op">:</span> COLOR<span class="op">;</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> surf<span class="op">(</span>Input IN<span class="op">,</span> inout SurfaceOutput o<span class="op">)</span> <span class="op">{</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>      o<span class="op">.</span>Albedo <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        ENDCG</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    FallBack <span class="st">"Diffuse"</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ul><li><p>生成代码对不同Rendering mode 生成一个 pass。 <img src="images/SurfShaderGenerated.png" alt="生成代码结构"></p></li><li><p>Pass 编译为 Unlit形式, 再根据 <code>INSTANCING_ON</code> 和非<code>INSTANCING_ON</code> 再生成代码 对应的 <code>vert</code> 和<code>fragment</code> 代码 <img src="images/BasePass.png" alt="Pass结构"></p></li><li><p>由于代码比较长，只分析 非 <code>INSTANCING_ON</code> <img src="images/Pass_NInstance.png" alt="Pass子结构"></p></li><li><p>输入输出结构根据 <code>LIGHTMAP_ON</code> 和 非<code>LIGHTMAP_ON</code> 选项再生成代码。 另外实现了 此模式下对应的<code>vert_surf</code> 和 <code>frag_surf</code>对应Pass的<code>#pragma vertex vert_surf</code>和<code>#pragma fragment frag_surf</code><img src="images/real_pass_funcs.png" alt="Pass funcs"></p></li></ul><p>此时代码还是挺多。</p><p>vert_surf</p><div class="sourceCode" id="cb3"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">// vertex shader</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>v2f_surf vert_surf <span class="op">(</span>appdata_full v<span class="op">)</span> <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>  </span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>  v2f_surf o<span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> o<span class="op">;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifndef LIGHTMAP_ON</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// half-precision fragment shader registers:</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#ifdef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#define FOG_COMBINED_WITH_WORLD_POS</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> v2f_surf <span class="op">{</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>      UNITY_POSITION<span class="op">(</span>pos<span class="op">);</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>      float3 worldNormal <span class="op">:</span> TEXCOORD0<span class="op">;</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>      float4 worldPos <span class="op">:</span> TEXCOORD1<span class="op">;</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>      <span class="pp">#if UNITY_SHOULD_SAMPLE_SH</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>      half3 sh <span class="op">:</span> TEXCOORD2<span class="op">;</span> <span class="co">// SH</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>      <span class="pp">#endif</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>      UNITY_LIGHTING_COORDS<span class="op">(</span><span class="dv">3</span><span class="op">,</span><span class="dv">4</span><span class="op">)</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>      <span class="pp">#if SHADER_TARGET &gt;= 30</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>      float4 lmap <span class="op">:</span> TEXCOORD5<span class="op">;</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>      <span class="pp">#endif</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>      UNITY_VERTEX_INPUT_INSTANCE_ID</span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>      UNITY_VERTEX_OUTPUT_STEREO</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>    <span class="co">// high-precision fragment shader registers:</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#ifndef UNITY_HALF_PRECISION_FRAGMENT_SHADER_REGISTERS</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ...</span></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#endif</span></span></code></pre></div><p>frag_surf</p><div class="sourceCode" id="cb4"><pre class="sourceCode c"><code class="sourceCode c"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">// fragment shader</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>fixed4 frag_surf <span class="op">(</span>v2f_surf IN<span class="op">)</span> <span class="op">:</span> SV_Target <span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>  <span class="co">// prepare and unpack data</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 1. 这个Input 就是我们代码声明的Input结构类型</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>  Input surfIN<span class="op">;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#ifdef FOG_COMBINED_WITH_TSPACE</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>  UNITY_EXTRACT_FOG_FROM_TSPACE<span class="op">(</span>IN<span class="op">);</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#elif defined FOG_COMBINED_WITH_WORLD_POS</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>  UNITY_EXTRACT_FOG_FROM_WORLD_POS<span class="op">(</span>IN<span class="op">);</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#else</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>  UNITY_EXTRACT_FOG<span class="op">(</span>IN<span class="op">);</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#endif</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 2. 给surfIN默认值初始化。 surfIN = (Input)0;</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>  UNITY_INITIALIZE_OUTPUT<span class="op">(</span>Input<span class="op">,</span>surfIN<span class="op">);</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#ifdef UNITY_COMPILER_HLSL</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>  SurfaceOutput o <span class="op">=</span> <span class="op">(</span>SurfaceOutput<span class="op">)</span><span class="dv">0</span><span class="op">;</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#else</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>  SurfaceOutput o<span class="op">;</span></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>  <span class="pp">#endif</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 3. </span></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>  o<span class="op">.</span>Normal <span class="op">=</span> IN<span class="op">.</span>worldNormal<span class="op">;</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a>  normalWorldVertex <span class="op">=</span> IN<span class="op">.</span>worldNormal<span class="op">;</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 4. 调用我们SurfaceShader的 surf函数。</span></span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a>  <span class="co">// call surface function</span></span><span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a>  surf <span class="op">(</span>surfIN<span class="op">,</span> o<span class="op">);</span></span><span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>  <span class="co">// UNITY_LIGHT_ATTENUATION 拥有不同类型的定义</span></span><span id="cb4-36"><a href="#cb4-36" aria-hidden="true" tabindex="-1"></a>  <span class="co">//#ifdef DIRECTIONAL</span></span><span id="cb4-37"><a href="#cb4-37" aria-hidden="true" tabindex="-1"></a>  <span class="co">//#   define UNITY_LIGHT_ATTENUATION(destName, input, worldPos) fixed destName = UNITY_SHADOW_ATTENUATION(input, worldPos);</span></span><span id="cb4-38"><a href="#cb4-38" aria-hidden="true" tabindex="-1"></a>  <span class="co">//#endif</span></span><span id="cb4-39"><a href="#cb4-39" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 。。。</span></span><span id="cb4-40"><a href="#cb4-40" aria-hidden="true" tabindex="-1"></a>  <span class="co">// compute lighting &amp; shadowing factor</span></span><span id="cb4-41"><a href="#cb4-41" aria-hidden="true" tabindex="-1"></a>  UNITY_LIGHT_ATTENUATION<span class="op">(</span>atten<span class="op">,</span> IN<span class="op">,</span> worldPos<span class="op">)</span></span><span id="cb4-42"><a href="#cb4-42" aria-hidden="true" tabindex="-1"></a>  fixed4 c <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb4-43"><a href="#cb4-43" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-44"><a href="#cb4-44" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Setup lighting environment</span></span><span id="cb4-45"><a href="#cb4-45" aria-hidden="true" tabindex="-1"></a>  UnityGI gi<span class="op">;</span></span><span id="cb4-46"><a href="#cb4-46" aria-hidden="true" tabindex="-1"></a>  UNITY_INITIALIZE_OUTPUT<span class="op">(</span>UnityGI<span class="op">,</span> gi<span class="op">);</span></span><span id="cb4-47"><a href="#cb4-47" aria-hidden="true" tabindex="-1"></a>  </span><span id="cb4-48"><a href="#cb4-48" aria-hidden="true" tabindex="-1"></a>  <span class="co">//...</span></span><span id="cb4-49"><a href="#cb4-49" aria-hidden="true" tabindex="-1"></a>  </span><span id="cb4-50"><a href="#cb4-50" aria-hidden="true" tabindex="-1"></a>  <span class="co">// Call GI (lightmaps/SH/reflections) lighting function</span></span><span id="cb4-51"><a href="#cb4-51" aria-hidden="true" tabindex="-1"></a>  UnityGIInput giInput<span class="op">;</span></span><span id="cb4-52"><a href="#cb4-52" aria-hidden="true" tabindex="-1"></a>  UNITY_INITIALIZE_OUTPUT<span class="op">(</span>UnityGIInput<span class="op">,</span> giInput<span class="op">);</span></span><span id="cb4-53"><a href="#cb4-53" aria-hidden="true" tabindex="-1"></a>  </span><span id="cb4-54"><a href="#cb4-54" aria-hidden="true" tabindex="-1"></a>  <span class="co">//...</span></span><span id="cb4-55"><a href="#cb4-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-56"><a href="#cb4-56" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 5. lightmap处理</span></span><span id="cb4-57"><a href="#cb4-57" aria-hidden="true" tabindex="-1"></a>  LightingLambert_GI<span class="op">(</span>o<span class="op">,</span> giInput<span class="op">,</span> gi<span class="op">);</span></span><span id="cb4-58"><a href="#cb4-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-59"><a href="#cb4-59" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 6. 我们ShaderLab使用的光照函数</span></span><span id="cb4-60"><a href="#cb4-60" aria-hidden="true" tabindex="-1"></a>  <span class="co">// realtime lighting: call lighting function</span></span><span id="cb4-61"><a href="#cb4-61" aria-hidden="true" tabindex="-1"></a>  c <span class="op">+=</span> LightingLambert <span class="op">(</span>o<span class="op">,</span> gi<span class="op">);</span></span><span id="cb4-62"><a href="#cb4-62" aria-hidden="true" tabindex="-1"></a>  <span class="co">// ...</span></span><span id="cb4-63"><a href="#cb4-63" aria-hidden="true" tabindex="-1"></a>  <span class="cf">return</span> c<span class="op">;</span></span><span id="cb4-64"><a href="#cb4-64" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h2 id="三小节">三、小节：</h2><ul><li>SurfaceShader 会编译为 UnlitShader形式 <code>vert</code> 和<code>fragment</code></li><li>编译后的<code>vert</code>的输入结构为 appdata_full类型</li><li>SurfaceShader 的处理函数<code>surf</code>和光照函数都在<code>fragment</code>中进行。</li><li><strong>光照函数传入参数</strong>是 SurfaceShader的<code>out传出结构</code>, 所以类型需要一致。</li></ul><h2 id="四自定义光照函数">四、自定义光照函数</h2><p>函数需要以 <code>half4 Lighting</code>开头，并且<code>传出结构</code>中<code>fixed3 Albedo;</code>、<code>fixed3 Normal;</code>、<code>fixed3 Emission;</code>、<code>fixed Alpha;</code>是必须的成员。</p><ul><li><p>half4 Lighting<name> (传出结构类型 s, half3 lightDir, halfatten)</name></p></li><li><p>half4 Lighting<name> (传出结构类型 s, half3 lightDir, half3viewDir, half atten)</name></p></li><li><p>inline half4 Lighting<name>(传出结构类型 s, half3 viewDir,UnityGI gi)</name></p></li><li><p>inline half4 Lighting<name>(传出结构类型 s, half3 viewDir,UnityGI gi)</name></p></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/shader/0.shader-shou-cang/"/>
      <url>/2022/08/10/unity/shader/0.shader-shou-cang/</url>
      
        <content type="html"><![CDATA[<h2 id="unityshader收藏">UnityShader收藏</h2><ol type="1"><li><a href="https://blog.csdn.net/puppet_master/article/details/52975666">屏幕水波效果</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/math/2.xuan-zhuan-tui-dao/"/>
      <url>/2022/08/10/unity/math/2.xuan-zhuan-tui-dao/</url>
      
        <content type="html"><![CDATA[<h1 id="旋转推导">旋转推导</h1><blockquote><p>默认绕原点旋转， 逆时针旋转。</p></blockquote><p><img src="imgs/Snipaste_2021-03-17_21-57-42.png" alt="旋转推导"><img src="imgs/Snipaste_2021-03-17_21-59-02.png" alt="旋转推导"></p><h2 id="需要用到的三角公式">需要用到的三角公式</h2><ul><li>和差化积</li></ul><p><span class="math display">\[    \sinα + \sin\beta = 2\sin\frac{α + \beta}{2}\cos\frac{α - \beta}{2}\]</span></p><p><span class="math display">\[      \sinα - \sin\beta = 2\cos\frac{α + \beta}{2}\sin\frac{α - \beta}{2}\]</span></p><p><span class="math display">\[    \cosα + \cos\beta = 2\cos\frac{α + \beta}{2}\cos\frac{α - \beta}{2}\]</span></p><p><span class="math display">\[      \cosα - \cos\beta = 2\sin\frac{α + \beta}{2}\sin\frac{α - \beta}{2}\]</span></p><p><span class="math display">\[    \tanα \pm \tan\beta = \frac{\sin(α \pm\beta)}{\cosα. \cos\beta}     \]</span></p><p><span class="math display">\[    \cotα \pm \cot\beta = `-` \pm \frac{\sin(α \pm \beta)}{\sinα.\sin\beta}        \]</span></p><ul><li>积化和差</li></ul><p><span class="math display">\[    \sinα\cos\beta = \frac{1}{2}[\sin(α + \beta) + \sin(α - \beta)]\]</span></p><p><span class="math display">\[    \cosα\sin\beta = \frac{1}{2}[\sin(α + \beta) - \sin(α - \beta)]\]</span></p><p><span class="math display">\[    \cosα\cos\beta = \frac{1}{2}[\cos(α + \beta) + \cos(α - \beta)]\]</span></p><p><span class="math display">\[    \sinα\sin\beta = \frac{1}{2}[\cos(α + \beta) - \cos(α - \beta)]\]</span></p><h2 id="旋转">旋转</h2><h3 id="d-旋转推导">2d 旋转推导</h3><figure><img src="/Sources/imgs/旋转推导1.png" alt="旋转推导1"><figcaption aria-hidden="true">旋转推导1</figcaption></figure><p>已知:</p><p><span class="math display">\[单位圆上点 A 坐标为(x, y), 与x轴夹角为 α, 点B 与点 A夹角为 \]</span><span class="math display">\[。 求点B 坐标。\]</span></p><p>推导：</p><p><span class="math display">\[    设定 B 坐标为(x_{b}, y_{b}),  那么 x_{b} = \cos( α - \beta), \\    由积化和差公式 3 4 得， \cos(α - \beta) = \cosα\cos\beta -\sinα\sin\beta  \\    所以 x_{b} = x\cos\beta - y\sin\beta \\    同理 y_{b} = y\cos\beta + x\sin\beta \\\]</span></p><p>公式写成矩阵的形式：</p>$$<span class="math display">\[\begin{bmatrix}        \cos\beta &amp; -\sin\beta \\        \sin\beta &amp; \cos\beta    \end{bmatrix}    \begin{bmatrix}        x\\y    \end{bmatrix}\]</span><p>=</p><pre><code>\begin{bmatrix}    x\cos\beta &amp; -y\sin\beta \\    x\sin\beta &amp; y\cos\beta\end{bmatrix}</code></pre><p>$$</p><h3 id="d-旋转推导-1">3d 旋转推导</h3><p>同 2d 推导, 增加z 轴。 绕x 旋转时， 不影响x，绕y时，不影响y，绕z时不影响z。 <strong>但是每个扰动都是依赖上个扰动的结果</strong></p><p>此推导按照 z、y、x 先后顺序旋转。 <span class="math display">\[    x_{rx} 代表绕 x 旋转的 x分量值。y_{rx} 绕x 旋转的 y分量值。旋转角度分量为 \beta_{x}、\beta_{y}、\beta_{z} \\    先绕z旋转。 \\    x_{rz} = x\cos\beta_{z}  -  y\sin\beta_{z}  \\    y_{rz} = x\cos\beta_{z}  +  y\sin\beta_{z}  \\    z_{rz} = z  \\    再绕y旋转   \\    x_{ry} = x_{rx}\cos\beta_{y}  -  y_{rx}\sin\beta_{y} \\    x_{ry} = y_{rx} \\    x_{ry} = x_{rx}\cos\beta_{y}  +  y_{rx}\sin\beta_{y}    \\    最后绕x旋转  \\    x_{rx} = x_{ry} \\    x_{rx} = y_{ry}\cos\beta_{x}  -  y_{ry}\sin\beta_{x}    \\    x_{rx} = x_{ry}\cos\beta_{x}  +  y_{ry}\sin\beta_{x}    \\\]</span></p><p>公式写成矩阵的形式： 绕 z 旋转</p>$$<span class="math display">\[\begin{bmatrix}        \cos\beta_{z}   &amp; -\sin\beta_{z} &amp;0     \\        \sin\beta_{z}   &amp; \cos\beta_{z} &amp;0      \\        0           &amp; 0         &amp; 1     \\    \end{bmatrix}    \begin{bmatrix}        x\\y \\z    \end{bmatrix}\]</span><p>=</p><pre><code>\begin{bmatrix}    x\cos\beta_{z} - y\sin\beta_{z} \\    x\sin\beta_{z} + y\cos\beta_{z}    z   \\\end{bmatrix}</code></pre><p>$$</p><p>绕 y 旋转</p>$$<span class="math display">\[\begin{bmatrix}        \cos\beta_{y}   &amp;0      &amp; \sin\beta_{y} \\        0           &amp; 1     &amp; 0 \\        -\sin\beta_{y}  &amp;0      &amp; \cos\beta_{y}    \end{bmatrix}    \begin{bmatrix}        x\\y \\z    \end{bmatrix}\]</span><p>=</p><pre><code>\begin{bmatrix}    x\cos\beta_{y} + z\sin\beta_{y} \\    y   \\    -x\sin\beta_{y} + z\cos\beta_{y}\end{bmatrix}</code></pre><p>$$</p><p>绕x 旋转</p>$$<span class="math display">\[\begin{bmatrix}        1 &amp; 0           &amp; 0 \\        0 &amp; \cos\beta_{x}   &amp; -\sin\beta_{x} \\        0 &amp; \sin\beta_{x}   &amp; \cos\beta_{x}    \end{bmatrix}    \begin{bmatrix}        x\\y \\z    \end{bmatrix}\]</span><p>=</p><pre><code>\begin{bmatrix}    x   \\    y\cos\beta_{x} - z\sin\beta_{x} \\    y\sin\beta_{x} + z\cos\beta_{x}\end{bmatrix}</code></pre><p>$$</p><p>按照 z、y、x 先后顺序旋转的矩阵。</p>$$<span class="math display">\[\begin{bmatrix}        \cos\beta_{y}\cos\beta_{z}  &amp; -\cos\beta_{y}\sin\beta_{z}&amp; \sin\beta_{y}   \\        \cos\beta_{x}\sin\beta_{z} +\sin\beta_{x}\sin\beta_{y}\cos\beta_{z}    &amp;\cos\beta_{x}\cos\beta_{z} -\sin\beta_{x}\sin\beta_{y}\sin\beta_{z}  &amp;  \sin\beta_{x}\cos\beta_{y}   \\        \sin\beta_{x}\sin\beta_{z} -\cos\beta_{x}\sin\beta_{y}\cos\beta_{z}    &amp;\sin\beta_{x}\cos\beta_{z} +\cos\beta_{x}\sin\beta_{y}\sin\beta_{z}  &amp;  \cos\beta_{x}\cos\beta_{y}   \\    \end{bmatrix}    \begin{bmatrix}        x\\y \\z    \end{bmatrix}\]</span><p>=</p><pre><code>\begin{bmatrix}    x\cos\beta - y\sin\beta \\    x\sin\beta + y\cos\beta    z   \\\end{bmatrix}</code></pre><p>$$</p><h2 id="平移">平移</h2><p>通过增广矩阵 增加一列构成 3x4 矩阵，拼凑成 4x4 矩阵， 则增加 一行 [0,0, 0, w], 正交相机 w = 1.</p><h2 id="缩放">缩放</h2><p>单位矩阵对角线 作为缩放参数</p><h2 id="unity-矩阵">Unity 矩阵</h2><p><code>Matrix4x4.MultiplyPoint</code>运算矩阵，当运算方向而不是点的时候使用<code>Matrix4x4.MultiplyVector.</code>.需要跳过运算[0,0,0,1] 时使用<code>The Matrix4x4.MultiplyPoint4x3</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/math/1.matrix4x4/"/>
      <url>/2022/08/10/unity/math/1.matrix4x4/</url>
      
        <content type="html"><![CDATA[<h1 id="matrix4x4">Matrix4x4</h1><blockquote><p>主要用途变换</p></blockquote><h2 id="api">API</h2><ol type="1"><li>public Matrix4x4(Vector4 column0, Vector4 column1, Vector4 column2,Vector4 column3); 构造函数，Unity矩阵按列填充.</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    Matrix4x4 mat4x4 <span class="op">=</span> <span class="kw">new</span> <span class="fu">Matrix4x4</span><span class="op">(</span><span class="kw">new</span> <span class="fu">Vector4</span><span class="op">(</span>m00<span class="op">,</span> m10<span class="op">,</span> m20<span class="op">,</span> m30<span class="op">),</span><span class="kw">new</span> <span class="fu">Vector4</span><span class="op">(</span>m01<span class="op">,</span> m11<span class="op">,</span> m21<span class="op">,</span> m31<span class="op">),</span><span class="kw">new</span> <span class="fu">Vector4</span><span class="op">(</span>m02<span class="op">,</span> m12<span class="op">,</span> m22<span class="op">,</span> m32<span class="op">),</span><span class="kw">new</span> <span class="fu">Vector4</span><span class="op">(</span>m03<span class="op">,</span> m13<span class="op">,</span> m23<span class="op">,</span> m33<span class="op">))</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// m00 m01 m02 m03</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// m10 m11 m12 m13</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// m20 m21 m22 m23</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// m30 m31 m32 m33</span></span></code></pre></div><ol start="2" type="1"><li><p>public float this[int index] { get; set; }、 public floatthis[int row, int column] { get; set; } 由于按列填充，则 index 为 00，10 ，20，30， 01。。。顺序, 所以 this[1] == this[1, 0]</p></li><li><p>public static Matrix4x4 zero { get; } o矩阵、 public staticMatrix4x4 identity { get; } 单位矩阵</p></li><li><p>public Matrix4x4 transpose { get; } 转置矩阵, 逆变换矩阵, m[i,j]= m'[j, i]</p><ol type="1"><li>public static Matrix4x4 Transpose(Matrix4x4 m);</li></ol></li></ol><p><img src="/Sources/imgs/matrix4x4.png"></p><ol start="5" type="1"><li>变换<ol type="1"><li>public Quaternion rotation { get; } 旋转。<br></li><li>public Vector3 lossyScale { get; } 缩放.</li><li>public bool isIdentity { get; }是否为单位<code>Identity</code>矩阵,</li><li>GetColumn(3)或者 transpose.GetRow(3) 位置</li><li>public static Matrix4x4 Rotate(Quaternion q);</li><li>public static Matrix4x4 Scale(Vector3 vector);</li><li>public static Matrix4x4 Translate(Vector3 vector);</li></ol></li><li>public float determinant { get; } 矩阵的'面积/体积/超体积'相互垂直的话 等于<code>scalex * scaley * scalez</code><ol type="1"><li>public static float Determinant(Matrix4x4 m);</li></ol></li><li>public FrustumPlanes decomposeProjection { get; }, 矩阵视椎体,<ol type="1"><li>public static Matrix4x4 Frustum(float left, float right, floatbottom, float top, float zNear, float zFar);</li><li>public static Matrix4x4 Frustum(FrustumPlanes fp);</li><li>public static Matrix4x4 Ortho(float left, float right, float bottom,float top, float zNear, float zFar); 正交</li><li>public static Matrix4x4 Perspective(float fov, float aspect, floatzNear, float zFar); 透视</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a> <span class="kw">public</span> <span class="kw">struct</span> FrustumPlanes</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="dt">float</span> left<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="dt">float</span> right<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="dt">float</span> bottom<span class="op">;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="dt">float</span> top<span class="op">;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="dt">float</span> zNear<span class="op">;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     <span class="kw">public</span> <span class="dt">float</span> zFar<span class="op">;</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div></li><li>public Matrix4x4 inverse { get; } 逆矩阵.<ol type="1"><li>public static Matrix4x4 Inverse(Matrix4x4 m);</li><li>public static bool Inverse3DAffine(Matrix4x4 input, ref Matrix4x4result);</li></ol></li><li>public static Matrix4x4 LookAt(Vector3 from, Vector3 to, Vector3up);</li><li>public static Matrix4x4 LookAt(Vector3 from, Vector3 to, Vector3up);</li><li>public static Matrix4x4 TRS(Vector3 pos, Quaternion q, Vector3 s);构造平移旋转缩放矩阵。<ol type="1"><li>等同 Matrix4x4.Translate(transform.position) *Matrix4x4.Rotate(transform.rotation) *Matrix4x4.Scale(transform.lossyScale) =Matrix4x4.TRS(transform.position, transform.rotation,transform.lossyScale)</li><li>public void SetTRS(Vector3 pos, Quaternion q, Vector3 s);</li></ol></li><li>操作元素<ol type="1"><li>public Vector4 GetColumn(int index); 获取列，Unity按列填充，也等同于传统意义的行</li><li>public Vector4 GetRow(int index); 获取行，Unity按列填充，也等同于传统意义的列</li><li>public void SetColumn(int index, Vector4 column); 填充列，也等同于传统意义的行</li><li>public void SetRow(int index, Vector4 row); 填充行，也等同于传统意义的列</li></ol></li><li>乘, 实验效果一样？？？<ol type="1"><li>public Vector3 MultiplyPoint(Vector3 point);//返回由任意矩阵变化得到的位置v。如果这个矩阵是一个正规的3D变换矩阵，使用MultiplyPoint3x4比它更快。MultiplyPoint比较慢，但是能处理投影变换。</li><li>public Vector3 MultiplyPoint3x4(Vector3 point); //不包含投影</li><li>public Vector3 MultiplyVector(Vector3 vector);//只变换方向（旋转），仅考虑矩阵的旋转部分。</li></ol></li><li>public Plane TransformPlane(Plane plane); 平面转换</li><li>public bool ValidTRS(); //是否为有效矩阵.</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/entities/5.summy/"/>
      <url>/2022/08/10/unity/entities/5.summy/</url>
      
        <content type="html"><![CDATA[<h1 id="总结">总结</h1><h2 id="object-components">object components</h2><pre><code>public class DemoScript_1 : MonoBehaviour{    // Start is called before the first frame update    void Start()    {        var entityManager = World.DefaultGameObjectInjectionWorld.EntityManager;        var dog = new Dog();        var entity1 = entityManager.CreateEntity();        entityManager.AddComponentObject(entity1, dog);        var entity2 = entityManager.CreateEntity();        entityManager.AddComponentObject(entity2, dog);        dog.x = 10;        dog = entityManager.GetComponentObject&lt;Dog&gt;(entity1);        print(dog.x);               // 10        dog = entityManager.GetComponentObject&lt;Dog&gt;(entity2);        print(dog.x);               // 10        entityManager.RemoveComponent&lt;Dog&gt;(entity1);    }}public class Dog : IComponentData{      public int x;}</code></pre><p>AddComponentObject需要是class类型。<code>m_ManagedComponentData[iManagedComponent] = value;</code>更新。</p><h2 id="chunk-components">chunk components</h2><h2 id="shared-components">shared components</h2><h2 id="system-state-components">system state components</h2><h2 id="entityquery">EntityQuery</h2><h2 id="blob-assets">blob assets</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/entities/4.com-unity-rendering-hybrid/"/>
      <url>/2022/08/10/unity/entities/4.com-unity-rendering-hybrid/</url>
      
        <content type="html"><![CDATA[<h1 id="com.unity.rendering.hybrid">com.unity.rendering.hybrid</h1><blockquote><p>ecs 渲染插件</p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/entities/3.entityandcomponent/"/>
      <url>/2022/08/10/unity/entities/3.entityandcomponent/</url>
      
        <content type="html"><![CDATA[<h1 id="entity-and-component">Entity And Component</h1><h2 id="entity">Entity</h2><h2 id="component">Component</h2><h2 id="generateauthoringcomponent">GenerateAuthoringComponent</h2><h2 id="entityquerybuilder">EntityQueryBuilder</h2><h2 id="converttoentity">ConvertToEntity</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/entities/2.systems/"/>
      <url>/2022/08/10/unity/entities/2.systems/</url>
      
        <content type="html"><![CDATA[<h1 id="systems">Systems</h1><blockquote><p>ComponentSystemBase、SystemBase、ISystemBase、SystemState、Update</p></blockquote><h2 id="继承关系">继承关系</h2><ul><li>ComponentSystemBase<ul><li>SystemBase</li><li>JobComponentSystem</li><li>ComponentSystem<ul><li>EntityPatcherBlobAssetSystem</li><li>RetainBlobAssetSystem</li><li>ComponentSystemGroup<ul><li>InitializationSystemGroup</li><li>FixedStepSimulationSystemGroup</li><li>LateSimulationSystemGroup</li><li>SimulationSystemGroup</li><li>PresentationSystemGroup</li></ul></li><li>EntityCommandBufferSystem<ul><li>BeginInitializationEntityCommandBufferSystem</li><li>EndInitializationEntityCommandBufferSystem</li><li>BeginFixedStepSimulationEntityCommandBufferSystem</li><li>EndFixedStepSimulationEntityCommandBufferSystem</li><li>BeginSimulationEntityCommandBufferSystem</li><li>EndSimulationEntityCommandBufferSystem</li><li>BeginPresentationEntityCommandBufferSystem</li></ul></li></ul></li></ul></li></ul><h2 id="生命周期">生命周期</h2><h3 id="create">1.Create</h3><ul><li>OnCreateForCompiler(); 被调用于CreateInstance，被调用于World.CreateSystemInternal</li><li>OnCreate 被调用于CreateInstance，被调用于World.CreateSystemInternal</li></ul><pre><code>internal void CreateInstance(World world){    m_StatePtr = SystemState.Allocate();    m_StatePtr-&gt;InitManaged(world, GetType());    OnBeforeCreateInternal(world);    try    {        OnCreateForCompiler();        OnCreate();    }    catch    {        OnBeforeDestroyInternal();        OnAfterDestroyInternal();        throw;    }}</code></pre><h3 id="ondestroy">2.OnDestroy</h3><h3 id="update-主要">3. Update (主要)</h3><ul><li>ComponentSystem.Update</li></ul><pre><code>public sealed override void Update(){    var state = CheckedState();#if ENABLE_PROFILER    using (state-&gt;m_ProfilerMarker.Auto())#endif    {        state-&gt;BeforeUpdateResetRunTracker();        if (Enabled &amp;&amp; ShouldRunSystem())        {            if (!state-&gt;m_PreviouslyEnabled)            {                state-&gt;m_PreviouslyEnabled = true;                OnStartRunning();            }            BeforeOnUpdate();            var oldExecutingSystem = ms_ExecutingSystem;            ms_ExecutingSystem = this;            try            {                OnUpdate();            }            finally            {                ms_ExecutingSystem = oldExecutingSystem;                AfterOnUpdate();            }        }        else if (state-&gt;m_PreviouslyEnabled)        {            state-&gt;m_PreviouslyEnabled = false;            OnStopRunningInternal();        }    }}</code></pre><ul><li>JobComponentSystem.Update</li></ul><pre><code>public sealed override void Update(){    var state = CheckedState();#if ENABLE_PROFILER    using (state-&gt;m_ProfilerMarker.Auto())#endif    {        if (Enabled &amp;&amp; ShouldRunSystem())        {            if (!state-&gt;m_PreviouslyEnabled)            {                state-&gt;m_PreviouslyEnabled = true;                OnStartRunning();            }            var inputJob = BeforeOnUpdate();            JobHandle outputJob = new JobHandle();            var oldExecutingSystem = ms_ExecutingSystem;            ms_ExecutingSystem = this;            try            {                outputJob = OnUpdate(inputJob);            }            catch            {                ms_ExecutingSystem = oldExecutingSystem;                AfterOnUpdate(outputJob, false);                throw;            }            ms_ExecutingSystem = oldExecutingSystem;            AfterOnUpdate(outputJob, true);        }        else if (state-&gt;m_PreviouslyEnabled)        {            state-&gt;m_PreviouslyEnabled = false;            OnStopRunning();        }    }}</code></pre><ul><li>SystemBase</li></ul><pre><code>public sealed override void Update(){    var state = CheckedState();#if ENABLE_PROFILER    using (state-&gt;m_ProfilerMarker.Auto())#endif    {        state-&gt;BeforeUpdateResetRunTracker();        if (Enabled &amp;&amp; ShouldRunSystem())        {            if (!state-&gt;m_PreviouslyEnabled)            {                state-&gt;m_PreviouslyEnabled = true;                OnStartRunning();            }            state-&gt;BeforeOnUpdate();            var oldExecutingSystem = ms_ExecutingSystem;            ms_ExecutingSystem = this;            try            {                OnUpdate();            }            catch            {                ms_ExecutingSystem = oldExecutingSystem;                state-&gt;AfterOnUpdate();#if ENABLE_UNITY_COLLECTIONS_CHECKS                var hasSafetyError = false;                var details = default(SystemDependencySafetyUtility.SafetyErrorDetails);                state-&gt;CheckSafety(ref details, ref hasSafetyError);#endif                throw;            }            ms_ExecutingSystem = oldExecutingSystem;            state-&gt;AfterOnUpdate();#if ENABLE_UNITY_COLLECTIONS_CHECKS            {                var hasSafetyError = false;                var details = default(SystemDependencySafetyUtility.SafetyErrorDetails);                state-&gt;CheckSafety(ref details, ref hasSafetyError);                if (hasSafetyError)                {                    throw new InvalidOperationException(details.FormatToString(GetType()));                }            }#endif        }        else if (state-&gt;m_PreviouslyEnabled)        {            state-&gt;m_PreviouslyEnabled = false;            OnStopRunning();        }    }}</code></pre><h2 id="包含重要对象">包含重要对象</h2><ul><li>SystemState</li></ul><h2 id="其他分组属性">其他分组属性</h2><h3 id="updateingroup">UpdateInGroup</h3><h3 id="updateafter">UpdateAfter</h3><h3 id="updatebefore">UpdateBefore</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/entities/1.addsystemtoplayerloop/"/>
      <url>/2022/08/10/unity/entities/1.addsystemtoplayerloop/</url>
      
        <content type="html"><![CDATA[<h1 id="添加system到引擎的playerloop">添加System到引擎的PlayerLoop</h1><p>todo: SystemState、</p><p>只支持继承自<code>ComponentSystemBase</code>和<code>ISystemBase</code>.</p><h2 id="添加至world-缓存">添加至World 缓存</h2><h3 id="获取所有system">获取所有System</h3><p>反射获取继承自<code>ComponentSystemBase</code>/<code>ISystemBase</code>的所有类型。 （TypeManager 缓存）</p><h3 id="添加system-addsystemtorootlevelsystemgroupsinternal">添加System（AddSystemToRootLevelSystemGroupsInternal）</h3><p><strong>添加至 World.m_Systems</strong></p><ul><li><p>1.创建<code>InitializationSystemGroup</code>、<code>SimulationSystemGroup</code>、<code>PresentationSystemGroup</code>进行分类。</p></li><li><p>2.进行分类。继承自<code>ComponentSystemBase</code>的分为<code>managedTypes</code>类，继承自<code>ISystemBase</code>的分为<code>unmanagedTypes</code>类，</p></li></ul><h4 id="继承自componentsystembase的managedtypes类">继承自<code>ComponentSystemBase</code>的<code>managedTypes</code>类，</h4><p><code>AddSystemToUpdateList</code></p><ul><li><p>1.创建类型对象，添加至<code>World.m_Systems</code>。并将<code>ComponentSystemBase</code> 以下的type 和system对象添加至<code>World.m_SystemLookup</code>缓存。</p></li><li><p>2.调用<code>system.CreateInstance</code> ，<strong>创建<code>SystemState</code>成员。</strong>， 并调用周期函数OnBeforeCreateInternal、OnCreateForCompiler、OnCreate/OnBeforeDestroyInternal、OnAfterDestroyInternal(异常时调用).++Version.</p></li><li><p>3.得到正确添加的types的System 。</p></li><li><p>4.添加update系统。排除直接等于<code>InitializationSystemGroup</code>、<code>SimulationSystemGroup</code>、<code>PresentationSystemGroup</code>的类型。(这三个开始独立添加了)。</p><ul><li>1.不包含UpdateInGroupAttribute属性的添加至<code>simulationSystemGroup.AddSystemToUpdateList(system);</code></li><li>2.包含UpdateInGroupAttribute属性的，遍历<code>UpdateInGroupAttribute属性</code>。属性的Group 必须继承自<code>ComponentSystemGroup</code>，并且<code>OrderFirst</code>/<code>OrderLast</code>只能选一个。如果group存在，添加至group。<code>group.AddSystemToUpdateList(system)</code></li></ul></li></ul><h4 id="继承自isystembase的unmanagedtypes类">继承自<code>ISystemBase</code>的<code>unmanagedTypes</code>类，</h4><p><code>AddUnmanagedSystemToUpdateList</code></p><ul><li>1.调用<code>world.CreateUnmanagedSystem(type);</code> 创建</li><li>2.不含UpdateInGroupAttribute属性的添加至<code>simulationSystemGroup.AddUnmanagedSystemToUpdateList(system);</code></li><li>3.不含UpdateInGroupAttribute属性.遍历<code>UpdateInGroupAttribute属性</code>。属性的Group 必须继承自<code>ComponentSystemGroup</code>，并且<code>OrderFirst</code>/<code>OrderLast</code>只能选一个。如果group存在，添加至group。<code>group.AddUnmanagedSystemToUpdateList(system)</code></li></ul><h3 id="update-player-loop">Update player loop</h3><pre><code>// Update player loopinitializationSystemGroup.SortSystems();simulationSystemGroup.SortSystems();presentationSystemGroup.SortSystems();</code></pre><h2 id="添加system-scriptbehaviourupdateorder.addworldtocurrentplayerloopworld">添加System(ScriptBehaviourUpdateOrder.AddWorldToCurrentPlayerLoop(world)）</h2><p>添加至引擎<code>PlayerLoopSystem</code> 执行。</p><ul><li>1.主要通过框架的 <code>ScriptBehaviourUpdateOrder</code>辅助函数,将<code>InitializationSystemGroup</code>、<code>SimulationSystemGroup</code>、<code>PresentationSystemGroup</code>的类型的Group进行<code>Append</code>添加至PlayerLoopSystem.对应的<code>UnityEngine.PlayerLoop.Initialization</code>、<code>UnityEngine.PlayerLoop.Update</code>、<code>UnityEngine.PlayerLoop.PreLateUpdate</code>。</li><li><ol start="2" type="1"><li><h3 id="scriptbehaviourupdateorder">ScriptBehaviourUpdateOrder</h3></li></ol></li></ul><pre><code>[AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]public class UpdateInGroupAttribute : Attribute{    public bool OrderFirst = false;    public bool OrderLast = false;    public UpdateInGroupAttribute(Type groupType)    {        if (groupType == null)            throw new ArgumentNullException(nameof(groupType));        GroupType = groupType;    }    public Type GroupType { get; }}</code></pre><h3 id="添加至playerloopsystem对应的delegate包装">添加至PlayerLoopSystem对应的delegate包装</h3><pre><code> // FIXME: HACK! - mono 4.6 has problems invoking virtual methods as delegates from native, so wrap the invocation in a non-virtual classinternal class DummyDelegateWrapper{    internal ComponentSystemBase System =&gt; m_System;    private readonly ComponentSystemBase m_System;    public DummyDelegateWrapper(ComponentSystemBase sys)    {        m_System = sys;    }    public unsafe void TriggerUpdate()    {        if (m_System.m_StatePtr != null)        {            m_System.Update();        }    }}</code></pre><pre><code>[AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = true)]public class UpdateBeforeAttribute : Attribute{    public UpdateBeforeAttribute(Type systemType)    {        if (systemType == null)            throw new ArgumentNullException(nameof(systemType));        SystemType = systemType;    }    public Type SystemType { get; }}[AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct)]    public class UpdateInGroupAttribute : Attribute    {        public bool OrderFirst = false;        public bool OrderLast = false;        public UpdateInGroupAttribute(Type groupType)        {            if (groupType == null)                throw new ArgumentNullException(nameof(groupType));            GroupType = groupType;        }        public Type GroupType { get; }    }</code></pre><h2 id="section"></h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/entities/0.entities-jie-gou/"/>
      <url>/2022/08/10/unity/entities/0.entities-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="entities-结构">Entities 结构</h1><h2 id="playerloop">PlayerLoop</h2><p>命名空间:<code>UnityEngine.LowLevel</code>dll:UnityEngine.CoreModule.dll</p><h3 id="引擎默认playerloopsystem">引擎默认<code>PlayerLoopSystem</code>：</h3><ul><li>1.UnityEngine.PlayerLoop.TimeUpdate</li><li>2.UnityEngine.PlayerLoop.Initialization</li><li>3.UnityEngine.PlayerLoop.EarlyUpdate</li><li>4.UnityEngine.PlayerLoop.FixedUpdate</li><li>5.UnityEngine.PlayerLoop.PreUpdate</li><li>6.UnityEngine.PlayerLoop.Update</li><li>7.UnityEngine.PlayerLoop.PreLateUpdate</li><li>8.UnityEngine.PlayerLoop.PostLateUpdate</li></ul><h3 id="对比monobehaviour执行顺序"><strong>对比MonoBehaviour执行顺序</strong></h3><p>MonoBehaviour.Awake/OnEnable 捆绑立即执行。</p><ul><li><p>1.UnityEngine.PlayerLoop.Initialization</p></li><li><p>2.UnityEngine.PlayerLoop.EarlyUpdate</p></li><li><p>a.MonoBehaviour.Start // 或无</p></li><li><p>3.UnityEngine.PlayerLoop.FixedUpdate</p></li><li><p>b.MonoBehaviour.FixedUpdate // 或无</p></li><li><p>4.UnityEngine.PlayerLoop.PreUpdate</p></li><li><p>5.UnityEngine.PlayerLoop.Update</p></li><li><p>c.MonoBehaviour.Update // 或无</p></li><li><p>6.UnityEngine.PlayerLoop.PreLateUpdate</p></li><li><p>d.MonoBehaviour.PlayerLoop.LateUpdate// 或无</p></li><li><p>7.UnityEngine.PlayerLoop.PostLateUpdate</p></li><li><p>8.UnityEngine.PlayerLoop.TimeUpdate</p></li></ul><p>可以看出对应的相同函数都优先于mono的对应函数。常用的System类型：Initialization，Update，PreLateUpdate</p><h3 id="playerloopsystem-原型">PlayerLoopSystem 原型：</h3><pre><code>namespace UnityEngine.LowLevel{    //    // 摘要:    //     The representation of a single system being updated by the player loop in Unity.    [MovedFrom("UnityEngine.Experimental.LowLevel")]    public struct PlayerLoopSystem    {        public Type type;        public PlayerLoopSystem[] subSystemList;        public UpdateFunction updateDelegate;        public IntPtr updateFunction;        public IntPtr loopConditionFunction;        public override string ToString();        public delegate void UpdateFunction();    }}</code></pre><h3 id="playerloop-的简单测试使用">PlayerLoop 的简单测试使用</h3><h4 id="直接注册方法">1.直接注册方法</h4><pre><code>internal class PlayerLoopSystemFunctionTest{     internal void UnityEngine_PlayerLoop_TimeUpdate(){        Debug.Log("UnityEngine_PlayerLoop_TimeUpdate  excuted" + ",Frame:"+Time.frameCount);    }    internal void UnityEngine_PlayerLoop_Initialization(){        Debug.Log("UnityEngine_PlayerLoop_Initialization  excuted" + ",Frame:"+Time.frameCount);    }    internal void UnityEngine_PlayerLoop_EarlyUpdate(){        Debug.Log("UnityEngine_PlayerLoop_EarlyUpdate  excuted" + ",Frame:"+Time.frameCount);    }    internal void UnityEngine_PlayerLoop_FixedUpdate(){        Debug.Log("UnityEngine_PlayerLoop_FixedUpdate  excuted" + ",Frame:"+Time.frameCount);    }    internal void UnityEngine_PlayerLoop_PreUpdate(){        Debug.Log("UnityEngine_PlayerLoop_PreUpdate  excuted" + ",Frame:"+Time.frameCount);    }    internal void UnityEngine_PlayerLoop_Update(){        Debug.Log("UnityEngine_PlayerLoop_Update  excuted" + ",Frame:"+Time.frameCount);    }    internal void UnityEngine_PlayerLoop_PreLateUpdate(){        Debug.Log("UnityEngine_PlayerLoop_PreLateUpdate  excuted" + ",Frame:"+Time.frameCount);    }        internal void UnityEngine_PlayerLoop_PostLateUpdate(){        Debug.Log("UnityEngine_PlayerLoop_PostLateUpdate  excuted" + ",Frame:"+Time.frameCount);    }}</code></pre><p>注册添加代码</p><pre><code>PlayerLoopSystem rootPlayerLoopSystem = PlayerLoop.GetDefaultPlayerLoop();rootPlayerLoopSystem.subSystemList[0].updateDelegate = functionTest.UnityEngine_PlayerLoop_TimeUpdate;rootPlayerLoopSystem.subSystemList[1].updateDelegate = functionTest.UnityEngine_PlayerLoop_Initialization;rootPlayerLoopSystem.subSystemList[2].updateDelegate = functionTest.UnityEngine_PlayerLoop_EarlyUpdate;rootPlayerLoopSystem.subSystemList[3].updateDelegate = functionTest.UnityEngine_PlayerLoop_FixedUpdate;rootPlayerLoopSystem.subSystemList[4].updateDelegate = functionTest.UnityEngine_PlayerLoop_PreUpdate;rootPlayerLoopSystem.subSystemList[5].updateDelegate = functionTest.UnityEngine_PlayerLoop_Update;rootPlayerLoopSystem.subSystemList[6].updateDelegate = functionTest.UnityEngine_PlayerLoop_PreLateUpdate;rootPlayerLoopSystem.subSystemList[7].updateDelegate = functionTest.UnityEngine_PlayerLoop_PostLateUpdate;PlayerLoop.SetPlayerLoop(rootPlayerLoopSystem);</code></pre><h4 id="注册ubsystem">2.注册ubSystem</h4><pre><code>// **rootPlayerLoopSystem 的type 为null。**//playerLoopSystemType 为引擎默认`PlayerLoopSystem`的类型之一。static bool AppendSystemToPlayerLoopListImpl(ComponentSystemBase system, ref PlayerLoopSystem playerLoop,    Type playerLoopSystemType){    if (playerLoop.type == playerLoopSystemType)    {        var del = new DummyDelegateWrapper(system);        int oldListLength = (playerLoop.subSystemList != null) ? playerLoop.subSystemList.Length : 0;        var newSubsystemList = new PlayerLoopSystem[oldListLength + 1];        for (var i = 0; i &lt; oldListLength; ++i)            newSubsystemList[i] = playerLoop.subSystemList[i];        newSubsystemList[oldListLength].type = system.GetType();        newSubsystemList[oldListLength].updateDelegate = del.TriggerUpdate;        playerLoop.subSystemList = newSubsystemList;        return true;    }    if (playerLoop.subSystemList != null)    {        for(int i=0; i&lt;playerLoop.subSystemList.Length; ++i)        {            if (AppendSystemToPlayerLoopListImpl(system, ref playerLoop.subSystemList[i], playerLoopSystemType))                return true;        }    }    return false;}</code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/engine/5.skinnedmesh-yuan-li/"/>
      <url>/2022/08/10/unity/engine/5.skinnedmesh-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="skinned-mesh原理解析">Skinned Mesh原理解析</h2><ol type="1"><li><a href="https://blog.csdn.net/gamemonkey/article/details/44058291">原理解析</a></li><li><a href="https://blog.csdn.net/tangcat123/article/details/72391645">原理以及应用</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/engine/4.wang-ge-you-hua/"/>
      <url>/2022/08/10/unity/engine/4.wang-ge-you-hua/</url>
      
        <content type="html"><![CDATA[<h2 id="meshy优化">Meshy优化</h2><ol type="1"><li><a href="http://www.skywind.me/blog/topics/network">mesh优化</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/engine/3.ecs/"/>
      <url>/2022/08/10/unity/engine/3.ecs/</url>
      
        <content type="html"><![CDATA[<h2 id="ecs系统-与帧同步">ECS系统 与帧同步</h2><ol type="1"><li><a href="https://connect.unity.com/p/zhi-bo-hui-gu-shi-yong-unity-ecskai-fa-wo-de-shi-jie">untiyecs</a></li><li><a href="http://www.skywind.me/blog/archives/131">帧同步</a></li><li><a href="https://www.cnblogs.com/blueberryzzz/p/10957921.html">EntitasECS</a></li><li><a href="https://github.com/sschmid/Entitas-CSharp">EntitasECS</a></li><li><a href="https://blog.uwa4d.com/archives/USparkle_ECS1.html">ECS设计思想</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/engine/2.yu-dao-wen-ti-yi-ji-fang-an/"/>
      <url>/2022/08/10/unity/engine/2.yu-dao-wen-ti-yi-ji-fang-an/</url>
      
        <content type="html"><![CDATA[<h2 id="遇到问题以及方案">遇到问题以及方案</h2><ol type="1"><li><a href="https://answer.uwa4d.com/question/5a55838dd79fbe3a4aafc508">变形</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/engine/1.yin-qing-xiang-guan/"/>
      <url>/2022/08/10/unity/engine/1.yin-qing-xiang-guan/</url>
      
        <content type="html"><![CDATA[<h2 id="引擎相关">引擎相关</h2><ol type="1"><li><a href="https://blog.csdn.net/cyf649669121/article/details/82117638">血条格子的另类制作方法</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/engine/0.unity-qian-duan-ji-zhu/"/>
      <url>/2022/08/10/unity/engine/0.unity-qian-duan-ji-zhu/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="http://www.luzexi.com/%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF/index.html">目录</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/csharp/3.stringbuilder/"/>
      <url>/2022/08/10/unity/csharp/3.stringbuilder/</url>
      
        <content type="html"><![CDATA[<h1 id="stringbuilder测评">StringBuilder测评</h1><h2 id="一主要接口">一、主要接口</h2><ul><li><ol type="1"><li>Append</li></ol><ul><li>这个接口, 除了参数<code>string类型</code> 和 <code>char[]</code>类型都会调用参数的 <code>ToString</code></li><li><code>unsafe fixed</code> 拷贝。Buffer.Memcpy((byte<em>)dmem,(byte</em>)smem, charCount * 2); // 2 used everywhere instead ofsizeof(char)</li></ul></li><li><ol start="2" type="1"><li>AppendFormat 实现方式通过 format 逐字节解析 进行Append,参数通过参数的IFormattable接口<code>ToString</code>、或者类型的ToString。 所以非 <code>string类型</code> 和<code>char[]</code>类型都会调用参数的 <code>ToString</code>。</li></ol></li><li><ol start="3" type="1"><li>AppendLine 等于 Append <code>"\r\n"</code>。</li></ol></li><li><ol start="4" type="1"><li>ToString <code>string.FastAllocateString(Length);</code><code>unsafe fixed</code> 拷贝。</li></ol></li><li><ol start="5" type="1"><li>Clear <code>~=</code> Length = 0</li></ol></li><li><ol start="6" type="1"><li>其他辅助方法 Insert、Remove、Replace</li></ol></li></ul><h2 id="二-valuetype-类型的tostring">二、 ValueType 类型的ToString</h2><h3 id="tostring">ToString</h3><pre><code>1. (System.SByte)       无gc2. (System.Int16)       无gc3. (System.Int32)       无gc5. (System.Int64)       无gc6. (System.Single)          有gc、 28b7. (System.Double)          有gc、 56b、 两次gc8. (System.Byte)        无gc 9. (System.UInt16)      无gc10. (System.UInt32)     无gc11. (System.UInt64)     无gc12. (System.Boolean)        有gc、 首次70b，后面无gc14. (System.Decimal)        有gc、 76b15. (System.Enum)           有gc、 首次gc和enum 名称字节数有关。后面固定 20b16. (System.Char)           有gc、 28b</code></pre><p>类型<code>IFormattable</code>的ToString方法默认等同于类型的ToString，除非设置IFormatProvider <code>char</code>、<code>Boolean</code>没有IFormattable接口</p><h2 id="三总结">三、总结</h2><ul><li><ol type="1"><li>无论是StringBuilder的Append，还是StringBuilder的AppendFormat，参数类型为<code>String</code> 和 <code>char[]</code>，则无gc</li></ol></li><li><ol start="2" type="1"><li>值类型 使用StringBuilder 是否有gc依据 类型ToString()</li></ol></li><li><ol start="3" type="1"><li>浮点型的gc，主要来自内存储存方式。</li></ol></li><li>Int32.ToString</li></ul><pre><code>    [SecuritySafeCritical]    public string ToString()    {        return Number.FormatInt32(this, null, NumberFormatInfo.CurrentInfo);    }        public static NumberFormatInfo CurrentInfo        {            get            {                CultureInfo currentCulture = Thread.CurrentThread.CurrentCulture;                if (!currentCulture.m_isInherited)                {                    NumberFormatInfo numInfo = currentCulture.numInfo;                    if (numInfo != null)                    {                        return numInfo;                    }                }                return (NumberFormatInfo)currentCulture.GetFormat(typeof(NumberFormatInfo));            }        }        // Token: 0x060011BA RID: 4538 RVA: 0x00048649 File Offset: 0x00046849        public static string FormatInt32(int value, string format, NumberFormatInfo info)        {            return NumberFormatter.NumberToString(format, value, info);        }                public static string NumberToString(string format, int value, IFormatProvider fp)                {                    NumberFormatter instance = NumberFormatter.GetInstance(fp);                    instance.Init(format, value, 10);                    string result = instance.IntegerToString(format, fp);                    instance.Release();                    return result;                }                    // Token: 0x06001A02 RID: 6658 RVA: 0x00060C24 File Offset: 0x0005EE24                    private void Init(string format, int value, int defPrecision)                    {                        this.Init(format);                        this._defPrecision = defPrecision;                        this._positive = (value &gt;= 0);                        if (value == 0 || this._specifier == 'X')                        {                            this.InitHex((ulong)((long)value));                            return;                        }                        if (value &lt; 0)                        {                            value = -value;                        }                        this.InitDecHexDigits((uint)value);                        this._decPointPos = (this._digitsLen = this.DecHexLen());                    }                    case 'G':                    if (this._precision &lt;= 0)                    {                        return this.FormatDecimal(-1, numberFormatInstance);                    }                    return this.FormatGeneral(this._precision, numberFormatInstance);</code></pre><h2 id="区分符">区分符</h2><ol type="1"><li>format == null|| format.Length == 0 <code>G</code></li><li>format 首字符小写 Upper =false <code>首字符 - ·a· + ·A·</code></li><li>format 首字符大写 <code>0</code></li></ol><p><a href="https://referencesource.microsoft.com/#mscorlib/system/text/stringbuilder.cs,e8eaef3c361184bc">StringBuilder源码参考</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/csharp/2.tong-bu-ji-yuan/"/>
      <url>/2022/08/10/unity/csharp/2.tong-bu-ji-yuan/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://www.cnblogs.com/zgq0/p/8780893.html">donet同步基元</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/csharp/1.wu-gc-zi-fu-chuan-pin-jie/"/>
      <url>/2022/08/10/unity/csharp/1.wu-gc-zi-fu-chuan-pin-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="无gc字符串拼接">无GC字符串拼接</h2><p><a href="https://www.xuanyusong.com/archives/4601">https://www.xuanyusong.com/archives/4601</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/unity/android/1.unity-bian-yi-dao-android-yuan-li/"/>
      <url>/2022/08/10/unity/android/1.unity-bian-yi-dao-android-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="unity编译到android">Unity编译到Android</h2><ol type="1"><li><a href="https://cloud.tencent.com/developer/article/1004543">启动流程</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/python/3.qi-ta/"/>
      <url>/2022/08/10/python/3.qi-ta/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://blog.csdn.net/weixin_42124234/article/details/92799133?utm_medium=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-BlogCommendFromMachineLearnPai2-1.add_param_isCf">pip改为国内镜像</a></li><li></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/python/2.ji-qi-xue-xi/"/>
      <url>/2022/08/10/python/2.ji-qi-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习">机器学习</h2><ol type="1"><li><a href="https://cuijiahua.com/blog/ml/">机器学习教程</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/python/1.cha-jian/"/>
      <url>/2022/08/10/python/1.cha-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="插件">插件</h2><ol type="1"><li>pysvn</li><li><a href="https://matplotlib.org/">Matplotlib</a></li><li><a href="https://blog.csdn.net/u014070279/article/details/53292366">图像变素描</a></li><li><a href="https://scikit-image.org/docs">scikit-image</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/05pbr/01.pbr-jie-shao/"/>
      <url>/2022/08/10/opengl/05pbr/01.pbr-jie-shao/</url>
      
        <content type="html"><![CDATA[<h1 id="pbr介绍">PBR介绍</h1><h2 id="介绍">介绍</h2><blockquote><p>PBR，或者用更通俗一些的称呼是指基于物理的渲染(Physically BasedRendering)，它指的是一些在不同程度上都基于与现实世界的物理原理更相符的基本理论所构成的渲染技术的集合。</p></blockquote><ul><li>判断一种PBR光照模型是否是基于物理的，必须满足以下三个条件（不用担心，我们很快就会了解它们的）：<ol type="1"><li>基于微平面(Microfacet)的表面模型。</li><li>能量守恒</li><li>应用基于物理的BRDF。</li></ol></li></ul><h2 id="微平面模型">微平面模型</h2><p>所有的PBR技术都基于微平面理论。这项理论认为，达到微观尺度之后任何平面都可以用被称为微平面(Microfacets)的细小镜面来进行描绘。根据平面粗糙程度的不同，这些细小镜面的取向排列可以相当不一致。</p><p>产生的效果就是：一个平面越是粗糙，这个平面上的微平面的排列就越混乱。这些微小镜面这样无序取向排列的影响就是，当我们特指镜面光/镜面反射时，入射光线更趋向于向完全不同的方向发散(Scatter)开来，进而产生出分布范围更广泛的镜面反射。而与之相反的是，对于一个光滑的平面，光线大体上会更趋向于向同一个方向反射，造成更小更锐利的反射。微平面的取向方向与中间向量的方向越是一致，镜面反射的效果就越是强烈越是锐利。然后再加上一个介于0到1之间的粗糙度参数，这样我们就能概略的估算微平面的取向情况了。我们可以看到，较高的粗糙度值显示出来的镜面反射的轮廓要更大一些。与之相反地，较小的粗糙值显示出的镜面反射轮廓则更小更锐利。</p><h2 id="能量守恒">能量守恒</h2><p>微平面近似法使用了这样一种形式的能量守恒(EnergyConservation)：出射光线的能量永远不能超过入射光线的能量（发光面除外）。为了遵守能量守恒定律，我们需要对漫反射光和镜面反射光之间做出明确的区分。当一束光线碰撞到一个表面的时候，它就会分离成一个折射部分和一个反射部分。反射部分就是会直接反射开来而不会进入平面的那部分光线，这就是我们所说的镜面光照。而折射部分就是余下的会进入表面并被吸收的那部分光线，这也就是我们所说的漫反射光照。这里还有一些细节需要处理，因为当光线接触到一个表面的时候折射光是不会立即就被吸收的。通过物理学我们可以得知，光线实际上可以被认为是一束没有耗尽就不停向前运动的能量，而光束是通过碰撞的方式来消耗能量。每一种材料都是由无数微小的粒子所组成，这些粒子都能如下图所示一样与光线发生碰撞。这些粒子在每次的碰撞中都可以吸收光线所携带的一部分或者是全部的能量而后转变成为热量。</p><p>我们按照能量守恒的关系，首先计算镜面反射部分，它的值等于入射光线被反射的能量所占的百分比。然后折射光部分就可以直接由镜面反射部分计算得出：</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> kS <span class="op">=</span> calculateSpecularComponent<span class="op">(...);</span> <span class="co">// 反射/镜面 部分</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> kD <span class="op">=</span> <span class="fl">1.0</span> <span class="op">-</span> ks<span class="op">;</span>                        <span class="co">// 折射/漫反射 部分</span></span></code></pre></div><h2 id="反射率方程">反射率方程</h2><p>在这里我们引入了一种被称为渲染方程(RenderEquation)的东西。它是某些聪明绝顶人所构想出来的一个精妙的方程式，是如今我们所拥有的用来模拟光的视觉效果最好的模型。基于物理的渲染所坚定的遵循的是一种被称为反射率方程(TheReflectance Equation)的渲染方程的<code>特化版本</code>。要正确的理解PBR很重要的一点就是要首先透彻的理解反射率方程： <span class="math display">\[L_{0}(p, w_{0}) = \int_{\Omega}{f_r(p, w_i, w_0)L_i(p,w_i)n*w_{i}dw_{i}}  , d 代表到光源距离，K_c、K_l、K_q 可查表。\]</span></p><p><strong>//TODO</strong></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/11.kang-ju-chi/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/11.kang-ju-chi/</url>
      
        <content type="html"><![CDATA[<h1 id="抗锯齿">抗锯齿</h1><blockquote><p>对形成边缘的像素。这种现象被称之为走样(Aliasing)。有很多种抗锯齿（Anti-aliasing，也被称为反走样）的技术能够帮助我们缓解这种现象，从而产生更平滑的边缘。</p></blockquote><blockquote><p>最开始我们有一种叫做<code>超采样抗锯齿(Super Sample Anti-aliasing, SSAA)</code>的技术，它会使用比正常分辨率更高的分辨率（即超采样）来渲染场景，当图像输出在帧缓冲中更新时，分辨率会被下采样(Downsample)至正常的分辨率。这些额外的分辨率会被用来防止锯齿边缘的产生。虽然它确实能够解决走样的问题，但是由于这样比平时要绘制更多的片段，它也会带来很大的性能开销。所以这项技术只拥有了短暂的辉煌。</p></blockquote><blockquote><p>然而，在这项技术的基础上也诞生了更为现代的技术，叫做<code>多重采样抗锯齿(Multisample Anti-aliasing, MSAA)</code>。它借鉴了SSAA背后的理念，但却以更加高效的方式实现了抗锯齿。</p></blockquote><h2 id="多重采样-msaa">多重采样 MSAA</h2><h3 id="光栅器">光栅器</h3><p>光栅器是位于最终处理过的顶点之后到片段着色器之前所经过的所有的算法与过程的总和。光栅器会将一个图元的所有顶点作为输入，并将它转换为一系列的片段。顶点坐标理论上可以取任意值，但片段不行，因为它们受限于你窗口的分辨率。顶点坐标与片段之间几乎永远也不会有一对一的映射，所以光栅器必须以某种方式来决定每个顶点最终所在的片段/屏幕坐标。</p><p>每个像素的中心包含有一个采样点(SamplePoint)，它会被用来决定这个三角形是否遮盖了某个像素。图中红色的采样点被三角形所遮盖，在每一个遮住的像素处都会生成一个片段。虽然三角形边缘的一些部分也遮住了某些屏幕像素，但是这些像素的采样点并没有被三角形内部所遮盖，所以它们不会受到片段着色器的影响。</p><p>由于屏幕像素总量的限制，有些边缘的像素能够被渲染出来，而有些则不会。结果就是我们使用了不光滑的边缘来渲染图元，导致之前讨论到的锯齿边缘。</p><h3 id="多重采样">多重采样</h3><p>多重采样所做的正是将单一的采样点变为多个采样点（这也是它名称的由来）。我们不再使用像素中心的单一采样点，取而代之的是以特定图案排列的4个子采样点(Subsample)。我们将用这些子采样点来决定像素的遮盖度。当然，这也意味着颜色缓冲的大小会随着子采样点的增加而增加。<code>采样点的数量可以是任意的，更多的采样点能带来更精确的遮盖率。</code></p><p>MSAA真正的工作方式是，无论三角形遮盖了多少个子采样点，（每个图元中）每个像素只运行一次片段着色器。片段着色器所使用的顶点数据会插值到每个像素的中心，所得到的结果颜色会被储存在每个被遮盖住的子采样点中。当颜色缓冲的子样本被图元的所有颜色填满时，所有的这些颜色将会在每个像素内部平均化。因为上图的4个采样点中只有2个被遮盖住了，这个像素的颜色将会是三角形颜色与其他两个采样点的颜色（在这里是无色）的平均值，最终形成一种淡蓝色。</p><h2 id="opengl-中的msaa">OpenGL 中的MSAA</h2><p>我们想要在OpenGL中使用MSAA，我们必须要使用一个能在每个像素中存储大于1个颜色值的颜色缓冲（因为多重采样需要我们为每个采样点都储存一个颜色）。所以，我们需要一个新的缓冲类型，来存储特定数量的多重采样样本，它叫做多重采样缓冲(MultisampleBuffer)。</p><p>大多数的窗口系统都应该提供了一个多重采样缓冲，用以代替默认的颜色缓冲。GLFW同样给了我们这个功能，我们所要做的只是提示(Hint)GLFW，我们希望使用一个包含N个样本的多重采样缓冲。这可以在创建窗口之前调用glfwWindowHint来完成。</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_SAMPLES<span class="op">,</span> <span class="dv">4</span><span class="op">);</span></span></code></pre></div><p>现在再调用glfwCreateWindow创建渲染窗口时，每个屏幕坐标就会使用一个包含4个子采样点的颜色缓冲了。GLFW会自动创建一个每像素4个子采样点的深度和样本缓冲。这也意味着所有缓冲的大小都增长了4倍。</p><p>现在我们已经向GLFW请求了多重采样缓冲，我们还需要调用glEnable并启用GL_MULTISAMPLE，来启用多重采样。在大多数OpenGL的驱动上，多重采样都是默认启用的，所以这个调用可能会有点多余，但显式地调用一下会更保险一点。这样子不论是什么OpenGL的实现都能够正常启用多重采样了。</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    glEnable<span class="op">(</span>GL_MULTISAMPLE<span class="op">);</span></span></code></pre></div><p>只要默认的帧缓冲有了多重采样缓冲的附件，我们所要做的只是调用glEnable来启用多重采样。因为多重采样的算法都在OpenGL驱动的光栅器中实现了，我们不需要再多做什么。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/10.shi-li-hua/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/10.shi-li-hua/</url>
      
        <content type="html"><![CDATA[<h1 id="实例化">实例化</h1><blockquote><p>对于绘制很多相同顶点属性的物体,仅仅是mvp不同。通常的绘制方式是使用循环调用<code>glDrawArrays</code>/<code>glDrawElements</code>来绘制。导致cpu调度gpu成为瓶颈。与绘制顶点本身相比，使用glDrawArrays或glDrawElements函数告诉GPU去绘制你的顶点数据会消耗更多的性能，因为OpenGL在绘制顶点数据之前需要做很多准备工作（比如告诉GPU该从哪个缓冲读取数据，从哪寻找顶点属性，而且这些都是在相对缓慢的CPU到GPU总线(CPUto GPU Bus)上进行的）。所以，即便渲染顶点非常快，命令GPU去渲染却未必。<code>glDrawArraysInstanced</code>/<code>glDrawElementsInstanced</code>。</p></blockquote><h2 id="实践一绘制100个quad">实践一,绘制100个quad</h2><blockquote><p>这100个quad使用的变量都相同， 除了位置，位置使用<code>相同的位置 + 偏移</code>。</p></blockquote><h3 id="数据准备">数据准备</h3><ol type="1"><li>顶点</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> quadVertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 位置          // 颜色</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span></code></pre></div><ol start="2" type="1"><li>偏移值的生成</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//生成 100个偏移值</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec2 translations<span class="op">[</span><span class="dv">100</span><span class="op">];</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> index <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> offset <span class="op">=</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> y <span class="op">=</span> <span class="op">-</span><span class="dv">10</span><span class="op">;</span> y <span class="op">&lt;</span> <span class="dv">10</span><span class="op">;</span> y <span class="op">+=</span> <span class="dv">2</span><span class="op">)</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">int</span> x <span class="op">=</span> <span class="op">-</span><span class="dv">10</span><span class="op">;</span> x <span class="op">&lt;</span> <span class="dv">10</span><span class="op">;</span> x <span class="op">+=</span> <span class="dv">2</span><span class="op">)</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>vec2 translation<span class="op">;</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>            translation<span class="op">.</span>x <span class="op">=</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>x <span class="op">/</span> <span class="fl">10.0</span><span class="bu">f</span> <span class="op">+</span> offset<span class="op">;</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>            translation<span class="op">.</span>y <span class="op">=</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>y <span class="op">/</span> <span class="fl">10.0</span><span class="bu">f</span> <span class="op">+</span> offset<span class="op">;</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            translations<span class="op">[</span>index<span class="op">++]</span> <span class="op">=</span> translation<span class="op">;</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="3" type="1"><li>buffer准备</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//偏移值buffer</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> instanceVBO<span class="op">;</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>instanceVBO<span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> instanceVBO<span class="op">);</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>vec2<span class="op">)</span> <span class="op">*</span> <span class="dv">100</span><span class="op">,</span> <span class="op">&amp;</span>translations<span class="op">[</span><span class="dv">0</span><span class="op">],</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> quadVAO<span class="op">,</span> quadVBO<span class="op">;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>quadVAO<span class="op">);</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>quadVBO<span class="op">);</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>quadVAO<span class="op">);</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> quadVBO<span class="op">);</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>quadVertices<span class="op">),</span> quadVertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">//顶点和颜色</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">5</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">5</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">2</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">//顶点属性2 使用instanceVBO，的vec2</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> instanceVBO<span class="op">);</span> <span class="op">/</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>vec2<span class="op">)</span> <span class="co">/*2 * sizeof(float)*/</span><span class="op">,</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>    glVertexAttribDivisor<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span> </span></code></pre></div><ol start="4" type="1"><li>绘制</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>quadVAO<span class="op">);</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//一个quad两个三角形6个顶点， 绘制100 个</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    glDrawArraysInstanced<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">100</span><span class="op">);</span> </span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span></code></pre></div><h3 id="着色器">着色器</h3><ol type="1"><li>顶点着色器</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec2 aPos<span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">1</span><span class="op">)</span> in vec3 aColor<span class="op">;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//使用不同的偏移来计算位置</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">2</span><span class="op">)</span> in vec2 aOffset<span class="op">;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    out vec3 fColor<span class="op">;</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>        fColor <span class="op">=</span> aColor<span class="op">;</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> vec4<span class="op">(</span>aPos <span class="op">+</span> aOffset<span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>片元着色器</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>out vec4 FragColor<span class="op">;</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>in vec3 fColor<span class="op">;</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    FragColor <span class="op">=</span> vec4<span class="op">(</span>fColor<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><h2 id="实践二使用模型并且拥有不同的位置和缩放">实践二，使用模型，并且拥有不同的位置和缩放。</h2><h3 id="数据准备-1">数据准备</h3><ol type="1"><li>model矩阵生成</li></ol><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> amount <span class="op">=</span> <span class="dv">100000</span><span class="op">;</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>mat4<span class="op">*</span> modelMatrices<span class="op">;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    modelMatrices <span class="op">=</span> <span class="kw">new</span> glm<span class="op">::</span>mat4<span class="op">[</span>amount<span class="op">];</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">//设置随机数种子</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    srand<span class="op">(</span>glfwGetTime<span class="op">());</span> </span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> radius <span class="op">=</span> <span class="fl">150.0</span><span class="op">;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> offset <span class="op">=</span> <span class="fl">25.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">//随机位置、缩放、旋转的 model矩阵</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> amount<span class="op">;</span> i<span class="op">++)</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 1. translation: displace along circle with 'radius' in range [-offset, offset]</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> angle <span class="op">=</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>i <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>amount <span class="op">*</span> <span class="fl">360.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> displacement <span class="op">=</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="op">(</span><span class="dt">int</span><span class="op">)(</span><span class="dv">2</span> <span class="op">*</span> offset <span class="op">*</span> <span class="dv">100</span><span class="op">))</span> <span class="op">/</span> <span class="fl">100.0</span><span class="bu">f</span> <span class="op">-</span> offset<span class="op">;</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> x <span class="op">=</span> sin<span class="op">(</span>angle<span class="op">)</span> <span class="op">*</span> radius <span class="op">+</span> displacement<span class="op">;</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        displacement <span class="op">=</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="op">(</span><span class="dt">int</span><span class="op">)(</span><span class="dv">2</span> <span class="op">*</span> offset <span class="op">*</span> <span class="dv">100</span><span class="op">))</span> <span class="op">/</span> <span class="fl">100.0</span><span class="bu">f</span> <span class="op">-</span> offset<span class="op">;</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> y <span class="op">=</span> displacement <span class="op">*</span> <span class="fl">0.4</span><span class="bu">f</span><span class="op">;</span> <span class="co">// keep height of asteroid field smaller compared to width of x and z</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        displacement <span class="op">=</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="op">(</span><span class="dt">int</span><span class="op">)(</span><span class="dv">2</span> <span class="op">*</span> offset <span class="op">*</span> <span class="dv">100</span><span class="op">))</span> <span class="op">/</span> <span class="fl">100.0</span><span class="bu">f</span> <span class="op">-</span> offset<span class="op">;</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> z <span class="op">=</span> cos<span class="op">(</span>angle<span class="op">)</span> <span class="op">*</span> radius <span class="op">+</span> displacement<span class="op">;</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span>x<span class="op">,</span> y<span class="op">,</span> z<span class="op">));</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 2. scale: Scale between 0.05 and 0.25f</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> scale <span class="op">=</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="dv">20</span><span class="op">)</span> <span class="op">/</span> <span class="fl">100.0</span><span class="bu">f</span> <span class="op">+</span> <span class="fl">0.05</span><span class="op">;</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>scale<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span>scale<span class="op">));</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 3. rotation: add random rotation around a (semi)randomly picked rotation axis vector</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> rotAngle <span class="op">=</span> <span class="op">(</span>rand<span class="op">()</span> <span class="op">%</span> <span class="dv">360</span><span class="op">);</span></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>rotate<span class="op">(</span>model<span class="op">,</span> rotAngle<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.4</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">));</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 4. now add to list of matrices</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>        modelMatrices<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> model<span class="op">;</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>buffer准备</li></ol><blockquote><p>生成 model矩阵的buffer</p></blockquote><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> buffer<span class="op">;</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>buffer<span class="op">);</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> buffer<span class="op">);</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> amount <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>mat4<span class="op">),</span> <span class="op">&amp;</span>modelMatrices<span class="op">[</span><span class="dv">0</span><span class="op">],</span> GL_STATIC_DRAW<span class="op">);</span></span></code></pre></div><blockquote><p>布局顶点属性</p></blockquote><div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//当我们顶点属性的类型大于vec4时，就要多进行一步处理了。顶点属性最大允许的数据大小等于一个vec4。因为一个mat4本质上是4个vec4，我们需要为这个矩阵预留4个顶点属性。因为我们将它的位置值设置为3，矩阵每一列的顶点属性位置值就是3、4、5和6。</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> rock<span class="op">.</span>meshes<span class="op">.</span>size<span class="op">();</span> i<span class="op">++)</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> VAO <span class="op">=</span> rock<span class="op">.</span>meshes<span class="op">[</span>i<span class="op">].</span>VAO<span class="op">;</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">// set attribute pointers for matrix (4 times vec4)</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">3</span><span class="op">);</span></span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">3</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>mat4<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">4</span><span class="op">);</span></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">4</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>mat4<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>vec4<span class="op">)));</span></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">5</span><span class="op">);</span></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">5</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>mat4<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">2</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>vec4<span class="op">)));</span></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">6</span><span class="op">);</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">6</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>mat4<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>glm<span class="op">::</span>vec4<span class="op">)));</span></span><span id="cb9-16"><a href="#cb9-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-17"><a href="#cb9-17" aria-hidden="true" tabindex="-1"></a>        <span class="co">//更新数据</span></span><span id="cb9-18"><a href="#cb9-18" aria-hidden="true" tabindex="-1"></a>        glVertexAttribDivisor<span class="op">(</span><span class="dv">3</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb9-19"><a href="#cb9-19" aria-hidden="true" tabindex="-1"></a>        glVertexAttribDivisor<span class="op">(</span><span class="dv">4</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb9-20"><a href="#cb9-20" aria-hidden="true" tabindex="-1"></a>        glVertexAttribDivisor<span class="op">(</span><span class="dv">5</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb9-21"><a href="#cb9-21" aria-hidden="true" tabindex="-1"></a>        glVertexAttribDivisor<span class="op">(</span><span class="dv">6</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb9-22"><a href="#cb9-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-23"><a href="#cb9-23" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb9-24"><a href="#cb9-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="4" type="1"><li>绘制</li></ol><div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>    shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>quadVAO<span class="op">);</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//一个quad两个三角形6个顶点， 绘制100 个</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    glDrawArraysInstanced<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">6</span><span class="op">,</span> <span class="dv">100</span><span class="op">);</span> </span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span></code></pre></div><h3 id="着色器-1">着色器</h3><ol type="1"><li>顶点着色器</li></ol><div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec2 aPos<span class="op">;</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">1</span><span class="op">)</span> in vec3 aColor<span class="op">;</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//使用不同的偏移来计算位置</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">2</span><span class="op">)</span> in vec2 aOffset<span class="op">;</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>    out vec3 fColor<span class="op">;</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>        fColor <span class="op">=</span> aColor<span class="op">;</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> vec4<span class="op">(</span>aPos <span class="op">+</span> aOffset<span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>片元着色器</li></ol><div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    out vec4 FragColor<span class="op">;</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    in vec3 fColor<span class="op">;</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb12-6"><a href="#cb12-6" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>fColor<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb12-7"><a href="#cb12-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/09.ji-he-zhao-se-qi/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/09.ji-he-zhao-se-qi/</url>
      
        <content type="html"><![CDATA[<h1 id="几何着色器">几何着色器</h1><blockquote><p>在顶点和片段着色器之间有一个可选的几何着色器(GeometryShader)，几何着色器的输入是一个图元（如点或三角形）的一组顶点。几何着色器可以在顶点发送到下一着色器阶段之前对它们随意变换。然而，几何着色器最有趣的地方在于，它能够将（这一组）顶点变换为完全不同的图元，并且还能生成比原来更多的顶点。</p></blockquote><h2 id="几何着色器-1">几何着色器</h2><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//对应glDrawArrays一种绘制方式： points、lines、lines_adjacency、triangles、triangles_adjacency</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>points<span class="op">)</span> in<span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">//线的方式输出，并限制最大顶点数为2</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>line_strip<span class="op">,</span> max_vertices <span class="op">=</span> <span class="dv">2</span><span class="op">)</span> out<span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span> <span class="op">{</span>    </span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position <span class="op">+</span> vec4<span class="op">(-</span><span class="fl">0.1</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> </span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position <span class="op">+</span> vec4<span class="op">(</span> <span class="fl">0.1</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        EndPrimitive<span class="op">();</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>输入：在几何着色器的顶部，我们需要声明从顶点着色器输入的图元类型。这需要在in关键字前声明一个布局修饰符(LayoutQualifier)。这个输入布局修饰符可以从顶点着色器接收下列任何一个图元值,对应了不同的绘制方式下的图元值: points：绘制GL_POINTS图元时（1）。lines：绘制GL_LINES或GL_LINE_STRIP时（2）lines_adjacency：GL_LINES_ADJACENCY或GL_LINE_STRIP_ADJACENCY（4）triangles：GL_TRIANGLES、GL_TRIANGLE_STRIP或GL_TRIANGLE_FAN（3）triangles_adjacency：GL_TRIANGLES_ADJACENCY或GL_TRIANGLE_STRIP_ADJACENCY（6）</p><pre><code>以上是能提供给glDrawArrays渲染函数的几乎所有图元了。如果我们想要将顶点绘制为GL_TRIANGLES，我们就要将输入修饰符设置为triangles。括号内的数字表示的是一个图元所包含的最小顶点数。</code></pre><p>输出:接下来，我们还需要指定几何着色器输出的图元类型，这需要在out关键字前面加一个布局修饰符。和输入布局修饰符一样，输出布局修饰符也可以接受几个图元值：点线三角形points line_strip triangle_strip几何着色器同时希望我们设置一个它最大能够输出的顶点数量（如果你超过了这个值，OpenGL将不会绘制多出的顶点），这个也可以在out关键字的布局修饰符中设置</p><p>为了生成更有意义的结果，我们需要某种方式来获取前一着色器阶段的输出。GLSL提供给我们一个内建(Built-in)变量，在内部看起来（可能）是这样的：</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    in gl_Vertex</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        vec4  gl_Position<span class="op">;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> gl_PointSize<span class="op">;</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> gl_ClipDistance<span class="op">[];</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> gl_in<span class="op">[];</span></span></code></pre></div><p>要注意的是，它被声明为一个数组，因为大多数的渲染图元包含多于1个的顶点，而几何着色器的输入是一个图元的<code>所有顶点</code>。</p><p>有了之前顶点着色器阶段的顶点数据，我们就可以使用2个几何着色器函数，EmitVertex和EndPrimitive，来生成新的数据了。几何着色器希望你能够生成并输出至少一个定义为输出的图元。在我们的例子中，我们需要至少生成一个线条图元。(有点类似设置顶点和属性时的操作)</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span> <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position <span class="op">+</span> vec4<span class="op">(-</span><span class="fl">0.1</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> </span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position <span class="op">+</span> vec4<span class="op">(</span> <span class="fl">0.1</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>        EndPrimitive<span class="op">();</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>每次我们调用EmitVertex时，gl_Position中的向量会被添加到图元中来。当EndPrimitive被调用时，所有发射出的(Emitted)顶点都会合成为指定的输出渲染图元。在一个或多个EmitVertex调用之后重复调用EndPrimitive能够生成多个图元。</p><h2 id="实践一创建更多顶点">实践一，创建更多顶点</h2><ol type="1"><li>顶点</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 2d顶点 + 顶点颜色</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> points<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top-left</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top-right</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom-right</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span>  <span class="co">// bottom-left</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> VAO<span class="op">;</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>points<span class="op">),</span> <span class="op">&amp;</span>points<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">5</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">5</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">2</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span></code></pre></div><ol start="2" type="1"><li>绘制</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 使用 GL_POINTS 绘制</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    glDrawArrays<span class="op">(</span>GL_POINTS<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">4</span><span class="op">);</span></span></code></pre></div><ol start="3" type="1"><li>着色器<ol type="1"><li>几何着色器</li></ol><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a> <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a> <span class="co">//1. 对应glDrawArrays(GL_POINTS,</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a> layout <span class="op">(</span>points<span class="op">)</span> in<span class="op">;</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a> <span class="co">//2. triangle_strip输出， 限制最多5个顶点</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a> layout <span class="op">(</span>triangle_strip<span class="op">,</span> max_vertices <span class="op">=</span> <span class="dv">5</span><span class="op">)</span> out<span class="op">;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a> <span class="co">//3. 接受顶点的颜色值</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a> in VS_OUT <span class="op">{</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>     vec3 color<span class="op">;</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span> gs_in<span class="op">[];</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a> <span class="co">//4. 传递颜色值</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a> out vec3 fColor<span class="op">;</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a> <span class="co">//5. `EmitVertex`创建顶点，`EndPrimitive`创建图元。原本是gl_in[0].gl_Position， 输出创建的顶点</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a> <span class="dt">void</span> build_house<span class="op">(</span>vec4 position<span class="op">)</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span>    </span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>     <span class="co">//5.1 接收的颜色值</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>     fColor <span class="op">=</span> gs_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>color<span class="op">;</span> <span class="co">// gs_in[0] since there's only one input vertex</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>     <span class="co">//1. 顶点1</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>     gl_Position <span class="op">=</span> position <span class="op">+</span> vec4<span class="op">(-</span><span class="fl">0.2</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.2</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> <span class="co">// 1:bottom-left   </span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>     EmitVertex<span class="op">();</span>   </span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>     <span class="co">//2. 顶点2</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>     gl_Position <span class="op">=</span> position <span class="op">+</span> vec4<span class="op">(</span> <span class="fl">0.2</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.2</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> <span class="co">// 2:bottom-right</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>     EmitVertex<span class="op">();</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>     <span class="co">//3. 顶点3</span></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>     gl_Position <span class="op">=</span> position <span class="op">+</span> vec4<span class="op">(-</span><span class="fl">0.2</span><span class="op">,</span>  <span class="fl">0.2</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> <span class="co">// 3:top-left</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>     EmitVertex<span class="op">();</span></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>     <span class="co">//4. 顶点4</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>     gl_Position <span class="op">=</span> position <span class="op">+</span> vec4<span class="op">(</span> <span class="fl">0.2</span><span class="op">,</span>  <span class="fl">0.2</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> <span class="co">// 4:top-right</span></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>     EmitVertex<span class="op">();</span></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>     <span class="co">//5. 顶点5</span></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>     gl_Position <span class="op">=</span> position <span class="op">+</span> vec4<span class="op">(</span> <span class="fl">0.0</span><span class="op">,</span>  <span class="fl">0.4</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span> <span class="co">// 5:top</span></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>     <span class="co">//这里改变颜色，将会影响后面的顶点颜色。之前的颜色为上次的改变。</span></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>     <span class="co">//比如在第一个顶点结束， 第二个顶点开始设置颜色。则在下次改变之前都使用这个颜色，作为顶点颜色传递。</span></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>     <span class="co">//也可以这么理解： 一个 EmitVertex调用对应一次顶点着色器执行，虽然不准确，但是相对比较好理解。</span></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>     fColor <span class="op">=</span> vec3<span class="op">(</span><span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>     EmitVertex<span class="op">();</span></span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a>     EndPrimitive<span class="op">();</span></span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a> <span class="dt">void</span> main<span class="op">()</span> <span class="op">{</span>    </span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a>     build_house<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position<span class="op">);</span></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>顶点着色器</li></ol><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a> <span class="co">// 传递顶点和颜色,2d顶点z=0</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a> <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a> layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec2 aPos<span class="op">;</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a> layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">1</span><span class="op">)</span> in vec3 aColor<span class="op">;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a> out VS_OUT <span class="op">{</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>     vec3 color<span class="op">;</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span> vs_out<span class="op">;</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a> <span class="dt">void</span> main<span class="op">()</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>     vs_out<span class="op">.</span>color <span class="op">=</span> aColor<span class="op">;</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>     gl_Position <span class="op">=</span> vec4<span class="op">(</span>aPos<span class="op">.</span>x<span class="op">,</span> aPos<span class="op">.</span>y<span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span> </span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div><ol start="3" type="1"><li>片元着色器</li></ol><div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a> <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a> out vec4 FragColor<span class="op">;</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a> in vec3 fColor<span class="op">;</span></span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a> <span class="dt">void</span> main<span class="op">()</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>     FragColor <span class="op">=</span> vec4<span class="op">(</span>fColor<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span>   </span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div></li></ol><h2 id="实践二爆破物体">实践二,爆破物体</h2><blockquote><p>当我们说爆破一个物体时，我们并不是指要将宝贵的顶点集给炸掉，我们是要将每个三角形沿着法向量的方向移动一小段时间。效果就是，整个物体看起来像是沿着每个三角形的法线向量爆炸一样。爆炸三角形的效果在纳米装模型上看起来像是这样的：</p></blockquote><ol type="1"><li>重要点<ol type="1"><li>法向量, 这里使用垂直于三顶点组成的平面（顶点不在一条线）</li></ol><div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a> vec3 GetNormal<span class="op">()</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    vec3 a <span class="op">=</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position<span class="op">)</span> <span class="op">-</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">1</span><span class="op">].</span>gl_Position<span class="op">);</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    vec3 b <span class="op">=</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">2</span><span class="op">].</span>gl_Position<span class="op">)</span> <span class="op">-</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">1</span><span class="op">].</span>gl_Position<span class="op">);</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">// cross 作为法向量， 所以顺序很重要</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> normalize<span class="op">(</span>cross<span class="op">(</span>a<span class="op">,</span> b<span class="op">));</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>移动的爆破函数</li></ol><div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a> vec4 explode<span class="op">(</span>vec4 position<span class="op">,</span> vec3 normal<span class="op">)</span></span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a> <span class="op">{</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>     <span class="dt">float</span> magnitude <span class="op">=</span> <span class="fl">2.0</span><span class="op">;</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>     <span class="co">// time 作为变量，使用shader传递参数</span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>     <span class="co">// 法向量 * magnitude 的 0-1 的sin值，作为移动向量</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>     vec3 direction <span class="op">=</span> normal <span class="op">*</span> <span class="op">((</span>sin<span class="op">(</span>time<span class="op">)</span> <span class="op">+</span> <span class="fl">1.0</span><span class="op">)</span> <span class="op">/</span> <span class="fl">2.0</span><span class="op">)</span> <span class="op">*</span> magnitude<span class="op">;</span> </span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>     <span class="cf">return</span> position <span class="op">+</span> vec4<span class="op">(</span>direction<span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a> <span class="op">}</span></span></code></pre></div></li><li>模型和参数准备</li></ol><div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>    Shader shader<span class="op">(</span><span class="st">"./res/shaders/09geometry/02geometry_shader.vs"</span><span class="op">,</span> <span class="st">"./res/shaders/09geometry/02geometry_shader.gs"</span><span class="op">,</span> <span class="st">"./res/shaders/09geometry/02geometry_shader.fs"</span><span class="op">);</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    Model nanosuit<span class="op">(</span><span class="st">"./res/models/nanosuit/nanosuit.obj"</span><span class="op">);</span></span></code></pre></div><ol start="3" type="1"><li>绘制</li></ol><div class="sourceCode" id="cb13"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//。。。</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 设置shader 的time变量</span></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    shader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"time"</span><span class="op">,</span> glfwGetTime<span class="op">());</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//。。。</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> indices<span class="op">.</span>size<span class="op">(),</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span></code></pre></div><ol start="3" type="1"><li>几何着色器， 顶点着色器使用mvp和uv的顶点着色器, 片元着色器使用贴图uv的片元着色器</li></ol><div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 对应glDrawElements(GL_TRIANGLES</span></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>triangles<span class="op">)</span> in<span class="op">;</span></span><span id="cb14-4"><a href="#cb14-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-5"><a href="#cb14-5" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 限制为最大3个顶点</span></span><span id="cb14-6"><a href="#cb14-6" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>triangle_strip<span class="op">,</span> max_vertices <span class="op">=</span> <span class="dv">3</span><span class="op">)</span> out<span class="op">;</span></span><span id="cb14-7"><a href="#cb14-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-8"><a href="#cb14-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 接受传递uv</span></span><span id="cb14-9"><a href="#cb14-9" aria-hidden="true" tabindex="-1"></a>    in VS_OUT <span class="op">{</span></span><span id="cb14-10"><a href="#cb14-10" aria-hidden="true" tabindex="-1"></a>        vec2 texCoords<span class="op">;</span></span><span id="cb14-11"><a href="#cb14-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> gs_in<span class="op">[];</span></span><span id="cb14-12"><a href="#cb14-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-13"><a href="#cb14-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">//4. 传递uv</span></span><span id="cb14-14"><a href="#cb14-14" aria-hidden="true" tabindex="-1"></a>    out vec2 TexCoords<span class="op">;</span> </span><span id="cb14-15"><a href="#cb14-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-16"><a href="#cb14-16" aria-hidden="true" tabindex="-1"></a>    <span class="co">//接受 time 输入</span></span><span id="cb14-17"><a href="#cb14-17" aria-hidden="true" tabindex="-1"></a>    uniform <span class="dt">float</span> time<span class="op">;</span></span><span id="cb14-18"><a href="#cb14-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-19"><a href="#cb14-19" aria-hidden="true" tabindex="-1"></a>    vec4 explode<span class="op">(</span>vec4 position<span class="op">,</span> vec3 normal<span class="op">)</span></span><span id="cb14-20"><a href="#cb14-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb14-21"><a href="#cb14-21" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> magnitude <span class="op">=</span> <span class="fl">2.0</span><span class="op">;</span></span><span id="cb14-22"><a href="#cb14-22" aria-hidden="true" tabindex="-1"></a>        vec3 direction <span class="op">=</span> normal <span class="op">*</span> <span class="op">((</span>sin<span class="op">(</span>time<span class="op">)</span> <span class="op">+</span> <span class="fl">1.0</span><span class="op">)</span> <span class="op">/</span> <span class="fl">2.0</span><span class="op">)</span> <span class="op">*</span> magnitude<span class="op">;</span> </span><span id="cb14-23"><a href="#cb14-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> position <span class="op">+</span> vec4<span class="op">(</span>direction<span class="op">,</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb14-24"><a href="#cb14-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb14-25"><a href="#cb14-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-26"><a href="#cb14-26" aria-hidden="true" tabindex="-1"></a>    vec3 GetNormal<span class="op">()</span></span><span id="cb14-27"><a href="#cb14-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb14-28"><a href="#cb14-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">//GL_TRIANGLES 模式下， gl_in 为三个大小的数据， 三个顶点</span></span><span id="cb14-29"><a href="#cb14-29" aria-hidden="true" tabindex="-1"></a>        vec3 a <span class="op">=</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position<span class="op">)</span> <span class="op">-</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">1</span><span class="op">].</span>gl_Position<span class="op">);</span></span><span id="cb14-30"><a href="#cb14-30" aria-hidden="true" tabindex="-1"></a>        vec3 b <span class="op">=</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">2</span><span class="op">].</span>gl_Position<span class="op">)</span> <span class="op">-</span> vec3<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">1</span><span class="op">].</span>gl_Position<span class="op">);</span></span><span id="cb14-31"><a href="#cb14-31" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> normalize<span class="op">(</span>cross<span class="op">(</span>a<span class="op">,</span> b<span class="op">));</span></span><span id="cb14-32"><a href="#cb14-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb14-33"><a href="#cb14-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-34"><a href="#cb14-34" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span> <span class="op">{</span>    </span><span id="cb14-35"><a href="#cb14-35" aria-hidden="true" tabindex="-1"></a>        <span class="co">//计算三角形的垂直向量</span></span><span id="cb14-36"><a href="#cb14-36" aria-hidden="true" tabindex="-1"></a>        vec3 normal <span class="op">=</span> GetNormal<span class="op">();</span></span><span id="cb14-37"><a href="#cb14-37" aria-hidden="true" tabindex="-1"></a></span><span id="cb14-38"><a href="#cb14-38" aria-hidden="true" tabindex="-1"></a>        <span class="co">//重新设置位置</span></span><span id="cb14-39"><a href="#cb14-39" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> explode<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>gl_Position<span class="op">,</span> normal<span class="op">);</span></span><span id="cb14-40"><a href="#cb14-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">//对应顶点的uv 不变</span></span><span id="cb14-41"><a href="#cb14-41" aria-hidden="true" tabindex="-1"></a>        TexCoords <span class="op">=</span> gs_in<span class="op">[</span><span class="dv">0</span><span class="op">].</span>texCoords<span class="op">;</span></span><span id="cb14-42"><a href="#cb14-42" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb14-43"><a href="#cb14-43" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> explode<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">1</span><span class="op">].</span>gl_Position<span class="op">,</span> normal<span class="op">);</span></span><span id="cb14-44"><a href="#cb14-44" aria-hidden="true" tabindex="-1"></a>        TexCoords <span class="op">=</span> gs_in<span class="op">[</span><span class="dv">1</span><span class="op">].</span>texCoords<span class="op">;</span></span><span id="cb14-45"><a href="#cb14-45" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb14-46"><a href="#cb14-46" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> explode<span class="op">(</span>gl_in<span class="op">[</span><span class="dv">2</span><span class="op">].</span>gl_Position<span class="op">,</span> normal<span class="op">);</span></span><span id="cb14-47"><a href="#cb14-47" aria-hidden="true" tabindex="-1"></a>        TexCoords <span class="op">=</span> gs_in<span class="op">[</span><span class="dv">2</span><span class="op">].</span>texCoords<span class="op">;</span></span><span id="cb14-48"><a href="#cb14-48" aria-hidden="true" tabindex="-1"></a>        EmitVertex<span class="op">();</span></span><span id="cb14-49"><a href="#cb14-49" aria-hidden="true" tabindex="-1"></a>        EndPrimitive<span class="op">();</span></span><span id="cb14-50"><a href="#cb14-50" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><h2 id="实践三法线可视化">实践三，法线可视化</h2><ol type="1"><li>几何着色器</li></ol><div class="sourceCode" id="cb15"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a><span class="co">//1. 对应glDrawElements(GL_TRIANGLES</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>layout <span class="op">(</span>triangles<span class="op">)</span> in<span class="op">;</span></span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a><span class="co">//2. 使用line_strip， 因为这里只绘制法线的颜色线段</span></span><span id="cb15-5"><a href="#cb15-5" aria-hidden="true" tabindex="-1"></a><span class="co">//max_vertices 限制为6， 是因为需要另外多创建一组。</span></span><span id="cb15-6"><a href="#cb15-6" aria-hidden="true" tabindex="-1"></a>layout <span class="op">(</span>line_strip<span class="op">,</span> max_vertices <span class="op">=</span> <span class="dv">6</span><span class="op">)</span> out<span class="op">;</span></span><span id="cb15-7"><a href="#cb15-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-8"><a href="#cb15-8" aria-hidden="true" tabindex="-1"></a><span class="co">//3. 接收normal 输入</span></span><span id="cb15-9"><a href="#cb15-9" aria-hidden="true" tabindex="-1"></a>in VS_OUT <span class="op">{</span></span><span id="cb15-10"><a href="#cb15-10" aria-hidden="true" tabindex="-1"></a>    vec3 normal<span class="op">;</span></span><span id="cb15-11"><a href="#cb15-11" aria-hidden="true" tabindex="-1"></a><span class="op">}</span> gs_in<span class="op">[];</span></span><span id="cb15-12"><a href="#cb15-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-13"><a href="#cb15-13" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">float</span> MAGNITUDE <span class="op">=</span> <span class="fl">0.4</span><span class="op">;</span></span><span id="cb15-14"><a href="#cb15-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-15"><a href="#cb15-15" aria-hidden="true" tabindex="-1"></a><span class="co">//4. 为法线生成对应线段的另一个顶点， index 为三角形的顶点index，储存于gl_in[index]中</span></span><span id="cb15-16"><a href="#cb15-16" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> GenerateLine<span class="op">(</span><span class="dt">int</span> index<span class="op">)</span></span><span id="cb15-17"><a href="#cb15-17" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb15-18"><a href="#cb15-18" aria-hidden="true" tabindex="-1"></a>    <span class="co">//4.1 第一个顶点不变</span></span><span id="cb15-19"><a href="#cb15-19" aria-hidden="true" tabindex="-1"></a>    gl_Position <span class="op">=</span> gl_in<span class="op">[</span>index<span class="op">].</span>gl_Position<span class="op">;</span></span><span id="cb15-20"><a href="#cb15-20" aria-hidden="true" tabindex="-1"></a>    EmitVertex<span class="op">();</span></span><span id="cb15-21"><a href="#cb15-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-22"><a href="#cb15-22" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 第二个顶点 偏移法线 *MAGNITUDE 的距离。</span></span><span id="cb15-23"><a href="#cb15-23" aria-hidden="true" tabindex="-1"></a>    gl_Position <span class="op">=</span> gl_in<span class="op">[</span>index<span class="op">].</span>gl_Position <span class="op">+</span> vec4<span class="op">(</span>gs_in<span class="op">[</span>index<span class="op">].</span>normal<span class="op">,</span> <span class="fl">0.0</span><span class="op">)</span> <span class="op">*</span> MAGNITUDE<span class="op">;</span></span><span id="cb15-24"><a href="#cb15-24" aria-hidden="true" tabindex="-1"></a>    EmitVertex<span class="op">();</span></span><span id="cb15-25"><a href="#cb15-25" aria-hidden="true" tabindex="-1"></a>    EndPrimitive<span class="op">();</span></span><span id="cb15-26"><a href="#cb15-26" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb15-27"><a href="#cb15-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb15-28"><a href="#cb15-28" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span><span id="cb15-29"><a href="#cb15-29" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb15-30"><a href="#cb15-30" aria-hidden="true" tabindex="-1"></a>    GenerateLine<span class="op">(</span><span class="dv">0</span><span class="op">);</span> <span class="co">// 第一个顶点法线</span></span><span id="cb15-31"><a href="#cb15-31" aria-hidden="true" tabindex="-1"></a>    GenerateLine<span class="op">(</span><span class="dv">1</span><span class="op">);</span> <span class="co">// 第二个顶点法线</span></span><span id="cb15-32"><a href="#cb15-32" aria-hidden="true" tabindex="-1"></a>    GenerateLine<span class="op">(</span><span class="dv">2</span><span class="op">);</span> <span class="co">// 第三个顶点法线</span></span><span id="cb15-33"><a href="#cb15-33" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/08.gao-ji-glsl/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/08.gao-ji-glsl/</url>
      
        <content type="html"><![CDATA[<h2 id="高级glsl">高级GLSL</h2><blockquote><p>主要讨论一些有趣的内建变量(Built-inVariable)，管理着色器输入和输出的新方式以及一个叫做Uniform缓冲对象(UniformBuffer Object)的有用工具。</p></blockquote><h3 id="glsl内置变量">GLSL内置变量</h3><p>着色器都是最简化的，如果需要当前着色器以外地方的数据的话，我们必须要将数据传进来。我们已经学会使用顶点属性、uniform和采样器来完成这一任务了。然而，除此之外，GLSL还定义了另外几个以gl_为前缀的变量，它们能提供给我们更多的方式来读取/写入数据。我们已经在前面教程中接触过其中的两个了：顶点着色器的输出向量gl_Position，和片段着色器的gl_FragCoord。</p><h4 id="顶点着色器变量">顶点着色器变量</h4><ol type="1"><li>gl_Position是必须的。</li><li>gl_PointSize我们能够选用的其中一个图元是GL_POINTS，如果使用它的话，每一个顶点都是一个图元，都会被渲染为一个点。我们可以通过OpenGL的glPointSize函数来设置渲染出来的点的大小，但我们也可以在顶点着色器中修改这个值。GLSL定义了一个叫做gl_PointSize输出变量，它是一个float变量，你可以使用它来设置点的宽高（像素）。在顶点着色器中修改点的大小的话，你就能对每个顶点设置不同的值了。</li></ol><p>在顶点着色器中修改点大小的功能默认是禁用的，如果你需要启用它的话，你需要启用OpenGL的<code>GL_PROGRAM_POINT_SIZE</code>：</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    glEnable<span class="op">(</span>GL_PROGRAM_POINT_SIZE<span class="op">);</span></span></code></pre></div><p>比如 使距离作为点的size</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> projection <span class="op">*</span> view <span class="op">*</span> model <span class="op">*</span> vec4<span class="op">(</span>aPos<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span>    </span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        gl_PointSize <span class="op">=</span> gl_Position<span class="op">.</span>z<span class="op">;</span>    </span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="3" type="1"><li>gl_VertexID</li></ol><p>gl_Position和gl_PointSize都是输出变量，因为它们的值是作为顶点着色器的输出被读取的。我们可以对它们进行写入，来改变结果。顶点着色器还为我们提供了一个有趣的输入变量，我们只能对它进行读取，它叫做gl_VertexID。</p><p>整型变量gl_VertexID储存了正在绘制顶点的当前ID。当（使用glDrawElements）进行索引渲染的时候，这个变量会存储正在绘制顶点的当前索引。当（使用glDrawArrays）不使用索引进行绘制的时候，这个变量会储存从渲染调用开始的已处理顶点数量。</p><h4 id="片段着色器变量">片段着色器变量</h4><p>GLSL提供给我们两个有趣的输入变量：gl_FragCoord和gl_FrontFacing。</p><ol type="1"><li>gl_FragCoord的x和y分量是片段的窗口空间(Window-space)坐标，其原点为窗口的左下角。我们已经使用glViewport设定了一个800x600的窗口了，所以片段窗口空间坐标的x分量将在0到800之间，y分量在0到600之间。</li></ol><p>//例如:</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span>             </span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>gl_FragCoord<span class="op">.</span>x <span class="op">&lt;</span> <span class="dv">400</span><span class="op">)</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>            FragColor <span class="op">=</span> vec4<span class="op">(</span><span class="fl">1.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>            FragColor <span class="op">=</span> vec4<span class="op">(</span><span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">,</span> <span class="fl">0.0</span><span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span>        </span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>片段着色器另外一个很有意思的输入变量是gl_FrontFacing。在面剔除教程中，我们提到OpenGL能够根据顶点的环绕顺序来决定一个面是正向还是背向面。如果我们不（启用GL_FACE_CULL来）使用面剔除，那么gl_FrontFacing将会告诉我们当前片段是属于正向面的一部分还是背向面的一部分。举例来说，我们能够对正向面计算出不同的颜色。</p><ol start="2" type="1"><li>gl_FrontFacing变量是一个bool，如果当前片段是正向面的一部分那么就是true，否则就是false。比如说，我们可以这样子创建一个立方体，在内部和外部使用不同的纹理：</li></ol><p>//例如</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    out vec4 FragColor<span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    in vec2 TexCoords<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    uniform sampler2D frontTexture<span class="op">;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    uniform sampler2D backTexture<span class="op">;</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span>             </span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span><span class="op">(</span>gl_FrontFacing<span class="op">)</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            FragColor <span class="op">=</span> texture<span class="op">(</span>frontTexture<span class="op">,</span> TexCoords<span class="op">);</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>            FragColor <span class="op">=</span> texture<span class="op">(</span>backTexture<span class="op">,</span> TexCoords<span class="op">);</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="3" type="1"><li>gl_FragDepth。输入变量gl_FragCoord能让我们读取当前片段的窗口空间坐标，并获取它的深度值，但是它是一个只读(Read-only)变量。我们不能修改片段的窗口空间坐标，但实际上修改片段的深度值还是可能的。GLSL提供给我们一个叫做gl_FragDepth的输出变量，我们可以使用它来在着色器内设置片段的深度值。</li></ol><p>要想设置深度值，我们直接写入一个0.0到1.0之间的float值到输出变量就可以了：</p><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    gl_FragDepth <span class="op">=</span> <span class="fl">0.0</span><span class="op">;</span> <span class="co">// 这个片段现在的深度值为 0.0</span></span></code></pre></div><p>如果着色器没有写入值到gl_FragDepth，它会自动取用gl_FragCoord.z的值。</p><p>然而，由我们自己设置深度值有一个很大的缺点，只要我们在片段着色器中对gl_FragDepth进行写入，OpenGL就会（像深度测试小节中讨论的那样）禁用所有的提前深度测试(EarlyDepthTesting)。它被禁用的原因是，OpenGL无法在片段着色器运行之前得知片段将拥有的深度值，因为片段着色器可能会完全修改这个深度值。</p><p>在写入gl_FragDepth时，你就需要考虑到它所带来的性能影响。然而，从<code>OpenGL 4.2</code>起，我们仍可以对两者进行一定的调和，在片段着色器的顶部使用深度条件(DepthCondition)重新声明gl_FragDepth变量：</p><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span><span class="va">depth_</span><span class="op">&lt;</span>condition<span class="op">&gt;)</span> out <span class="dt">float</span> gl_FragDepth<span class="op">;</span></span></code></pre></div><p><code>condition</code>可以为下面的值： |条件 |描述| |:- | :- | |any|默认值。提前深度测试是禁用的，你会损失很多性能| |greater |你只能让深度值比gl_FragCoord.z更大| |less|你只能让深度值比gl_FragCoord.z更小| |unchanged |如果你要写入gl_FragDepth，你将只能写入gl_FragCoord.z的值|</p><h4 id="接口块">接口块</h4><p>到目前为止，每当我们希望从顶点着色器向片段着色器发送数据时，我们都声明了几个对应的输入/输出变量。将它们一个一个声明是着色器间发送数据最简单的方式了，但当程序变得更大时，你希望发送的可能就不只是几个变量了，它还可能包括数组和结构体。</p><p>为了帮助我们管理这些变量，GLSL为我们提供了一个叫做接口块(InterfaceBlock)的东西，来方便我们组合这些变量。接口块的声明和struct的声明有点相像，不同的是，现在根据它是一个输入还是输出块(Block)，使用in或out关键字来定义的</p><p>顶点着色器</p><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec3 aPos<span class="op">;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">1</span><span class="op">)</span> in vec2 aTexCoords<span class="op">;</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    uniform mat4 model<span class="op">;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    uniform mat4 view<span class="op">;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    uniform mat4 projection<span class="op">;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>    out VS_OUT</span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>        vec2 TexCoords<span class="op">;</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> vs_out<span class="op">;</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> projection <span class="op">*</span> view <span class="op">*</span> model <span class="op">*</span> vec4<span class="op">(</span>aPos<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span>    </span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        vs_out<span class="op">.</span>TexCoords <span class="op">=</span> aTexCoords<span class="op">;</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>  </span></code></pre></div><p>之后，我们还需要在下一个着色器，即片段着色器，中定义一个输入接口块。块名(BlockName)应该是和着色器中一样的（VS_OUT），但实例名(InstanceName)（顶点着色器中用的是vs_out）可以是随意的，但要避免使用误导性的名称，比如对实际上包含输入变量的接口块命名为vs_out。</p><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    out vec4 FragColor<span class="op">;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    in VS_OUT</span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>        vec2 TexCoords<span class="op">;</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> fs_in<span class="op">;</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>    uniform sampler2D texture<span class="op">;</span></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span>             </span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> texture<span class="op">(</span>texture<span class="op">,</span> fs_in<span class="op">.</span>TexCoords<span class="op">);</span>   </span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>只要两个接口块的名字一样，它们对应的输入和输出将会匹配起来。这是帮助你管理代码的又一个有用特性，它在几何着色器这样穿插特定着色器阶段的场景下会很有用。</p><h4 id="uniform缓冲对象">Uniform缓冲对象</h4><p>我们已经使用OpenGL很长时间了，学会了一些很酷的技巧，但也遇到了一些很麻烦的地方。比如说，当使用多于一个的着色器时，尽管大部分的uniform变量都是相同的，我们还是需要不断地设置它们，所以为什么要这么麻烦地重OpenGL为我们提供了一个叫做Uniform缓冲对象(Uniform BufferObject)的工具，它允许我们定义一系列在多个着色器中相同的全局Uniform变量。当使用Uniform缓冲对象的时候，我们只需要设置相关的uniform一次。当然，我们仍需要手动设置每个着色器中不同的uniform。并且创建和配置Uniform缓冲对象会有一点繁琐。</p><p>因为Uniform缓冲对象仍是一个缓冲，我们可以使用glGenBuffers来创建它，将它绑定到GL_UNIFORM_BUFFER缓冲目标，并将所有相关的uniform数据存入缓冲。在Uniform缓冲对象中储存数据是有一些规则的，我们将会在之后讨论它。首先，我们将使用一个简单的顶点着色器，将projection和view矩阵存储到所谓的Uniform块(UniformBlock)中：</p><div class="sourceCode" id="cb9"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec3 aPos<span class="op">;</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>std140<span class="op">)</span> uniform Matrices</span><span id="cb9-5"><a href="#cb9-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb9-6"><a href="#cb9-6" aria-hidden="true" tabindex="-1"></a>        mat4 projection<span class="op">;</span></span><span id="cb9-7"><a href="#cb9-7" aria-hidden="true" tabindex="-1"></a>        mat4 view<span class="op">;</span></span><span id="cb9-8"><a href="#cb9-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb9-9"><a href="#cb9-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-10"><a href="#cb9-10" aria-hidden="true" tabindex="-1"></a>    uniform mat4 model<span class="op">;</span></span><span id="cb9-11"><a href="#cb9-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb9-12"><a href="#cb9-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb9-13"><a href="#cb9-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb9-14"><a href="#cb9-14" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> projection <span class="op">*</span> view <span class="op">*</span> model <span class="op">*</span> vec4<span class="op">(</span>aPos<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb9-15"><a href="#cb9-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>在我们大多数的例子中，我们都会在每个渲染迭代中，对每个着色器设置projection和viewUniform矩阵。这是利用Uniform缓冲对象的一个非常完美的例子，因为现在我们只需要存储这些矩阵一次就可以了。</p><p>这里，我们声明了一个叫做Matrices的Uniform块，它储存了两个4x4矩阵。Uniform块中的变量可以直接访问，不需要加块名作为前缀。接下来，我们在OpenGL代码中将这些矩阵值存入缓冲中，每个声明了这个Uniform块的着色器都能够访问这些矩阵。</p><p>你现在可能会在想layout(std140)这个语句是什么意思。它的意思是说，当前定义的Uniform块对它的内容使用一个特定的内存布局。这个语句设置了Uniform块布局(UniformBlock Layout)。</p><h4 id="uniform块布局">Uniform块布局</h4><p>Uniform块的内容是储存在一个缓冲对象中的，它实际上只是一块预留内存。因为这块内存并不会保存它具体保存的是什么类型的数据，我们还需要告诉OpenGL内存的哪一部分对应着着色器中的哪一个uniform变量。</p><p>假设着色器中有以下的这个Uniform块：</p><div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>std140<span class="op">)</span> uniform ExampleBlock</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> value<span class="op">;</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>        vec3  vector<span class="op">;</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>        mat4  matrix<span class="op">;</span></span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> values<span class="op">[</span><span class="dv">3</span><span class="op">];</span></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span>  boolean<span class="op">;</span></span><span id="cb10-8"><a href="#cb10-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span>   integer<span class="op">;</span></span><span id="cb10-9"><a href="#cb10-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span></code></pre></div><p>默认情况下，GLSL会使用一个叫做共享(Shared)布局的Uniform内存布局，共享是因为一旦硬件定义了偏移量，它们在多个程序中是共享并一致的。使用共享布局时，GLSL是可以为了优化而对uniform变量的位置进行变动的，只要变量的顺序保持不变。因为我们无法知道每个uniform变量的偏移量，我们也就不知道如何准确地填充我们的Uniform缓冲了。我们能够使用像是glGetUniformIndices这样的函数来查询这个信息，但这超出本节的范围了。</p><p>虽然共享布局给了我们很多节省空间的优化，但是我们需要查询每个uniform变量的偏移量，这会产生非常多的工作量。通常的做法是，不使用共享布局，而是使用std140布局。std140布局声明了每个变量的偏移量都是由一系列规则所决定的，这显式地声明了每个变量类型的内存布局。由于这是显式提及的，我们可以手动计算出每个变量的偏移量。</p><p>每个变量都有一个基准对齐量(BaseAlignment)，它等于一个变量在Uniform块中所占据的空间（包括填充量(Padding)），这个基准对齐量是使用std140布局的规则计算出来的。接下来，对每个变量，我们再计算它的对齐偏移量(AlignedOffset)，它是一个变量从块起始位置的字节偏移量。一个变量的对齐字节偏移量必须等于基准对齐量的倍数。</p><p>布局规则的原文可以在OpenGL的Uniform缓冲规范这里找到，但我们将会在下面列出最常见的规则。GLSL中的每个变量，比如说int、float和bool，都被定义为4字节量。每4个字节将会用一个N来表示。</p><table><colgroup><col style="width: 50%"><col style="width: 50%"></colgroup><thead><tr class="header"><th style="text-align: left;">类型</th><th style="text-align: left;">布局规则</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">标量，比如int和bool</td><td style="text-align: left;">每个标量的基准对齐量为N。</td></tr><tr class="even"><td style="text-align: left;">向量</td><td style="text-align: left;">2N或者4N。这意味着vec3的基准对齐量为4N。</td></tr><tr class="odd"><td style="text-align: left;">标量或向量的数组</td><td style="text-align: left;">每个元素的基准对齐量与vec4的相同。</td></tr><tr class="even"><td style="text-align: left;">矩阵</td><td style="text-align: left;">储存为列向量的数组，每个向量的基准对齐量与vec4的相同。</td></tr><tr class="odd"><td style="text-align: left;">结构体</td><td style="text-align: left;">等于所有元素根据规则计算后的大小，但会填充到vec4大小的倍数。</td></tr></tbody></table><p>和OpenGL大多数的规范一样，使用例子就能更容易地理解。我们会使用之前引入的那个叫做ExampleBlock的Uniform块，并使用std140布局计算出每个成员的对齐偏移量：</p><div class="sourceCode" id="cb11"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>    layout <span class="op">(</span>std140<span class="op">)</span> uniform ExampleBlock</span><span id="cb11-2"><a href="#cb11-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb11-3"><a href="#cb11-3" aria-hidden="true" tabindex="-1"></a>                         <span class="co">// 基准对齐量       // 对齐偏移量</span></span><span id="cb11-4"><a href="#cb11-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> value<span class="op">;</span>     <span class="co">// 4               // 0 </span></span><span id="cb11-5"><a href="#cb11-5" aria-hidden="true" tabindex="-1"></a>        vec3 vector<span class="op">;</span>     <span class="co">// 16              // 16  (必须是16的倍数，所以 4-&gt;16)</span></span><span id="cb11-6"><a href="#cb11-6" aria-hidden="true" tabindex="-1"></a>        mat4 matrix<span class="op">;</span>     <span class="co">// 16              // 32  (列 0)</span></span><span id="cb11-7"><a href="#cb11-7" aria-hidden="true" tabindex="-1"></a>                         <span class="co">// 16              // 48  (列 1)</span></span><span id="cb11-8"><a href="#cb11-8" aria-hidden="true" tabindex="-1"></a>                         <span class="co">// 16              // 64  (列 2)</span></span><span id="cb11-9"><a href="#cb11-9" aria-hidden="true" tabindex="-1"></a>                         <span class="co">// 16              // 80  (列 3)</span></span><span id="cb11-10"><a href="#cb11-10" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> values<span class="op">[</span><span class="dv">3</span><span class="op">];</span> <span class="co">// 16              // 96  (values[0])  //**`数组和vec4相同`**</span></span><span id="cb11-11"><a href="#cb11-11" aria-hidden="true" tabindex="-1"></a>                         <span class="co">// 16              // 112 (values[1])</span></span><span id="cb11-12"><a href="#cb11-12" aria-hidden="true" tabindex="-1"></a>                         <span class="co">// 16              // 128 (values[2])</span></span><span id="cb11-13"><a href="#cb11-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> boolean<span class="op">;</span>    <span class="co">// 4               // 144</span></span><span id="cb11-14"><a href="#cb11-14" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> integer<span class="op">;</span>     <span class="co">// 4               // 148</span></span><span id="cb11-15"><a href="#cb11-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span> </span></code></pre></div><p>使用计算后的偏移量值，根据std140布局的规则，我们就能使用像是glBufferSubData的函数将变量数据按照偏移量填充进缓冲中了。虽然std140布局不是最高效的布局，但它保证了内存布局在每个声明了这个Uniform块的程序中是一致的。通过在Uniform块定义之前添加layout(std140)语句，我们告诉OpenGL这个Uniform块使用的是std140布局。除此之外还可以选择两个布局，但它们都需要我们在填充缓冲之前先查询每个偏移量。我们已经见过shared布局了，剩下的一个布局是packed。当使用紧凑(Packed)布局时，是不能保证这个布局在每个程序中保持不变的（即非共享），因为它允许编译器去将uniform变量从Uniform块中优化掉，这在每个着色器中都可能是不同的。</p><h4 id="使用uniform缓冲">使用Uniform缓冲</h4><blockquote><p>主要步骤： 1. 基本信息设置vao vbo等，2.获取shader中uniform块id，并将id绑定到绑定点上3.创建块buffer对象(GL_UNIFORM_BUFFER类型)、申请足够内存，暂时不赋值数据（glBufferData）。。4. 定义绑定点（glBindBufferRange/glBindBufferBase） 5. 对buffer更新数据（bindbuffer、glBufferSubData）。</p></blockquote><p>首先，我们需要调用glGenBuffers，创建一个Uniform缓冲对象。一旦我们有了一个缓冲对象，我们需要将它绑定到GL_UNIFORM_BUFFER目标，并调用glBufferData，分配足够的内存。</p><div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> uboExampleBlock<span class="op">;</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>uboExampleBlock<span class="op">);</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> uboExampleBlock<span class="op">);</span></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> <span class="dv">152</span><span class="op">,</span> NULL<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span> <span class="co">// 分配152字节的内存</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span></code></pre></div><p>现在，每当我们需要对缓冲更新或者插入数据，我们都会绑定到uboExampleBlock，并使用glBufferSubData来更新它的内存。我们只需要更新这个Uniform缓冲一次，所有使用这个缓冲的着色器就都使用的是更新后的数据了。但是，如何才能让OpenGL知道哪个Uniform缓冲对应的是哪个Uniform块呢？</p><p>在OpenGL上下文中，定义了一些绑定点(BindingPoint)，我们可以将一个Uniform缓冲链接至它。在创建Uniform缓冲之后，我们将它绑定到其中一个绑定点上，并将着色器中的Uniform块绑定到相同的绑定点，把它们连接到一起。下面的这个图示展示了这个：</p><p>！<a href="/Sources/imgs/advanced_glsl_binding_points.png"></a></p><p>为了将Uniform块绑定到一个特定的绑定点中，我们需要调用glUniformBlockBinding函数，它的第一个参数是一个程序对象，之后是一个Uniform块索引和链接到的绑定点。Uniform块索引(UniformBlockIndex)是着色器中已定义Uniform块的位置值索引。这可以通过调用glGetUniformBlockIndex来获取，它接受一个程序对象和Uniform块的名称。我们可以用以下方式将图示中的LightsUniform块链接到绑定点2：</p><div class="sourceCode" id="cb13"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> lights_index <span class="op">=</span> glGetUniformBlockIndex<span class="op">(</span>shaderA<span class="op">.</span>ID<span class="op">,</span> <span class="st">"Lights"</span><span class="op">);</span>   </span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    glUniformBlockBinding<span class="op">(</span>shaderA<span class="op">.</span>ID<span class="op">,</span> lights_index<span class="op">,</span> <span class="dv">2</span><span class="op">);</span></span></code></pre></div><p>接下来，我们还需要绑定Uniform缓冲对象到相同的绑定点上，这可以使用glBindBufferBase或glBindBufferRange来完成。</p><div class="sourceCode" id="cb14"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb14-1"><a href="#cb14-1" aria-hidden="true" tabindex="-1"></a>    glBindBufferBase<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> <span class="dv">2</span><span class="op">,</span> uboExampleBlock<span class="op">);</span> </span><span id="cb14-2"><a href="#cb14-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 或 绑定点、buffer，起始位置、大小</span></span><span id="cb14-3"><a href="#cb14-3" aria-hidden="true" tabindex="-1"></a>    glBindBufferRange<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> <span class="dv">2</span><span class="op">,</span> uboExampleBlock<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">152</span><span class="op">);</span></span></code></pre></div><p>更新缓冲</p><div class="sourceCode" id="cb15"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb15-1"><a href="#cb15-1" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> uboExampleBlock<span class="op">);</span></span><span id="cb15-2"><a href="#cb15-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> b <span class="op">=</span> <span class="kw">true</span><span class="op">;</span> <span class="co">// GLSL中的bool是4字节的，所以我们将它存为一个integer</span></span><span id="cb15-3"><a href="#cb15-3" aria-hidden="true" tabindex="-1"></a>    glBufferSubData<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> <span class="dv">144</span><span class="op">,</span> <span class="dv">4</span><span class="op">,</span> <span class="op">&amp;</span>b<span class="op">);</span> </span><span id="cb15-4"><a href="#cb15-4" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_UNIFORM_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span></code></pre></div><p>Uniform缓冲对象比起独立的uniform有很多好处。第一，一次设置很多uniform会比一个一个设置多个uniform要快很多。第二，比起在多个着色器中修改同样的uniform，在Uniform缓冲中修改一次会更容易一些。最后一个好处可能不会立即显现，如果使用Uniform缓冲对象的话，你可以在着色器中使用更多的uniform。OpenGL限制了它能够处理的uniform数量，这可以通过GL_MAX_VERTEX_UNIFORM_COMPONENTS来查询。当使用Uniform缓冲对象时，最大的数量会更高。所以，当你达到了uniform的最大数量时（比如再做骨骼动画(SkeletalAnimation)的时候），你总是可以选择使用Uniform缓冲对象。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/07.gao-ji-shu-ju/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/07.gao-ji-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="高级数据">高级数据</h2><h3 id="基本介绍">基本介绍</h3><p>OpenGL中的缓冲只是一个管理特定内存块的对象，没有其它更多的功能了。在我们将它绑定到一个缓冲目标(BufferTarget)时，我们才赋予了其意义。当我们绑定一个缓冲到GL_ARRAY_BUFFER时，它就是一个顶点数组缓冲，但我们也可以很容易地将其绑定到GL_ELEMENT_ARRAY_BUFFER。OpenGL内部会为每个目标储存一个缓冲，并且会根据目标的不同，以不同的方式处理缓冲。</p><p>到目前为止，我们一直是调用glBufferData函数来填充缓冲对象所管理的内存，这个函数会分配一块内存，并将数据添加到这块内存中。如果我们将它的data参数设置为NULL，那么这个函数将只会分配内存，但不进行填充。这在我们需要预留(Reserve)特定大小的内存，之后回到这个缓冲一点一点填充的时候会很有用。</p><p>除了使用一次函数调用填充整个缓冲之外，我们也可以使用glBufferSubData，填充缓冲的特定区域。这个函数需要一个缓冲目标、一个偏移量、数据的大小和数据本身作为它的参数。这个函数不同的地方在于，我们可以提供一个偏移量，指定从何处开始填充这个缓冲。这能够让我们插入或者更新缓冲内存的某一部分。要注意的是，缓冲需要有足够的已分配内存，所以对一个缓冲调用glBufferSubData之前必须要先调用glBufferData。</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    glBufferSubData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">24</span><span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>data<span class="op">),</span> <span class="op">&amp;</span>data<span class="op">);</span> <span class="co">// 范围： [24, 24 + sizeof(data)]</span></span></code></pre></div><p>还有另一种方法:</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> data<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>      <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.35</span><span class="bu">f</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>      <span class="op">...</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> buffer<span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 获取指针</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="op">*</span>ptr <span class="op">=</span> glMapBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> GL_WRITE_ONLY<span class="op">);</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 复制数据到内存</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    memcpy<span class="op">(</span>ptr<span class="op">,</span> data<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>data<span class="op">));</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 记得告诉OpenGL我们不再需要这个指针了</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    glUnmapBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">);</span></span></code></pre></div><p>如果要直接映射数据到缓冲，而不事先将其存储到临时内存中，glMapBuffer这个函数会很有用。比如说，你可以从文件中读取数据，并直接将它们复制到缓冲内存中。</p><h3 id="分批顶点属性">分批顶点属性</h3><p>通过使用glVertexAttribPointer，我们能够指定顶点数组缓冲内容的属性布局。在顶点数组缓冲中，我们对属性进行了交错(Interleave)处理，也就是说，我们将每一个顶点的位置、发现和/或纹理坐标紧密放置在一起。既然我们现在已经对缓冲有了更多的了解，我们可以采取另一种方式。</p><p>我们可以做的是，将每一种属性类型的向量数据打包(Batch)为一个大的区块，而不是对它们进行交错储存。与交错布局123123123123不同，我们将采用分批(Batched)的方式111122223333。</p><p>当从文件中加载顶点数据的时候，你通常获取到的是一个位置数组、一个法线数组和/或一个纹理坐标数组。我们需要花点力气才能将这些数组转化为一个大的交错数据数组。使用分批的方式会是更简单的解决方案，我们可以很容易使用glBufferSubData函数实现：</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> positions<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> normals<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> tex<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 填充缓冲</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    glBufferSubData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>positions<span class="op">),</span> <span class="op">&amp;</span>positions<span class="op">);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    glBufferSubData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>positions<span class="op">),</span> <span class="kw">sizeof</span><span class="op">(</span>normals<span class="op">),</span> <span class="op">&amp;</span>normals<span class="op">);</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    glBufferSubData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>positions<span class="op">)</span> <span class="op">+</span> <span class="kw">sizeof</span><span class="op">(</span>normals<span class="op">),</span> <span class="kw">sizeof</span><span class="op">(</span>tex<span class="op">),</span> <span class="op">&amp;</span>tex<span class="op">);</span></span></code></pre></div><p>这样子我们就能直接将属性数组作为一个整体传递给缓冲，而不需要事先处理它们了。我们仍可以将它们合并为一个大的数组，再使用glBufferData来填充缓冲，但对于这种工作，使用glBufferSubData会更合适一点。我们还需要更新顶点属性指针来反映这些改变：</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="dv">0</span><span class="op">);</span>  </span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="kw">sizeof</span><span class="op">(</span>positions<span class="op">)));</span>  </span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>      <span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">2</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="kw">sizeof</span><span class="op">(</span>positions<span class="op">)</span> <span class="op">+</span> <span class="kw">sizeof</span><span class="op">(</span>normals<span class="op">)))</span></span></code></pre></div><p>注意stride参数等于顶点属性的大小，因为下一个顶点属性向量能在3个（或2个）分量之后找到。</p><p>这给了我们设置顶点属性的另一种方法。使用哪种方法都不会对OpenGL有什么立刻的好处，它只是设置顶点属性的一种更整洁的方式。具体使用的方法将完全取决于你的喜好与程序类型。</p><h3 id="复制缓冲">复制缓冲</h3><p>当你的缓冲已经填充好数据之后，你可能会想与其它的缓冲共享其中的数据，或者想要将缓冲的内容复制到另一个缓冲当中。glCopyBufferSubData能够让我们相对容易地从一个缓冲中复制数据到另一个缓冲中。这个函数的原型如下：</p><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> glCopyBufferSubData<span class="op">(</span>GLenum readtarget<span class="op">,</span> GLenum writetarget<span class="op">,</span> GLintptr readoffset<span class="op">,</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>                         GLintptr writeoffset<span class="op">,</span> GLsizeiptr size<span class="op">);</span></span></code></pre></div><p>readtarget和writetarget参数需要填入复制源和复制目标的缓冲目标。比如说，我们可以将VERTEX_ARRAY_BUFFER缓冲复制到VERTEX_ELEMENT_ARRAY_BUFFER缓冲，分别将这些缓冲目标设置为读和写的目标。当前绑定到这些缓冲目标的缓冲将会被影响到。</p><p>但如果我们想读写数据的两个不同缓冲都为顶点数组缓冲该怎么办呢？我们不能同时将两个缓冲绑定到同一个缓冲目标上。正是出于这个原因，OpenGL提供给我们另外两个缓冲目标，叫做GL_COPY_READ_BUFFER和GL_COPY_WRITE_BUFFER。我们接下来就可以将需要的缓冲绑定到这两个缓冲目标上，并将这两个目标作为readtarget和writetarget参数。</p><p>接下来glCopyBufferSubData会从readtarget中读取size大小的数据，并将其写入writetarget缓冲的writeoffset偏移量处。下面这个例子展示了如何复制两个顶点数组缓冲：</p><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertexData<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_COPY_READ_BUFFER<span class="op">,</span> vbo1<span class="op">);</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_COPY_WRITE_BUFFER<span class="op">,</span> vbo2<span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    glCopyBufferSubData<span class="op">(</span>GL_COPY_READ_BUFFER<span class="op">,</span> GL_COPY_WRITE_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertexData<span class="op">));</span></span></code></pre></div><p>我们也可以只将writetarget缓冲绑定为新的缓冲目标类型之一：</p><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertexData<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span> <span class="op">...</span> <span class="op">};</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> vbo1<span class="op">);</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_COPY_WRITE_BUFFER<span class="op">,</span> vbo2<span class="op">);</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    glCopyBufferSubData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> GL_COPY_WRITE_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertexData<span class="op">));</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/06.li-fang-ti-tie-tu/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/06.li-fang-ti-tie-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="立方体贴图">立方体贴图</h2><blockquote><p>我们将讨论的是将多个纹理组合起来映射到一张纹理上的一种纹理类型：立方体贴图(CubeMap)。</p></blockquote><ol type="1"><li><p>创建立方体贴图 &gt;立方体贴图是和其它纹理一样的，所以如果想创建一个立方体贴图的话，我们需要生成一个纹理，并将其绑定到纹理目标上，之后再做其它的纹理操作。这次要绑定到GL_TEXTURE_CUBE_MAP：</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> textureID<span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>textureID<span class="op">);</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_CUBE_MAP<span class="op">,</span> textureID<span class="op">);</span></span></code></pre></div><p>因为立方体贴图包含有6个纹理，每个面一个，我们需要调用glTexImage2D函数6次，参数和之前教程中很类似。但这一次我们将纹理目标(target)参数设置为立方体贴图的一个特定的面，告诉OpenGL我们在对立方体贴图的哪一个面创建纹理。这就意味着我们需要对立方体贴图的每一个面都调用一次glTexImage2D。</p><table><thead><tr class="header"><th style="text-align: left;">纹理目标</th><th style="text-align: left;">方位</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">GL_TEXTURE_CUBE_MAP_POSITIVE_X</td><td style="text-align: left;">右</td></tr><tr class="even"><td style="text-align: left;">GL_TEXTURE_CUBE_MAP_NEGATIVE_X</td><td style="text-align: left;">左</td></tr><tr class="odd"><td style="text-align: left;">GL_TEXTURE_CUBE_MAP_POSITIVE_Y</td><td style="text-align: left;">上</td></tr><tr class="even"><td style="text-align: left;">GL_TEXTURE_CUBE_MAP_NEGATIVE_Y</td><td style="text-align: left;">下</td></tr><tr class="odd"><td style="text-align: left;">GL_TEXTURE_CUBE_MAP_POSITIVE_Z</td><td style="text-align: left;">后</td></tr><tr class="even"><td style="text-align: left;">GL_TEXTURE_CUBE_MAP_NEGATIVE_Z</td><td style="text-align: left;">前</td></tr></tbody></table><p>和OpenGL的很多枚举(Enum)一样，它们背后的int值是线性递增的，所以如果我们有一个纹理位置的数组或者vector，我们就可以从GL_TEXTURE_CUBE_MAP_POSITIVE_X开始遍历它们，在每个迭代中对枚举值加1，遍历了整个纹理目标：</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrChannels<span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">char</span> <span class="op">*</span>data<span class="op">;</span>  </span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//textures_faces 贴图路径的 vector</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> textures_faces<span class="op">.</span>size<span class="op">();</span> i<span class="op">++)</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        data <span class="op">=</span> stbi_load<span class="op">(</span>textures_faces<span class="op">[</span>i<span class="op">].</span>c_str<span class="op">(),</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        glTexImage2D<span class="op">(</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>            GL_TEXTURE_CUBE_MAP_POSITIVE_X <span class="op">+</span> i<span class="op">,</span> </span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>            <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data</span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="op">);</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>因为立方体贴图和其它纹理没什么不同，我们也需要设定它的环绕和过滤方式：<code>cpp      glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);      glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);      glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);      glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);      //GL_TEXTURE_WRAP_R:纹理的R坐标设置了环绕方式，它对应的是纹理的第三个维度（和位置的z一样）      glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);</code></p><p>立方体贴图的Shader 采样器数据类型<code>samplerCube</code>，并且使用vec3的方向向量进行采样</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    in vec3 textureDir<span class="op">;</span> <span class="co">// 代表3D纹理坐标的方向向量</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    uniform samplerCube cubemap<span class="op">;</span> <span class="co">// 立方体贴图的纹理采样器</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span>             </span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> texture<span class="op">(</span>cubemap<span class="op">,</span> textureDir<span class="op">);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>立方体的一个重要用途：<code>天空盒（Skybox）</code></p></li><li><p>加载天空盒子 &gt; 和其他纹理一样， 只是对了一个轴向<code>R</code><code>cpp               unsigned int loadCubemap(vector&lt;std::string&gt; faces)         {             unsigned int textureID;             glGenTextures(1, &amp;textureID);             glBindTexture(GL_TEXTURE_CUBE_MAP, textureID);             int width, height, nrChannels;             for (unsigned int i = 0; i &lt; faces.size(); i++)             {                 unsigned char *data = stbi_load(faces[i].c_str(), &amp;width, &amp;height, &amp;nrChannels, 0);                 if (data)                 {                     glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i,                                   0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data                     );                     stbi_image_free(data);                 }                 else                 {                     std::cout &lt;&lt; "Cubemap texture failed to load at path: " &lt;&lt; faces[i] &lt;&lt; std::endl;                     stbi_image_free(data);                 }             }             glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);             glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);             glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);             glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);             glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);             return textureID;         }         vector&lt;std::string&gt; faces         {             "right.jpg",             "left.jpg",             "top.jpg",             "bottom.jpg",             "front.jpg",             "back.jpg"         };         unsigned int cubemapTexture = loadCubemap(faces);</code></p></li><li><p>显示天空盒子 &gt;天空盒和一般的立方体一样，只是渲染在对底层的背景上</p><ol type="1"><li><p>顶点着色器<code>cpp          #version 330 core          layout (location = 0) in vec3 aPos;          //立方体贴图的uv坐标 `vec3`          out vec3 TexCoords;          uniform mat4 projection;          uniform mat4 view;          void main()          {              TexCoords = aPos;              gl_Position = projection * view * vec4(aPos, 1.0);          }</code></p></li><li><p>片段着色器<code>cpp          #version 330 core          out vec4 FragColor;          in vec3 TexCoords;          //立方体贴图的采样器          uniform samplerCube skybox;          void main()          {                  FragColor = texture(skybox, TexCoords);          }</code></p></li><li><p>绘制天空盒时，我们需要将它变为场景中的第一个渲染的物体，并且禁用深度写入。这样子天空盒就会永远被绘制在其它物体的背后了。<code>cpp          glDepthMask(GL_FALSE);          skyboxShader.use();          // ... 设置观察和投影矩阵          glBindVertexArray(skyboxVAO);          glBindTexture(GL_TEXTURE_CUBE_MAP, cubemapTexture);          glDrawArrays(GL_TRIANGLES, 0, 36);          glDepthMask(GL_TRUE);          // ... 绘制剩下的场景</code></p></li></ol></li><li><p>优化点 &gt;目前我们是首先渲染天空盒，之后再渲染场景中的其它物体。这样子能够工作，但不是非常高效。如果我们先渲染天空盒，我们就会对屏幕上的每一个像素运行一遍片段着色器，即便只有一小部分的天空盒最终是可见的。可以使用提前深度测试(EarlyDepth Testing)轻松丢弃掉的片段能够节省我们很多宝贵的带宽。所以，我们将会最后渲染天空盒，以获得轻微的性能提升。这样子的话，深度缓冲就会填充满所有物体的深度值了，我们只需要在提前深度测试通过的地方渲染天空盒的片段就可以了，很大程度上减少了片段着色器的调用。问题是，天空盒只是一个1x1x1的立方体，它很可能会不通过大部分的深度测试，导致渲染失败。不用深度测试来进行渲染不是解决方案，因为天空盒将会复写场景中的其它物体。我们需要欺骗深度缓冲，让它认为天空盒有着最大的深度值1.0，只要它前面有一个物体，深度测试就会失败。</p><p>在坐标系统小节中我们说过，透视除法是在顶点着色器运行之后执行的，将gl_Position的xyz坐标除以w分量。我们又从深度测试小节中知道，相除结果的z分量等于顶点的深度值。使用这些信息，我们可以将输出位置的z分量等于它的w分量，让z分量永远等于1.0，这样子的话，当透视除法执行之后，z分量会变为w/ w = 1.0。</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        TexCoords <span class="op">=</span> aPos<span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        vec4 pos <span class="op">=</span> projection <span class="op">*</span> view <span class="op">*</span> vec4<span class="op">(</span>aPos<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">// w 替代z， 得到 1.0 的深度值。 将它从默认的GL_LESS改为GL_LEQUAL。深度缓冲将会填充上天空盒的1.0值，所以我们需要保证天空盒在值小于或等于深度缓冲而不是小于时通过深度测试。</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        gl_Position <span class="op">=</span> pos<span class="op">.</span>xyww<span class="op">;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol type="1"><li><p>反向,颜色取反</p><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>vec3<span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> texture<span class="op">(</span>screenTexture<span class="op">,</span> TexCoords<span class="op">)),</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>灰度 rgb 平均值</p><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> texture<span class="op">(</span>screenTexture<span class="op">,</span> TexCoords<span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">//float average = (FragColor.r + FragColor.g + FragColor.b) / 3.0;</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> average <span class="op">=</span> <span class="op">(</span>FragColor<span class="op">.</span>r <span class="op">+</span> FragColor<span class="op">.</span>g <span class="op">+</span> FragColor<span class="op">.</span>b<span class="op">)</span> <span class="op">*</span> <span class="fl">0.333333</span><span class="op">;</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>average<span class="op">,</span> average<span class="op">,</span> average<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>这已经能创造很好的结果了，但人眼会对绿色更加敏感一些，而对蓝色不那么敏感，所以为了获取物理上更精确的效果，我们需要使用加权的(Weighted)通道：r <code>0.2126</code>、 g <code>0.7152</code> 、 b <code>0.0722</code><code>cpp      void main()      {          FragColor = texture(screenTexture, TexCoords);          float average = 0.2126 * FragColor.r + 0.7152 * FragColor.g + 0.0722 * FragColor.b;          FragColor = vec4(average, average, average, 1.0);      }</code></p></li><li><p>核效果</p><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>        vec2 offsets<span class="op">[</span><span class="dv">9</span><span class="op">]</span> <span class="op">=</span> vec2<span class="op">[](</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(-</span>offset<span class="op">,</span>  offset<span class="op">),</span> <span class="co">// 左上</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>    offset<span class="op">),</span> <span class="co">// 正上</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> offset<span class="op">,</span>  offset<span class="op">),</span> <span class="co">// 右上</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(-</span>offset<span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span>   <span class="co">// 左</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>    <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span>   <span class="co">// 中</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> offset<span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span>   <span class="co">// 右</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(-</span>offset<span class="op">,</span> <span class="op">-</span>offset<span class="op">),</span> <span class="co">// 左下</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="op">-</span>offset<span class="op">),</span> <span class="co">// 正下</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> offset<span class="op">,</span> <span class="op">-</span>offset<span class="op">)</span>  <span class="co">// 右下</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">);</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> kernel<span class="op">[</span><span class="dv">9</span><span class="op">]</span> <span class="op">=</span> <span class="dt">float</span><span class="op">[](</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="dv">1</span><span class="op">,</span>  <span class="dv">9</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">);</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        vec3 sampleTex<span class="op">[</span><span class="dv">9</span><span class="op">];</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">9</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>            sampleTex<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> vec3<span class="op">(</span>texture<span class="op">(</span>screenTexture<span class="op">,</span> TexCoords<span class="op">.</span>st <span class="op">+</span> offsets<span class="op">[</span>i<span class="op">]));</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        vec3 col <span class="op">=</span> vec3<span class="op">(</span><span class="fl">0.0</span><span class="op">);</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">9</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>            col <span class="op">+=</span> sampleTex<span class="op">[</span>i<span class="op">]</span> <span class="op">*</span> kernel<span class="op">[</span>i<span class="op">];</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>col<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>模糊<code>cpp          float kernel[9] = float[](              1.0 / 16, 2.0 / 16, 1.0 / 16,              2.0 / 16, 4.0 / 16, 2.0 / 16,              1.0 / 16, 2.0 / 16, 1.0 / 16            );</code></p></li><li><p>边缘检测</p><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> kernel<span class="op">[</span><span class="dv">9</span><span class="op">]</span> <span class="op">=</span> <span class="dt">float</span><span class="op">[](</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">8</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span>  </span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">);</span></span></code></pre></div></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/05.zheng-huan-chong/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/05.zheng-huan-chong/</url>
      
        <content type="html"><![CDATA[<h2 id="帧缓冲">帧缓冲</h2><blockquote><p>我们已经使用了很多屏幕缓冲了：用于写入颜色值的颜色缓冲、用于写入深度信息的深度缓冲和允许我们根据一些条件丢弃特定片段的模板缓冲。这些缓冲结合起来叫做帧缓冲(Framebuffer)，它被储存在内存中。OpenGL允许我们定义我们自己的帧缓冲，也就是说我们能够定义我们自己的颜色缓冲，甚至是深度缓冲和模板缓冲。</p></blockquote><ol type="1"><li><p>创建缓冲 &gt; 帧缓冲对象(Framebuffer Object, FBO)：</p><ul><li>创建帧缓冲对象</li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> fbo<span class="op">;</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    glGenFramebuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>fbo<span class="op">);</span></span></code></pre></div><ul><li>绑定帧缓冲对象</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    glBindFramebuffer<span class="op">(</span>GL_FRAMEBUFFER<span class="op">,</span> fbo<span class="op">);</span></span></code></pre></div><p>在绑定到GL_FRAMEBUFFER目标之后，所有的读取和写入帧缓冲的操作将会影响当前绑定的帧缓冲。我们也可以使用GL_READ_FRAMEBUFFER或GL_DRAW_FRAMEBUFFER，将一个帧缓冲分别绑定到读取目标或写入目标。绑定到GL_READ_FRAMEBUFFER的帧缓冲将会使用在所有像是glReadPixels的读取操作中，而绑定到GL_DRAW_FRAMEBUFFER的帧缓冲将会被用作渲染、清除等写入操作的目标。大部分情况你都不需要区分它们，通常都会使用GL_FRAMEBUFFER，绑定到两个上。</p><p>不幸的是，我们现在还不能使用我们的帧缓冲，因为它还不完整(Complete)，一个完整的帧缓冲需要满足以下的条件：</p><ul><li>附加至少一个缓冲（颜色、深度或模板缓冲）。</li><li>至少有一个颜色附件(Attachment)。</li><li>所有的附件都必须是完整的（保留了内存）。</li><li>每个缓冲都应该有相同的样本数。</li></ul><p>GL_FRAMEBUFFER为参数调用glCheckFramebufferStatus，检查帧缓冲是否完整。它将会检测当前绑定的帧缓冲，并返回规范中这些值的其中之一。如果它返回的是GL_FRAMEBUFFER_COMPLETE，帧缓冲就是完整的了。<code>cpp      if(glCheckFramebufferStatus(GL_FRAMEBUFFER) == GL_FRAMEBUFFER_COMPLETE)      {          // 执行胜利的舞蹈      }</code></p><p>操作完成后重新设置为默认值<code>cpp      glBindFramebuffer(GL_FRAMEBUFFER, 0);</code></p><p>在所有使用完成后需要清理fbo对象<code>cpp      glDeleteFramebuffers(1, &amp;fbo);</code></p></li><li><p>纹理附件</p><ol type="1"><li><p>创建一个渲染缓冲对象的代码和帧缓冲的代码很类似：<code>cpp          unsigned int rbo;          glGenRenderbuffers(1, &amp;rbo);</code></p></li><li><p>类似，我们需要绑定这个渲染缓冲对象，让之后所有的渲染缓冲操作影响当前的rbo：<code>cpp          glBindRenderbuffer(GL_RENDERBUFFER, rbo);</code></p></li><li><p>创建一个深度和模板渲染缓冲对象可以通过调用glRenderbufferStorage函数来完成：<code>cpp          glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, 800, 600);</code></p></li><li><p>最后一件事就是附加这个渲染缓冲对象：<code>cpp          glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, rbo);</code></p></li></ol></li><li><p>渲染到纹理我们将会将场景渲染到一个附加到帧缓冲对象上的颜色纹理中，之后将在一个横跨整个屏幕的四边形上绘制这个纹理。这样视觉输出和没使用帧缓冲时是完全一样的，但这次是打印到了一个四边形上。</p><ol type="1"><li><p>首先要创建一个帧缓冲对象，并绑定它，这些都很直观：<code>cpp          unsigned int framebuffer;          glGenFramebuffers(1, &amp;framebuffer);          glBindFramebuffer(GL_FRAMEBUFFER, framebuffer);</code></p></li><li><p>接下来我们需要创建一个纹理图像，我们将它作为一个颜色附件附加到帧缓冲上。我们将纹理的维度设置为窗口的宽度和高度，并且不初始化它的数据：<code>cpp          // 生成纹理          unsigned int texColorBuffer;          glGenTextures(1, &amp;texColorBuffer);          glBindTexture(GL_TEXTURE_2D, texColorBuffer);          glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, 800, 600, 0, GL_RGB, GL_UNSIGNED_BYTE, NULL);          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR );          glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);          glBindTexture(GL_TEXTURE_2D, 0);          // 将它附加到当前绑定的帧缓冲对象          glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, GL_TEXTURE_2D, texColorBuffer, 0);</code></p></li><li><p>创建一个渲染缓冲对象不是非常复杂。我们需要记住的唯一事情是，我们将它创建为一个深度和模板附件渲染缓冲对象。我们将它的内部格式设置为GL_DEPTH24_STENCIL8，对我们来说这个精度已经足够了。<code>cpp          unsigned int rbo;          glGenRenderbuffers(1, &amp;rbo);          glBindRenderbuffer(GL_RENDERBUFFER, rbo);           glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, 800, 600);            glBindRenderbuffer(GL_RENDERBUFFER, 0);</code></p></li><li><p>接下来，作为完成帧缓冲之前的最后一步，我们将渲染缓冲对象附加到帧缓冲的深度和模板附件上：<code>cpp          glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, rbo);</code></p></li><li><p>最后，我们希望检查帧缓冲是否是完整的，如果不是，我们将打印错误信息。<code>cpp          if(glCheckFramebufferStatus(GL_FRAMEBUFFER) != GL_FRAMEBUFFER_COMPLETE)              std::cout &lt;&lt; "ERROR::FRAMEBUFFER:: Framebuffer is not complete!" &lt;&lt; std::endl;          glBindFramebuffer(GL_FRAMEBUFFER, 0);</code></p></li></ol><p>记得要解绑帧缓冲，保证我们不会不小心渲染到错误的帧缓冲上。</p></li><li><p>后处理 &gt; 单纯重复渲染是一种，更多的用图在<code>后处理</code>&gt; 图形数学，<code>卷积</code>、<code>微积分</code>、<code>高阶数学算子</code></p><ol type="1"><li><p>反向,颜色取反</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>vec3<span class="op">(</span><span class="fl">1.0</span> <span class="op">-</span> texture<span class="op">(</span>screenTexture<span class="op">,</span> TexCoords<span class="op">)),</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>灰度 rgb 平均值</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> texture<span class="op">(</span>screenTexture<span class="op">,</span> TexCoords<span class="op">);</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="co">//float average = (FragColor.r + FragColor.g + FragColor.b) / 3.0;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> average <span class="op">=</span> <span class="op">(</span>FragColor<span class="op">.</span>r <span class="op">+</span> FragColor<span class="op">.</span>g <span class="op">+</span> FragColor<span class="op">.</span>b<span class="op">)</span> <span class="op">*</span> <span class="fl">0.333333</span><span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>average<span class="op">,</span> average<span class="op">,</span> average<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>这已经能创造很好的结果了，但人眼会对绿色更加敏感一些，而对蓝色不那么敏感，所以为了获取物理上更精确的效果，我们需要使用加权的(Weighted)通道：r <code>0.2126</code>、 g <code>0.7152</code> 、 b <code>0.0722</code><code>cpp      void main()      {          FragColor = texture(screenTexture, TexCoords);          float average = 0.2126 * FragColor.r + 0.7152 * FragColor.g + 0.0722 * FragColor.b;          FragColor = vec4(average, average, average, 1.0);      }</code></p></li><li><p>核效果</p><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        vec2 offsets<span class="op">[</span><span class="dv">9</span><span class="op">]</span> <span class="op">=</span> vec2<span class="op">[](</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(-</span>offset<span class="op">,</span>  offset<span class="op">),</span> <span class="co">// 左上</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>    offset<span class="op">),</span> <span class="co">// 正上</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> offset<span class="op">,</span>  offset<span class="op">),</span> <span class="co">// 右上</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(-</span>offset<span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span>   <span class="co">// 左</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>    <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span>   <span class="co">// 中</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> offset<span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span>   <span class="co">// 右</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(-</span>offset<span class="op">,</span> <span class="op">-</span>offset<span class="op">),</span> <span class="co">// 左下</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="op">-</span>offset<span class="op">),</span> <span class="co">// 正下</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>            vec2<span class="op">(</span> offset<span class="op">,</span> <span class="op">-</span>offset<span class="op">)</span>  <span class="co">// 右下</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">);</span></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> kernel<span class="op">[</span><span class="dv">9</span><span class="op">]</span> <span class="op">=</span> <span class="dt">float</span><span class="op">[](</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="dv">1</span><span class="op">,</span>  <span class="dv">9</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">1</span></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>        <span class="op">);</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        vec3 sampleTex<span class="op">[</span><span class="dv">9</span><span class="op">];</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">9</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>            sampleTex<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> vec3<span class="op">(</span>texture<span class="op">(</span>screenTexture<span class="op">,</span> TexCoords<span class="op">.</span>st <span class="op">+</span> offsets<span class="op">[</span>i<span class="op">]));</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>        vec3 col <span class="op">=</span> vec3<span class="op">(</span><span class="fl">0.0</span><span class="op">);</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">9</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a>            col <span class="op">+=</span> sampleTex<span class="op">[</span>i<span class="op">]</span> <span class="op">*</span> kernel<span class="op">[</span>i<span class="op">];</span></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>col<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>模糊<code>cpp          float kernel[9] = float[](              1.0 / 16, 2.0 / 16, 1.0 / 16,              2.0 / 16, 4.0 / 16, 2.0 / 16,              1.0 / 16, 2.0 / 16, 1.0 / 16            );</code></p></li><li><p>边缘检测</p><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> kernel<span class="op">[</span><span class="dv">9</span><span class="op">]</span> <span class="op">=</span> <span class="dt">float</span><span class="op">[](</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="op">-</span><span class="dv">8</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">1</span>  </span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">);</span></span></code></pre></div></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/04.mian-ti-chu/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/04.mian-ti-chu/</url>
      
        <content type="html"><![CDATA[<h2 id="面剔除">面剔除</h2><blockquote><p>能够以某种方式丢弃这几个看不见的面，我们能省下超过50%的片段着色器执行数！OpenGL能够检查所有面向(FrontFacing)观察者的面，并渲染它们，而丢弃那些背向(BackFacing)的面，节省我们很多的片段着色器调用（它们的开销很大！）。但我们仍要告诉OpenGL哪些面是正向面(FrontFace)，哪些面是背向面(BackFace)。OpenGL使用了一个很聪明的技巧，分析顶点数据的环绕顺序(WindingOrder)。</p></blockquote><ol type="1"><li><p>环绕顺序 &gt;每组组成三角形图元的三个顶点就包含了一个环绕顺序。OpenGL在渲染图元的时候将使用这个信息来决定一个三角形是一个正向三角形还是背向三角形。默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形。&gt;当你定义顶点顺序的时候，你应该想象对应的三角形是面向你的，所以你定义的三角形从正面看去应该是逆时针的。这样定义顶点很棒的一点是，实际的环绕顺序是在光栅化阶段进行的，也就是顶点着色器运行之后。这些顶点就是从观察者视角所见的了</p></li><li><p>面剔除OpenGL能够丢弃那些渲染为背向三角形的三角形图元。既然已经知道如何设置顶点的环绕顺序了，我们就可以使用OpenGL的面剔除选项了，它默认是禁用状态的。<code>cpp         glEnable(GL_CULL_FACE);</code>glCullFace函数有三个可用的选项：</p><ul><li>GL_BACK：只剔除背向面。</li><li>GL_FRONT：只剔除正向面。</li><li>GL_FRONT_AND_BACK：剔除正向面和背向面。</li></ul><p>除了需要剔除的面之外，我们也可以通过调用<code>glFrontFace</code>，告诉OpenGL我们希望将顺时针的面（而不是逆时针的面）定义为正向面：<code>cpp      glFrontFace(GL_CCW);</code>默认值是GL_CCW，它代表的是逆时针的环绕顺序，另一个选项是GL_CW，它（显然）代表的是顺时针顺序。</p></li><li><p>代码解释</p><ul><li><p>首先启用面剔除<code>cpp          glEnable(GL_CULL_FACE);</code></p></li><li><p>指定绕向顺序和剔除面<code>cpp          // 默认情况下，逆时针顶点所定义的三角形将会被处理为正向三角形，          //1. 指定正面为逆时针，再剔除正面，则剔除正面          //glCullFace(GL_FRONT);          //glFrontFace(GL_CCW);          //2. 指定正面为顺时针(实际的正面被指定为了背面)，然后剔除背面，则效果上正面被剔除了。          glCullFace(GL_BACK);          glFrontFace(GL_CW);</code></p></li></ul></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/03.hun-he-blending/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/03.hun-he-blending/</url>
      
        <content type="html"><![CDATA[<h2 id="混合blending">混合Blending</h2><blockquote><p>OpenGL中，混合(Blending)通常是实现物体透明度(Transparency)的一种技术。透明就是说一个物体（或者其中的一部分）不是纯色(SolidColor)的，它的颜色是物体本身的颜色和它背后其它物体的颜色的不同强度结合。一个有色玻璃窗是一个透明的物体，玻璃有它自己的颜色，但它最终的颜色还包含了玻璃之后所有物体的颜色。这也是混合这一名字的出处，我们混合(Blend)（不同物体的）多种颜色为一种颜色。所以透明度能让我们看穿物体。我们目前一直使用的纹理有三个颜色分量：红、绿、蓝。但一些材质会有一个内嵌的alpha通道，对每个纹素(Texel)都包含了一个alpha值</p></blockquote><ol type="1"><li><p>丢弃片元<code>cpp         vec4 texColor = texture(texture1, TexCoords);         //对于透明处的丢弃         if(texColor.a &lt; 0.1)             discard;         FragColor = texColor;</code></p></li><li><p>混合 &gt;虽然直接丢弃片段很好，但它不能让我们渲染半透明的图像。我们要么渲染一个片段，要么完全丢弃它。要想渲染有多个透明度级别的图像，我们需要启用混合(Blending)。和OpenGL大多数的功能一样，我们可以启用GL_BLEND来启用混合：<code>glEnable(GL_BLEND);</code>启用了混合之后，我们需要告诉OpenGL它该如何混合。</p><p>OpenGL中的混合是通过下面这个方程来实现的： <span class="math display">\[     \overline{C_{result}} = \overline{C_{source}}*\overline{F_{source}}+ \overline{C_{destination}}*\overline{F_{destination}}     C_{source}：源颜色向量。这是源自纹理的颜色向量。     C_{destination}：目标颜色向量。这是当前储存在颜色缓冲中的颜色向量。     F_{source}：源因子值。指定了alpha值对源颜色的影响。     F_{destination}：目标因子值。指定了alpha值对目标颜色的影响。\]</span></p><p>TODO</p><table><thead><tr class="header"><th>行为</th><th>描述</th></tr></thead><tbody><tr class="odd"><td>GL_KEEP</td><td>保持当前储存的模板值</td></tr><tr class="even"><td>GL_ZERO</td><td>将模板值设置为0</td></tr><tr class="odd"><td>GL_REPLACE</td><td>将模板值设置为glStencilFunc函数设置的ref值</td></tr><tr class="even"><td>GL_INCR</td><td>如果模板值小于最大值则将模板值加1</td></tr><tr class="odd"><td>GL_INCR_WRAP</td><td>与GL_INCR一样，但如果模板值超过了最大值则归零</td></tr><tr class="even"><td>GL_DECR</td><td>如果模板值大于最小值则将模板值减1</td></tr><tr class="odd"><td>GL_DECR_WRAP 与GL_DECR一样，但如果模板值小于0则将其设置为最大值</td><td></td></tr><tr class="even"><td>GL_INVERT</td><td>按位翻转当前的模板缓冲值</td></tr></tbody></table></li><li><p>渲染半透明纹理 &gt;<code>glBlendFunc(GLenum sfactor, GLenum dfactor)函数接受两个参数，来设置源和目标因子</code></p><table><thead><tr class="header"><th>选项</th><th>值</th></tr></thead><tbody><tr class="odd"><td>GL_ZERO</td><td>因子等于0</td></tr><tr class="even"><td>GL_ONE</td><td>因子等于1</td></tr><tr class="odd"><td>GL_SRC_COLOR</td><td>因子等于源颜色向量C¯source</td></tr><tr class="even"><td>GL_ONE_MINUS_SRC_COLOR</td><td>因子等于1−C¯source</td></tr><tr class="odd"><td>GL_DST_COLOR</td><td>因子等于目标颜色向量C¯destination</td></tr><tr class="even"><td>GL_ONE_MINUS_DST_COLOR</td><td>因子等于1−C¯destination</td></tr><tr class="odd"><td>GL_SRC_ALPHA</td><td>因子等于C¯source的alpha 分量</td></tr><tr class="even"><td>GL_ONE_MINUS_SRC_ALPHA</td><td>因子等于1−C¯source的alpha分量</td></tr><tr class="odd"><td>GL_DST_ALPHA</td><td>因子等于C¯destination的alpha分量</td></tr><tr class="even"><td>GL_ONE_MINUS_DST_ALPHA</td><td>因子等于1−C¯destination的alpha分量</td></tr><tr class="odd"><td>GL_CONSTANT_COLOR</td><td>因子等于常数颜色向量C¯constant</td></tr><tr class="even"><td>GL_ONE_MINUS_CONSTANT_COLOR</td><td>因子等于1−C¯constant</td></tr><tr class="odd"><td>GL_CONSTANT_ALPHA</td><td>因子等于C¯constant的alpha分量</td></tr><tr class="even"><td>GL_ONE_MINUS_CONSTANT_ALPHA</td><td>因子等于1−C¯constant的alpha分量</td></tr></tbody></table><p>也可以使用glBlendFuncSeparate为RGB和alpha通道分别设置不同的选项：<code>glBlendFuncSeparate(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA, GL_ONE, GL_ZERO);</code>我们也可以让它们相减。glBlendEquation(GLenummode)允许我们设置运算符，它提供了三个选项：GL_FUNC_ADD：默认选项，将两个分量相加：C¯result=Src+Dst。GL_FUNC_SUBTRACT：将两个分量相减： C¯result=Src−Dst。GL_FUNC_REVERSE_SUBTRACT：将两个分量相减，但顺序相反：C¯result=Dst−Src。</p><ol type="1"><li>同其他参数一样，</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    glEnable<span class="op">(</span>GL_BLEND<span class="op">);</span> <span class="co">//开启混合选项</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    glBlendFunc<span class="op">(</span>GL_SRC_ALPHA<span class="op">,</span> GL_ONE_MINUS_SRC_ALPHA<span class="op">);</span> <span class="co">//设置混合函数</span></span></code></pre></div></li><li><p>排序如果你仔细看的话，你可能会注意到有些不对劲。最前面窗户的透明部分遮蔽了背后的窗户？这为什么会发生呢？发生这一现象的原因是，深度测试和混合一起使用的话会产生一些麻烦。当写入深度缓冲时，深度缓冲不会检查片段是否是透明的，所以透明的部分会和其它值一样写入到深度缓冲中。结果就是窗户的整个四边形不论透明度都会进行深度测试。即使透明的部分应该显示背后的窗户，深度测试仍然丢弃了它们。所以我们不能随意地决定如何渲染窗户，让深度缓冲解决所有的问题了。这也是混合变得有些麻烦的部分。要想保证窗户中能够显示它们背后的窗户，我们需要首先绘制背后的这部分窗户。这也就是说在绘制的时候，我们必须先手动将窗户按照最远到最近来排序，再按照顺序渲染。</p><p>要想让混合在多个物体上工作，我们需要最先绘制最远的物体，最后绘制最近的物体。普通不需要混合的物体仍然可以使用深度缓冲正常绘制，所以它们不需要排序。但我们仍要保证它们在绘制（排序的）透明物体之前已经绘制完毕了。当绘制一个有不透明和透明物体的场景的时候，大体的原则如下：</p><ol type="1"><li>先绘制所有不透明的物体。</li><li>对所有透明的物体排序。</li><li>按顺序绘制所有透明的物体。</li></ol><p>这里使用距离相机距离进行排序<code>cpp      std::map&lt;float, glm::vec3&gt; sorted;      for (unsigned int i = 0; i &lt; windows.size(); i++)      {          float distance = glm::length(camera.Position - windows[i]);          sorted[distance] = windows[i];      }</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/02.mo-ban-ce-shi/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/02.mo-ban-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="模板测试">模板测试</h2><blockquote><p>当片段着色器处理完一个片段之后，模板测试(StencilTest)会开始执行，和深度测试一样，它也可能会丢弃片段。接下来，被保留的片段会进入深度测试，它可能会丢弃更多的片段。模板测试是根据又一个缓冲来进行的，它叫做模板缓冲(StencilBuffer)，我们可以在渲染的时候更新它来获得一些很有意思的效果。</p></blockquote><blockquote><p>模板缓冲中的模板值(StencilValue)通常是8位的，因此每个片段/像素共有256种不同的模板值（译注：8位就是1字节大小,可表示256个不同的值，因此和char的容量一样是256个不同值）。我们可以将这些模板值设置为我们想要的值，然后当某一个片段有某一个模板值的时候，我们就可以选择丢弃或是保留这个片段了。</p></blockquote><ol type="1"><li><p>工作过程 &gt; 需要每次迭代前清除模板缓冲<code>glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);</code></p><ol type="1"><li>启用模板缓冲的写入。 <code>glEnable(GL_STENCIL_TEST);</code></li><li>渲染物体，更新模板缓冲的内容。 <code>glStencilMask</code>, eg:</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>   glStencilMask<span class="op">(</span><span class="bn">0xFF</span><span class="op">);</span> <span class="co">// 每一位写入模板缓冲时都保持原样</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>   glStencilMask<span class="op">(</span><span class="bn">0x00</span><span class="op">);</span> <span class="co">// 每一位在写入模板缓冲时都会变成0（禁用写入）</span></span></code></pre></div><ol start="3" type="1"><li>禁用模板缓冲的写入。</li><li>渲染（其它）物体，这次根据模板缓冲的内容丢弃特定的片段。</li></ol></li><li><p>模板函数 &gt;和深度测试一样，我们对模板缓冲应该通过还是失败，以及它应该如何影响模板缓冲，也是有一定控制的。一共有两个函数能够用来配置模板测试：<code>glStencilFunc和glStencilOp。</code></p><p>glStencilFunc(GLenum func, GLint ref, GLuint mask)一共包含三个参数 *func：设置模板测试函数(Stencil TestFunction)。这个测试函数将会应用到已储存的模板值上和glStencilFunc函数的ref值上。可用的选项有：GL_NEVER、GL_LESS、GL_LEQUAL、GL_GREATER、GL_GEQUAL、GL_EQUAL、GL_NOTEQUAL和GL_ALWAYS。它们的语义和深度缓冲的函数类似。* ref：设置了模板测试的参考值(ReferenceValue)。模板缓冲的内容将会与这个值进行比较。 *mask：设置一个掩码，它将会与参考值和储存的模板值在测试比较它们之前进行与(AND)运算。初始情况下所有位都为1。</p><p>但是glStencilFunc仅仅描述了OpenGL应该对模板缓冲内容做什么，而不是我们应该如何更新缓冲。这就需要glStencilOp这个函数了。glStencilOp(GLenum sfail, GLenum dpfail, GLenumdppass)一共包含三个选项，我们能够设定每个选项应该采取的行为： *sfail：模板测试失败时采取的行为。 *dpfail：模板测试通过，但深度测试失败时采取的行为。 *dppass：模板测试和深度测试都通过时采取的行为。 * 一般参数默认值glStencilOp(GL_KEEP, GL_KEEP, GL_REPLACE);</p><table><thead><tr class="header"><th style="text-align: left;">行为</th><th style="text-align: left;">描述</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">GL_KEEP</td><td style="text-align: left;">保持当前储存的模板值</td></tr><tr class="even"><td style="text-align: left;">GL_ZERO</td><td style="text-align: left;">将模板值设置为0</td></tr><tr class="odd"><td style="text-align: left;">GL_REPLACE</td><td style="text-align: left;">将模板值设置为glStencilFunc函数设置的ref值</td></tr><tr class="even"><td style="text-align: left;">GL_INCR</td><td style="text-align: left;">如果模板值小于最大值则将模板值加1</td></tr><tr class="odd"><td style="text-align: left;">GL_INCR_WRAP</td><td style="text-align: left;">与GL_INCR一样，但如果模板值超过了最大值则归零</td></tr><tr class="even"><td style="text-align: left;">GL_DECR</td><td style="text-align: left;">如果模板值大于最小值则将模板值减1</td></tr><tr class="odd"><td style="text-align: left;">GL_DECR_WRAP与GL_DECR一样，但如果模板值小于0则将其设置为最大值</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">GL_INVERT</td><td style="text-align: left;">按位翻转当前的模板缓冲值</td></tr></tbody></table></li><li><p>物体轮廓, 为物体创建轮廓的步骤如下： &gt;OpenGL的指令开启或关闭，直到下次改变前的渲染都是同一个状态值。</p><ol type="1"><li>在绘制（需要添加轮廓的）物体之前，将模板函数设置为GL_ALWAYS，此后物体的片段被渲染时，将模板缓冲更新为1。<code>cpp          glStencilFunc(GL_ALWAYS, 1, 0xFF);          glStencilMask(0xFF);</code></li><li>渲染物体。 此时会得到之前物体作为模板缓冲。<code>cpp          //....          glDrawArrays(GL_TRIANGLES, 0, 36);</code></li><li>禁用模板写入以及深度测试。 <code>GL_NOTEQUAL</code>只绘制模板之外的地方<code>cpp          glStencilFunc(GL_NOTEQUAL, 1, 0xFF);          glStencilMask(0x00);          //首先深度测试不需要，另外开启的话会造成`深度冲突`          glDisable(GL_DEPTH_TEST);</code></li><li>将每个物体缩放一点点。 绘制纯色的物体。<code>cpp          glDrawArrays(GL_TRIANGLES, 0, 36);</code></li><li>使用一个不同的片段着色器再次绘制物体，输出一个单独的（边框）颜色。但只在它们片段的模板值不等于1时才绘制。'绘制的纯色物体和模板进行测试'</li><li>再次启用模板写入和深度测试。</li></ol></li><li><p>主要代码<code>cpp         //1. 清除深度缓冲和模板缓冲         {             glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT); // don't forget to clear the stencil buffer!         }         outlineShader.use();         glm::mat4 model = glm::mat4(1.0f);         glm::mat4 view = camera.GetViewMatrix();         glm::mat4 projection = glm::perspective(glm::radians(camera.Zoom), (float)wWidth / (float)wHeight, 0.1f, 100.0f);         // ---- 基础设置         {             //设置outlineShader的VP矩阵             {                 outlineShader.setMat4("view", view);                 outlineShader.setMat4("projection", projection);             }             //设置shader的VP矩阵             {                 shader.use();                 shader.setMat4("view", view);                 shader.setMat4("projection", projection);             }         }                //2. 绘制Plan，并设置为不影响模板(禁用模板写入)         {             glStencilMask(0x00);             glBindVertexArray(planeVAO);             glBindTexture(GL_TEXTURE_2D, floorTexture);             shader.setMat4("model", glm::mat4(1.0f));             glDrawArrays(GL_TRIANGLES, 0, 6);             glBindVertexArray(0);         }         //3.绘制两个箱子，并且将箱子更新覆盖为模板缓冲(开启模板，并模板测试设置为GL_ALWAYS)         {             glStencilFunc(GL_ALWAYS, 1, 0xFF);             glStencilMask(0xFF);                         glBindVertexArray(cubeVAO);             glActiveTexture(GL_TEXTURE0);             glBindTexture(GL_TEXTURE_2D, cubeTexture);             model = glm::translate(model, glm::vec3(-1.0f, 0.0f, -1.0f));             shader.setMat4("model", model);             glDrawArrays(GL_TRIANGLES, 0, 36);             model = glm::mat4(1.0f);             model = glm::translate(model, glm::vec3(2.0f, 0.0f, 0.0f));             shader.setMat4("model", model);             glDrawArrays(GL_TRIANGLES, 0, 36);         }            //4. 绘制放大后的箱子,不绘制原有箱子的位置,并且不刷新模板缓冲,"关闭深度测试"(关闭模板写入，并模板测试设置为GL_NOTEQUAL,深度测试没有用此时关闭它)         {             glStencilFunc(GL_NOTEQUAL, 1, 0xFF);             glStencilMask(0x00);             glDisable(GL_DEPTH_TEST);             outlineShader.use();             float scale = 1.1;             // cubes             glBindVertexArray(cubeVAO);             glBindTexture(GL_TEXTURE_2D, cubeTexture);             model = glm::mat4(1.0f);             model = glm::translate(model, glm::vec3(-1.0f, 0.0f, -1.0f));             model = glm::scale(model, glm::vec3(scale, scale, scale));             outlineShader.setMat4("model", model);             glDrawArrays(GL_TRIANGLES, 0, 36);             model = glm::mat4(1.0f);             model = glm::translate(model, glm::vec3(2.0f, 0.0f, 0.0f));             model = glm::scale(model, glm::vec3(scale, scale, scale));             outlineShader.setMat4("model", model);             glDrawArrays(GL_TRIANGLES, 0, 36);         }         //5. 最后重置选项         {             glBindVertexArray(0);             glStencilMask(0xFF);             glStencilFunc(GL_ALWAYS, 0, 0xFF);             glEnable(GL_DEPTH_TEST);         }</code></p></li><li><p>UnityShader 另类描边实现 (不使用模板和normal) &gt;两次绘制，纯色绘制 <code>放大+ 偏移</code><code>cpp         Shader "Unlit/StencilTest"         {             Properties             {                 _MainTex ("Texture", 2D) = "white" {}             }             SubShader             {                 Tags { "RenderType"="Opaque" }                 LOD 100                              pass {                     CGPROGRAM                     #pragma vertex vert                     #pragma fragment frag                     // make fog work                     #pragma multi_compile_fog                     #include "UnityCG.cginc"                     struct appdata                     {                         float4 vertex : POSITION;                         float2 uv : TEXCOORD0;                     };                     struct v2f                     {                         float2 uv : TEXCOORD0;                         UNITY_FOG_COORDS(1)                         float4 vertex : SV_POSITION;                     };                     sampler2D _MainTex;                     float4 _MainTex_ST;                     v2f vert (appdata v)                     {                         v2f o;                         o.vertex = UnityObjectToClipPos(v.vertex);                         o.uv = TRANSFORM_TEX(v.uv, _MainTex);                         UNITY_TRANSFER_FOG(o,o.vertex);                         return o;                     }                     fixed4 frag (v2f i) : SV_Target                     {                         // sample the texture                         fixed4 col = tex2D(_MainTex, i.uv);                         // apply fog                         UNITY_APPLY_FOG(i.fogCoord, col);                         return col;                     }                     ENDCG                 }                 //Outline pass                 Pass                 {                     name "Outline"                     CGPROGRAM                     #pragma vertex vert                     #pragma fragment frag                     // make fog work                     #pragma multi_compile_fog                     #include "UnityCG.cginc"                                                             struct v2f                     {                         UNITY_FOG_COORDS(1)                         float4 vertex : SV_POSITION;                     };                     v2f vert (float4 vertex : POSITION)                     {                         v2f o;                         // 缩放系数`1.2`可调                         float3 vvertex = vertex.xyz*1.2 - (ObjSpaceViewDir(vertex).xyz);                         o.vertex = UnityObjectToClipPos(float4(vvertex, vertex.w));                         UNITY_TRANSFER_FOG(o,o.vertex);                         return o;                     }                     fixed4 frag (v2f i) : SV_Target                     {                         return fixed4(0.7, 0.85, 0.3, 1);                     }                     ENDCG                 }             }         }</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/04-gao-ji-opengl/01.shen-du-ce-shi/"/>
      <url>/2022/08/10/opengl/04-gao-ji-opengl/01.shen-du-ce-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="深度测试">深度测试</h2><blockquote><p>讨论这些储存在深度缓冲（或z缓冲(z-buffer)）中的深度值(DepthValue)，以及它们是如何确定一个片段是处于其它片段后方的。深度缓冲就像颜色缓冲(ColorBuffer)（储存所有的片段颜色：视觉输出）一样，在每个片段中储存了信息，并且（通常）和颜色缓冲有着一样的宽度和高度。深度缓冲是由窗口系统自动创建的，它会以16、24或32位float的形式储存它的深度值。在大部分的系统中，深度缓冲的精度都是24位的。1. 工作过程</p></blockquote><p>当深度测试(DepthTesting)被启用的时候，OpenGL会将一个片段的的深度值与深度缓冲的内容进行对比。OpenGL会执行一个深度测试，如果这个测试通过了的话，深度缓冲将会更新为新的深度值。如果深度测试失败了，片段将会被丢弃。</p><ol start="2" type="1"><li>工作阶段</li></ol><p>深度缓冲是在片段着色器运行之后（以及模板测试(StencilTesting)运行之后，我们将在下一节中讨论）在屏幕空间中运行的。屏幕空间坐标与通过OpenGL的glViewport所定义的视口密切相关，并且可以直接使用GLSL内建变量gl_FragCoord从片段着色器中直接访问。gl_FragCoord的x和y分量代表了片段的屏幕空间坐标（其中(0,0)位于左下角）。gl_FragCoord中也包含了一个z分量，它包含了片段真正的深度值。z值就是需要与深度缓冲内容所对比的那个值。</p><ol start="3" type="1"><li>附加阶段</li></ol><p>现在大部分的GPU都提供一个叫做提前深度测试(Early DepthTesting)的硬件特性。提前深度测试允许深度测试在片段着色器之前运行。只要我们清楚一个片段永远不会是可见的（它在其他物体之后），我们就能提前丢弃这个片段。</p><ol start="4" type="1"><li><p>使用 &gt;深度测试默认是禁用的，所以如果要启用深度测试的话，我们需要用GL_DEPTH_TEST选项来启用它：<code>cpp         glEnable(GL_DEPTH_TEST);</code></p><p>因为储存了深度值，所以每次循环前需要使用<code>GL_DEPTH_BUFFER_BIT</code>来清除深度缓冲,否则你会仍在使用上一次渲染迭代中的写入的深度值<code>cpp      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);</code></p><p>仅进行深度测试，不更新深度值。也就是希望使用一个只读的(Read-only)深度缓冲，则可以设置深度掩码为<code>false</code><code>cpp      glDepthMask(GL_FALSE);</code></p><p>设置深度测试的运算符 <code>深度测试函数glDepthFunc</code><code>cpp      glDepthFunc(GL_LESS);</code> |函数 | 描述 | |:- | :- ||GL_ALWAYS |永远通过深度测试| |GL_NEVER |永远不通过深度测试| |GL_LESS|在片段深度值小于缓冲的深度值时通过测试| |GL_EQUAL|在片段深度值等于缓冲区的深度值时通过测试| |GL_LEQUAL|在片段深度值小于等于缓冲区的深度值时通过测试| |GL_GREATER|在片段深度值大于缓冲区的深度值时通过测试||GL_NOTEQUAL|在片段深度值不等于缓冲区的深度值时通过测试| |GL_GEQUAL|在片段深度值大于等于缓冲区的深度值时通过测试|</p></li><li><p>深度值精度 &gt;深度缓冲包含了一个介于0.0和1.0之间的深度值，它将会与观察者视角所看见的场景中所有物体的z值进行比较。观察空间的z值可能是投影平截头体的近平面(Near)和远平面(Far)之间的任何值。我们需要一种方式来将这些观察空间的z值变换到[0,1]范围之间，其中的一种方式就是将它们线性变换到[0,1]范围之间。下面这个（线性）方程将z值变换到了0.0到1.0之间的深度值：</p><p><span class="math display">\[F_{depth} = \frac{z - near}{far - near}, 从近到远插值。\]</span></p><p>实际应用中不适用线性深度缓冲，而是使用 倒数，由于非线性方程与 1/z成正比，在1.0和2.0之间的z值将会变换至1.0到0.5之间的深度值，这就是一个float提供给我们的一半精度了，这在z值很小的情况下提供了非常大的精度。在50.0和100.0之间的z值将会只占2%的float精度，这正是我们所需要的。这样的一个考虑了远近距离的方程是这样的：</p><p><span class="math display">\[F_{depth} = \frac{\frac{1}{z} - \frac{1}{near}}{\frac{1}{far} -\frac{1}{near}}, 从近到远插值。\]</span></p></li><li><p>深度可视化&gt;内建gl_FragCoord向量的<code>z值</code>包含了那个特定片段的深度值&gt;颜色大部分都是黑色，因为深度值的范围是0.1的近平面到100的远平面，它离我们还是非常远的。结果就是，我们相对靠近近平面，所以会得到更低的（更暗的）深度值。</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>vec3<span class="op">(</span>gl_FragCoord<span class="op">.</span>z<span class="op">),</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><p>由于<code>gl_FragCoord.z</code>非线性的，所以转换为线性的，首先我们需要首先将深度值从[0,1]范围重新变换到[-1, 1]范围的标准化设备坐标（裁剪空间）</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> z <span class="op">=</span> depth <span class="op">*</span> <span class="fl">2.0</span> <span class="op">-</span> <span class="fl">1.0</span><span class="op">;</span></span></code></pre></div><p>接下来使用获取到的z值，应用逆变换来获取线性的深度值,这个方程是用投影矩阵推导得出的<code>cpp      float linearDepth = (2.0 * near * far) / (far + near - z * (far - near));</code></p></li><li><p>深度冲突 &gt;一个很常见的视觉错误会在两个平面或者三角形非常紧密地平行排列在一起时会发生，深度缓冲没有足够的精度来决定两个形状哪个在前面。结果就是这两个形状不断地在切换前后顺序，这会导致很奇怪的花纹。这个现象叫做深度冲突(Z-fighting)，因为它看起来像是这两个形状在争夺(Fight)谁该处于顶端。</p><ol type="1"><li>防止深度冲突<ul><li>第一个也是最重要的技巧是永远不要把多个物体摆得太靠近，以至于它们的一些三角形会重叠。</li><li>第二个技巧是尽可能将近平面设置远一些。在前面我们提到了精度在靠近近平面时是非常高的，所以如果我们将近平面远离观察者，我们将会对整个平截头体有着更大的精度。</li><li>另外一个很好的技巧是牺牲一些性能，使用更高精度的深度缓冲。大部分深度缓冲的精度都是24位的，但现在大部分的显卡都支持32位的深度缓冲，这将会极大地提高精度。所以，牺牲掉一些性能，你就能获得更高精度的深度测试，减少深度冲突。</li></ul></li></ol></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/03-mo-xing-jia-zai/3.mo-xing-model/"/>
      <url>/2022/08/10/opengl/03-mo-xing-jia-zai/3.mo-xing-model/</url>
      
        <content type="html"><![CDATA[<h2 id="模型model">模型model</h2><blockquote><p>模型model, 封装一个包含渲染的基础数据</p></blockquote><ol type="1"><li><p>模型</p><blockquote><p>拥有的功能：1.从模型文件加载、2.解析模型文件（顶点数据，贴图数据等）3.绘制功能的封装。</p></blockquote><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">class</span> Model </span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span><span class="op">:</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  函数   */</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            Model<span class="op">(</span><span class="dt">char</span> <span class="op">*</span>path<span class="op">)</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>                loadModel<span class="op">(</span>path<span class="op">);</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> Draw<span class="op">(</span>Shader shader<span class="op">);</span>   </span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span><span class="op">:</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  模型数据  */</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span>Mesh<span class="op">&gt;</span> meshes<span class="op">;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>            string directory<span class="op">;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  函数   */</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> loadModel<span class="op">(</span>string path<span class="op">);</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> processNode<span class="op">(</span>aiNode <span class="op">*</span>node<span class="op">,</span> <span class="at">const</span> aiScene <span class="op">*</span>scene<span class="op">);</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>            Mesh processMesh<span class="op">(</span>aiMesh <span class="op">*</span>mesh<span class="op">,</span> <span class="at">const</span> aiScene <span class="op">*</span>scene<span class="op">);</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> loadMaterialTextures<span class="op">(</span>aiMaterial <span class="op">*</span>mat<span class="op">,</span> aiTextureType type<span class="op">,</span> </span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>                                                 string typeName<span class="op">);</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span></code></pre></div><ol type="1"><li><p>从文件导入</p><blockquote><p>借助<code>assimp</code>插件</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;assimp/Importer.hpp&gt;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;assimp/scene.h&gt;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;assimp/postprocess.h&gt;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>Assimp<span class="op">::</span>Importer importer<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> aiScene <span class="op">*</span>scene <span class="op">=</span> importer<span class="op">.</span>ReadFile<span class="op">(</span>path<span class="op">,</span> aiProcess_Triangulate <span class="op">|</span> aiProcess_FlipUVs<span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>。。。</span></code></pre></div></blockquote></li><li><p>解析数据</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>glm<span class="op">::</span>vec3 vector<span class="op">;</span> </span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="co">//position</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>vector<span class="op">.</span>x <span class="op">=</span> mesh<span class="op">-&gt;</span>mVertices<span class="op">[</span>i<span class="op">].</span>x<span class="op">;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>vector<span class="op">.</span>y <span class="op">=</span> mesh<span class="op">-&gt;</span>mVertices<span class="op">[</span>i<span class="op">].</span>y<span class="op">;</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>vector<span class="op">.</span>z <span class="op">=</span> mesh<span class="op">-&gt;</span>mVertices<span class="op">[</span>i<span class="op">].</span>z<span class="op">;</span> </span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>vertex<span class="op">.</span>Position <span class="op">=</span> vector<span class="op">;</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="co">//normal</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>vector<span class="op">.</span>x <span class="op">=</span> mesh<span class="op">-&gt;</span>mNormals<span class="op">[</span>i<span class="op">].</span>x<span class="op">;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>vector<span class="op">.</span>y <span class="op">=</span> mesh<span class="op">-&gt;</span>mNormals<span class="op">[</span>i<span class="op">].</span>y<span class="op">;</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>vector<span class="op">.</span>z <span class="op">=</span> mesh<span class="op">-&gt;</span>mNormals<span class="op">[</span>i<span class="op">].</span>z<span class="op">;</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>vertex<span class="op">.</span>Normal <span class="op">=</span> vector<span class="op">;</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="co">//TextureCoord</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>mesh<span class="op">-&gt;</span>mTextureCoords<span class="op">[</span><span class="dv">0</span><span class="op">])</span> <span class="co">// 网格是否有纹理坐标？</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec2 vec<span class="op">;</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>x <span class="op">=</span> mesh<span class="op">-&gt;</span>mTextureCoords<span class="op">[</span><span class="dv">0</span><span class="op">][</span>i<span class="op">].</span>x<span class="op">;</span> </span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>    vec<span class="op">.</span>y <span class="op">=</span> mesh<span class="op">-&gt;</span>mTextureCoords<span class="op">[</span><span class="dv">0</span><span class="op">][</span>i<span class="op">].</span>y<span class="op">;</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>    vertex<span class="op">.</span>TexCoords <span class="op">=</span> vec<span class="op">;</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>    vertex<span class="op">.</span>TexCoords <span class="op">=</span> glm<span class="op">::</span>vec2<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co">// 。。。。</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="co">//三角形</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> mesh<span class="op">-&gt;</span>mNumFaces<span class="op">;</span> i<span class="op">++)</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    aiFace face <span class="op">=</span> mesh<span class="op">-&gt;</span>mFaces<span class="op">[</span>i<span class="op">];</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> j <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> j <span class="op">&lt;</span> face<span class="op">.</span>mNumIndices<span class="op">;</span> j<span class="op">++)</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>        indices<span class="op">.</span>push_back<span class="op">(</span>face<span class="op">.</span>mIndices<span class="op">[</span>j<span class="op">]);</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="co">//纹理</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span><span class="op">(</span>mesh<span class="op">-&gt;</span>mMaterialIndex <span class="op">&gt;=</span> <span class="dv">0</span><span class="op">)</span></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    aiMaterial <span class="op">*</span>material <span class="op">=</span> scene<span class="op">-&gt;</span>mMaterials<span class="op">[</span>mesh<span class="op">-&gt;</span>mMaterialIndex<span class="op">];</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>    vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> diffuseMaps <span class="op">=</span> loadMaterialTextures<span class="op">(</span>material<span class="op">,</span> </span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>                                        aiTextureType_DIFFUSE<span class="op">,</span> <span class="st">"texture_diffuse"</span><span class="op">);</span></span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>    textures<span class="op">.</span>insert<span class="op">(</span>textures<span class="op">.</span>end<span class="op">(),</span> diffuseMaps<span class="op">.</span>begin<span class="op">(),</span> diffuseMaps<span class="op">.</span>end<span class="op">());</span></span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>    vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> specularMaps <span class="op">=</span> loadMaterialTextures<span class="op">(</span>material<span class="op">,</span> </span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>                                        aiTextureType_SPECULAR<span class="op">,</span> <span class="st">"texture_specular"</span><span class="op">);</span></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>    textures<span class="op">.</span>insert<span class="op">(</span>textures<span class="op">.</span>end<span class="op">(),</span> specularMaps<span class="op">.</span>begin<span class="op">(),</span> specularMaps<span class="op">.</span>end<span class="op">());</span></span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li><p>绘制功能<code>cpp          void Draw(Shader shader)          {              for(unsigned int i = 0; i &lt; meshes.size(); i++)                  meshes[i].Draw(shader);          }</code></p></li></ol></li><li><p>纹理结构<code>cpp         struct Texture {             unsigned int id; //纹理id             string type;    //纹理类型         };</code></p></li><li><p>网格Mesh &gt; 准备好顶点和纹理结构，则可以准备mesh结构了</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">class</span> Mesh <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span><span class="op">:</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  网格数据  */</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span>Vertex<span class="op">&gt;</span> vertices<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">&gt;</span> indices<span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> textures<span class="op">;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  函数  */</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            Mesh<span class="op">(</span>vector<span class="op">&lt;</span>Vertex<span class="op">&gt;</span> vertices<span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">&gt;</span> indices<span class="op">,</span> vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> textures<span class="op">);</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> Draw<span class="op">(</span>Shader shader<span class="op">);</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span><span class="op">:</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  渲染数据  */</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>            <span class="dt">unsigned</span> <span class="dt">int</span> VAO<span class="op">,</span> VBO<span class="op">,</span> EBO<span class="op">;</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  函数  */</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> setupMesh<span class="op">();</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span>  </span></code></pre></div><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    Mesh<span class="op">(</span>vector<span class="op">&lt;</span>Vertex<span class="op">&gt;</span> vertices<span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">&gt;</span> indices<span class="op">,</span> vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> textures<span class="op">)</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">-&gt;</span>vertices <span class="op">=</span> vertices<span class="op">;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">-&gt;</span>indices <span class="op">=</span> indices<span class="op">;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">-&gt;</span>textures <span class="op">=</span> textures<span class="op">;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">//创建绑定设置渲染数据。</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>        setupMesh<span class="op">();</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setupMesh<span class="op">()</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">//bind</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">//set vertex datas</span></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> vertices<span class="op">.</span>size<span class="op">()</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">&amp;</span>vertices<span class="op">[</span><span class="dv">0</span><span class="op">],</span> GL_STATIC_DRAW<span class="op">);</span>  </span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">//set includies datas</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> EBO<span class="op">);</span></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> indices<span class="op">.</span>size<span class="op">()</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">),</span> </span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a>                     <span class="op">&amp;</span>indices<span class="op">[</span><span class="dv">0</span><span class="op">],</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb6-15"><a href="#cb6-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点位置</span></span><span id="cb6-16"><a href="#cb6-16" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span>   </span><span id="cb6-17"><a href="#cb6-17" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb6-18"><a href="#cb6-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点法线</span></span><span id="cb6-19"><a href="#cb6-19" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span>   </span><span id="cb6-20"><a href="#cb6-20" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span>offsetof<span class="op">(</span>Vertex<span class="op">,</span> Normal<span class="op">));</span></span><span id="cb6-21"><a href="#cb6-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点纹理坐标</span></span><span id="cb6-22"><a href="#cb6-22" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span>   </span><span id="cb6-23"><a href="#cb6-23" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span>offsetof<span class="op">(</span>Vertex<span class="op">,</span> TexCoords<span class="op">));</span></span><span id="cb6-24"><a href="#cb6-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">//结束绑定</span></span><span id="cb6-25"><a href="#cb6-25" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb6-26"><a href="#cb6-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>  </span></code></pre></div><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> Draw<span class="op">(</span>Shader shader<span class="op">)</span> </span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> diffuseNr <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> specularNr <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> textures<span class="op">.</span>size<span class="op">();</span> i<span class="op">++)</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>            glActiveTexture<span class="op">(</span>GL_TEXTURE0 <span class="op">+</span> i<span class="op">);</span> <span class="co">// 在绑定之前激活相应的纹理单元</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 获取纹理序号（diffuse_textureN 中的 N）</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a>            string number<span class="op">;</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a>            string name <span class="op">=</span> textures<span class="op">[</span>i<span class="op">].</span>type<span class="op">;</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>name <span class="op">==</span> <span class="st">"texture_diffuse"</span><span class="op">)</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>                number <span class="op">=</span> <span class="bu">std::</span>to_string<span class="op">(</span>diffuseNr<span class="op">++);</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="cf">if</span><span class="op">(</span>name <span class="op">==</span> <span class="st">"texture_specular"</span><span class="op">)</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>                number <span class="op">=</span> <span class="bu">std::</span>to_string<span class="op">(</span>specularNr<span class="op">++);</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>            shader<span class="op">.</span>setFloat<span class="op">((</span><span class="st">"material."</span> <span class="op">+</span> name <span class="op">+</span> number<span class="op">).</span>c_str<span class="op">(),</span> i<span class="op">);</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>            glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> textures<span class="op">[</span>i<span class="op">].</span>id<span class="op">);</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 绘制网格</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> indices<span class="op">.</span>size<span class="op">(),</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/03-mo-xing-jia-zai/2.wang-ge-mesh/"/>
      <url>/2022/08/10/opengl/03-mo-xing-jia-zai/2.wang-ge-mesh/</url>
      
        <content type="html"><![CDATA[<h2 id="网格mesh">网格Mesh</h2><blockquote><p>网格(Mesh)代表的是单个的可绘制实体，我们现在先来定义一个我们自己的网格类。一个网格应该至少需要一系列的顶点，每个顶点包含一个位置向量、一个法向量和一个纹理坐标向量。一个网格还应该包含用于索引绘制的索引以及纹理形式的材质数据（漫反射/镜面光贴图）。<code>这些结构是cpu的准备数据封装</code></p></blockquote><ol type="1"><li><p>顶点结构<code>cpp         struct Vertex {             glm::vec3 Position;             glm::vec3 Normal;             glm::vec2 TexCoords;         };</code></p></li><li><p>纹理结构<code>cpp         struct Texture {             unsigned int id; //纹理id             string type;    //纹理类型         };</code></p></li><li><p>网格Mesh &gt; 准备好顶点和纹理结构，则可以准备mesh结构了</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">class</span> Mesh <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="kw">public</span><span class="op">:</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  网格数据  */</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span>Vertex<span class="op">&gt;</span> vertices<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">&gt;</span> indices<span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>            vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> textures<span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  函数  */</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>            Mesh<span class="op">(</span>vector<span class="op">&lt;</span>Vertex<span class="op">&gt;</span> vertices<span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">&gt;</span> indices<span class="op">,</span> vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> textures<span class="op">);</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> Draw<span class="op">(</span>Shader shader<span class="op">);</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>        <span class="kw">private</span><span class="op">:</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  渲染数据  */</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>            <span class="dt">unsigned</span> <span class="dt">int</span> VAO<span class="op">,</span> VBO<span class="op">,</span> EBO<span class="op">;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>            <span class="co">/*  函数  */</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>            <span class="dt">void</span> setupMesh<span class="op">();</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span>  </span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    Mesh<span class="op">(</span>vector<span class="op">&lt;</span>Vertex<span class="op">&gt;</span> vertices<span class="op">,</span> vector<span class="op">&lt;</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">&gt;</span> indices<span class="op">,</span> vector<span class="op">&lt;</span>Texture<span class="op">&gt;</span> textures<span class="op">)</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">-&gt;</span>vertices <span class="op">=</span> vertices<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">-&gt;</span>indices <span class="op">=</span> indices<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="kw">this</span><span class="op">-&gt;</span>textures <span class="op">=</span> textures<span class="op">;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">//创建绑定设置渲染数据。</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        setupMesh<span class="op">();</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setupMesh<span class="op">()</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">//bind</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        <span class="co">//set vertex datas</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> vertices<span class="op">.</span>size<span class="op">()</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">&amp;</span>vertices<span class="op">[</span><span class="dv">0</span><span class="op">],</span> GL_STATIC_DRAW<span class="op">);</span>  </span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>        <span class="co">//set includies datas</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> EBO<span class="op">);</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> indices<span class="op">.</span>size<span class="op">()</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span><span class="op">),</span> </span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>                     <span class="op">&amp;</span>indices<span class="op">[</span><span class="dv">0</span><span class="op">],</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点位置</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span>   </span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点法线</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span>   </span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span>offsetof<span class="op">(</span>Vertex<span class="op">,</span> Normal<span class="op">));</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 顶点纹理坐标</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span>   </span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>Vertex<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span>offsetof<span class="op">(</span>Vertex<span class="op">,</span> TexCoords<span class="op">));</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>        <span class="co">//结束绑定</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span>  </span></code></pre></div><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> Draw<span class="op">(</span>Shader shader<span class="op">)</span> </span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> diffuseNr <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> specularNr <span class="op">=</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span><span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> textures<span class="op">.</span>size<span class="op">();</span> i<span class="op">++)</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>            glActiveTexture<span class="op">(</span>GL_TEXTURE0 <span class="op">+</span> i<span class="op">);</span> <span class="co">// 在绑定之前激活相应的纹理单元</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>            <span class="co">// 获取纹理序号（diffuse_textureN 中的 N）</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>            string number<span class="op">;</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a>            string name <span class="op">=</span> textures<span class="op">[</span>i<span class="op">].</span>type<span class="op">;</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span><span class="op">(</span>name <span class="op">==</span> <span class="st">"texture_diffuse"</span><span class="op">)</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>                number <span class="op">=</span> <span class="bu">std::</span>to_string<span class="op">(</span>diffuseNr<span class="op">++);</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span> <span class="cf">if</span><span class="op">(</span>name <span class="op">==</span> <span class="st">"texture_specular"</span><span class="op">)</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>                number <span class="op">=</span> <span class="bu">std::</span>to_string<span class="op">(</span>specularNr<span class="op">++);</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>            shader<span class="op">.</span>setFloat<span class="op">((</span><span class="st">"material."</span> <span class="op">+</span> name <span class="op">+</span> number<span class="op">).</span>c_str<span class="op">(),</span> i<span class="op">);</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>            glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> textures<span class="op">[</span>i<span class="op">].</span>id<span class="op">);</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 绘制网格</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a>        glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> indices<span class="op">.</span>size<span class="op">(),</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/03-mo-xing-jia-zai/1.assimp/"/>
      <url>/2022/08/10/opengl/03-mo-xing-jia-zai/1.assimp/</url>
      
        <content type="html"><![CDATA[<h2 id="assimp">Assimp</h2><p><a href="https://assimp.org/index.php">Assimp地址</a></p><blockquote><p>编译、用法、</p></blockquote><ol type="1"><li><p>从源码编译</p></li><li><p>用法介绍</p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/02-guang-zhao-bu-fen/6.duo-guang-yuan/"/>
      <url>/2022/08/10/opengl/02-guang-zhao-bu-fen/6.duo-guang-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="多光源">多光源</h2><blockquote><p>为了在场景中使用多个光源，我们希望将光照计算封装到GLSL函数中主要的分类:<code>平行光</code>，<code>点光源</code>,<code>聚光</code></p></blockquote><hr><ol type="1"><li><p>GLSL多光源封装 &gt; 平行光、点光源、聚光，<code>单独计算,累加和</code> ```cpp #version 330 core out vec4FragColor;</p><pre><code> struct Material {     sampler2D diffuse;     sampler2D specular;         //sampler2D emission;     float shininess; };  //平行光 struct DirLight {     vec3 direction;     vec3 ambient;     vec3 diffuse;     vec3 specular; }; //点光源 struct PointLight {     vec3 position;     float constant;     float linear;     float quadratic;     vec3 ambient;     vec3 diffuse;     vec3 specular; }; //聚光 struct SpotLight {     vec3 position;     vec3 direction;     float cutOff;     float outerCutOff;     float constant;     float linear;     float quadratic;     vec3 ambient;     vec3 diffuse;     vec3 specular;        }; //限制支持的点光源数量。 #define NR_POINT_LIGHTS 4 in vec3 FragPos;   in vec3 Normal;   in vec2 TexCoords; uniform vec3 viewPos; uniform DirLight dirLight; uniform PointLight pointLights[NR_POINT_LIGHTS]; uniform SpotLight spotLight; uniform Material material; // function prototypes vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir); vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir); vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir); void main() {    // properties     vec3 norm = normalize(Normal);     vec3 viewDir = normalize(viewPos - FragPos);     // == =====================================================     // Our lighting is set up in 3 phases: directional, point lights and an optional flashlight     // For each phase, a calculate function is defined that calculates the corresponding color     // per lamp. In the main() function we take all the calculated colors and sum them up for     // this fragment's final color.     // == =====================================================     // phase 1: directional lighting     vec3 result = CalcDirLight(dirLight, norm, viewDir);     // phase 2: point lights     for(int i = 0; i &lt; NR_POINT_LIGHTS; i++)         result += CalcPointLight(pointLights[i], norm, FragPos, viewDir);         // phase 3: spot light     result += CalcSpotLight(spotLight, norm, FragPos, viewDir);         FragColor = vec4(result, 1.0); }  // calculates the color when using a directional light. vec3 CalcDirLight(DirLight light, vec3 normal, vec3 viewDir) {     vec3 lightDir = normalize(-light.direction);     // diffuse shading     float diff = max(dot(normal, lightDir), 0.0);     // specular shading     vec3 reflectDir = reflect(-lightDir, normal);     float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);     // combine results     vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));     vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));     vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));     return (ambient + diffuse + specular); } // calculates the color when using a point light. vec3 CalcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {     vec3 lightDir = normalize(light.position - fragPos);     // diffuse shading     float diff = max(dot(normal, lightDir), 0.0);     // specular shading     vec3 reflectDir = reflect(-lightDir, normal);     float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);     // attenuation     float distance = length(light.position - fragPos);     float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));         // combine results     vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));     vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));     vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));     ambient *= attenuation;     diffuse *= attenuation;     specular *= attenuation;     return (ambient + diffuse + specular); } // calculates the color when using a spot light. vec3 CalcSpotLight(SpotLight light, vec3 normal, vec3 fragPos, vec3 viewDir) {     vec3 lightDir = normalize(light.position - fragPos);     // diffuse shading     float diff = max(dot(normal, lightDir), 0.0);     // specular shading     vec3 reflectDir = reflect(-lightDir, normal);     float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);     // attenuation     float distance = length(light.position - fragPos);     float attenuation = 1.0 / (light.constant + light.linear * distance + light.quadratic * (distance * distance));         // spotlight intensity     float theta = dot(lightDir, normalize(-light.direction));      float epsilon = light.cutOff - light.outerCutOff;     float intensity = clamp((theta - light.outerCutOff) / epsilon, 0.0, 1.0);     // combine results     vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));     vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));     vec3 specular = light.specular * spec * vec3(texture(material.specular, TexCoords));     ambient *= attenuation * intensity;     diffuse *= attenuation * intensity;     specular *= attenuation * intensity;     return (ambient + diffuse + specular); }</code></pre><p>```</p></li><li><p>完整代码</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glad/glad.h&gt;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;GLFW/glfw3.h&gt;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/glm.hpp&gt;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/gtc/type_ptr.hpp&gt;</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;shader_m.h&gt;</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;camera.h&gt;</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">);</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">);</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">);</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">);</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> loadTexture<span class="op">(</span><span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>path<span class="op">);</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="co">// settings</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="co">// camera</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>Camera camera<span class="op">(</span>glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">3.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastX <span class="op">=</span> wWidth <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastY <span class="op">=</span> wHeight <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> firstMouse <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a><span class="co">// timing</span></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> deltaTime <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastFrame <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a><span class="co">// lighting</span></span><span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>glm<span class="op">::</span>vec3 lightPos<span class="op">(</span><span class="fl">1.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span><span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 初始化</span></span><span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 基本设置</span></span><span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb2-52"><a href="#cb2-52" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb2-53"><a href="#cb2-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-54"><a href="#cb2-54" aria-hidden="true" tabindex="-1"></a><span class="pp">#if __APPLE__</span></span><span id="cb2-55"><a href="#cb2-55" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb2-56"><a href="#cb2-56" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span><span id="cb2-57"><a href="#cb2-57" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-58"><a href="#cb2-58" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 创建窗口</span></span><span id="cb2-59"><a href="#cb2-59" aria-hidden="true" tabindex="-1"></a>    GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb2-60"><a href="#cb2-60" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb2-61"><a href="#cb2-61" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-62"><a href="#cb2-62" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb2-63"><a href="#cb2-63" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb2-64"><a href="#cb2-64" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb2-65"><a href="#cb2-65" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-66"><a href="#cb2-66" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-67"><a href="#cb2-67" aria-hidden="true" tabindex="-1"></a>    <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb2-68"><a href="#cb2-68" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-69"><a href="#cb2-69" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-70"><a href="#cb2-70" aria-hidden="true" tabindex="-1"></a>    <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb2-71"><a href="#cb2-71" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb2-72"><a href="#cb2-72" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-73"><a href="#cb2-73" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-74"><a href="#cb2-74" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb2-75"><a href="#cb2-75" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb2-76"><a href="#cb2-76" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-77"><a href="#cb2-77" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-78"><a href="#cb2-78" aria-hidden="true" tabindex="-1"></a>    <span class="co">//6. 设置视口</span></span><span id="cb2-79"><a href="#cb2-79" aria-hidden="true" tabindex="-1"></a>    glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb2-80"><a href="#cb2-80" aria-hidden="true" tabindex="-1"></a>    <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb2-81"><a href="#cb2-81" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-82"><a href="#cb2-82" aria-hidden="true" tabindex="-1"></a>    glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb2-83"><a href="#cb2-83" aria-hidden="true" tabindex="-1"></a>    glfwSetCursorPosCallback<span class="op">(</span>window<span class="op">,</span> mouse_callback<span class="op">);</span></span><span id="cb2-84"><a href="#cb2-84" aria-hidden="true" tabindex="-1"></a>    glfwSetScrollCallback<span class="op">(</span>window<span class="op">,</span> scroll_callback<span class="op">);</span></span><span id="cb2-85"><a href="#cb2-85" aria-hidden="true" tabindex="-1"></a>    <span class="co">// build and compile our shader zprogram</span></span><span id="cb2-86"><a href="#cb2-86" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------</span></span><span id="cb2-87"><a href="#cb2-87" aria-hidden="true" tabindex="-1"></a>    Shader lightingShader<span class="op">(</span><span class="st">"res/shaders/lighting_multi.vs"</span><span class="op">,</span> <span class="st">"res/shaders/lighting_multi.fs"</span><span class="op">);</span></span><span id="cb2-88"><a href="#cb2-88" aria-hidden="true" tabindex="-1"></a>    Shader textureShader<span class="op">(</span><span class="st">"res/shaders/texture.vs"</span><span class="op">,</span> <span class="st">"res/shaders/texture1.fs"</span><span class="op">);</span></span><span id="cb2-89"><a href="#cb2-89" aria-hidden="true" tabindex="-1"></a>    Shader lightCubeShader<span class="op">(</span><span class="st">"res/shaders/cube.vs"</span><span class="op">,</span> <span class="st">"res/shaders/white.fs"</span><span class="op">);</span></span><span id="cb2-90"><a href="#cb2-90" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-91"><a href="#cb2-91" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-92"><a href="#cb2-92" aria-hidden="true" tabindex="-1"></a>         <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-93"><a href="#cb2-93" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-94"><a href="#cb2-94" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-95"><a href="#cb2-95" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-96"><a href="#cb2-96" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-97"><a href="#cb2-97" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-98"><a href="#cb2-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-99"><a href="#cb2-99" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-100"><a href="#cb2-100" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-101"><a href="#cb2-101" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-102"><a href="#cb2-102" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-103"><a href="#cb2-103" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-104"><a href="#cb2-104" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-105"><a href="#cb2-105" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-106"><a href="#cb2-106" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-107"><a href="#cb2-107" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-108"><a href="#cb2-108" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-109"><a href="#cb2-109" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-110"><a href="#cb2-110" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-111"><a href="#cb2-111" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-112"><a href="#cb2-112" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-113"><a href="#cb2-113" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-114"><a href="#cb2-114" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-115"><a href="#cb2-115" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-116"><a href="#cb2-116" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-117"><a href="#cb2-117" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-118"><a href="#cb2-118" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-119"><a href="#cb2-119" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-120"><a href="#cb2-120" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-121"><a href="#cb2-121" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-122"><a href="#cb2-122" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-123"><a href="#cb2-123" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-124"><a href="#cb2-124" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-125"><a href="#cb2-125" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-126"><a href="#cb2-126" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-127"><a href="#cb2-127" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-128"><a href="#cb2-128" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-129"><a href="#cb2-129" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-130"><a href="#cb2-130" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-131"><a href="#cb2-131" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb2-132"><a href="#cb2-132" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span></span><span id="cb2-133"><a href="#cb2-133" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb2-134"><a href="#cb2-134" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-135"><a href="#cb2-135" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> cubeVAO<span class="op">;</span></span><span id="cb2-136"><a href="#cb2-136" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb2-137"><a href="#cb2-137" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb2-138"><a href="#cb2-138" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-139"><a href="#cb2-139" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb2-140"><a href="#cb2-140" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb2-141"><a href="#cb2-141" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-142"><a href="#cb2-142" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb2-143"><a href="#cb2-143" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-144"><a href="#cb2-144" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-145"><a href="#cb2-145" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb2-146"><a href="#cb2-146" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb2-147"><a href="#cb2-147" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb2-148"><a href="#cb2-148" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb2-149"><a href="#cb2-149" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-150"><a href="#cb2-150" aria-hidden="true" tabindex="-1"></a>    <span class="co">// second, configure the light's VAO (VBO stays the same; the vertices are the same for the light object which is also a 3D cube)</span></span><span id="cb2-151"><a href="#cb2-151" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> lightCubeVAO<span class="op">;</span></span><span id="cb2-152"><a href="#cb2-152" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb2-153"><a href="#cb2-153" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb2-154"><a href="#cb2-154" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-155"><a href="#cb2-155" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb2-156"><a href="#cb2-156" aria-hidden="true" tabindex="-1"></a>    <span class="co">// note that we update the lamp's position attribute's stride to reflect the updated buffer data</span></span><span id="cb2-157"><a href="#cb2-157" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-158"><a href="#cb2-158" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-159"><a href="#cb2-159" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-160"><a href="#cb2-160" aria-hidden="true" tabindex="-1"></a>    <span class="co">// load textures (we now use a utility function to keep the code more organized)</span></span><span id="cb2-161"><a href="#cb2-161" aria-hidden="true" tabindex="-1"></a>    <span class="co">// -----------------------------------------------------------------------------</span></span><span id="cb2-162"><a href="#cb2-162" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> diffuseMap <span class="op">=</span> loadTexture<span class="op">(</span><span class="st">"./res/textures/container2.png"</span><span class="op">);</span></span><span id="cb2-163"><a href="#cb2-163" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> specularMap <span class="op">=</span> loadTexture<span class="op">(</span><span class="st">"./res/textures/container2_specular.png"</span><span class="op">);</span></span><span id="cb2-164"><a href="#cb2-164" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-165"><a href="#cb2-165" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-166"><a href="#cb2-166" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> verticesMMap<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-167"><a href="#cb2-167" aria-hidden="true" tabindex="-1"></a>        <span class="co">//位置                    // 基础颜色          // 贴图uv</span></span><span id="cb2-168"><a href="#cb2-168" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb2-169"><a href="#cb2-169" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb2-170"><a href="#cb2-170" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb2-171"><a href="#cb2-171" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb2-172"><a href="#cb2-172" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb2-173"><a href="#cb2-173" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-174"><a href="#cb2-174" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> indicesMMap<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-175"><a href="#cb2-175" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb2-176"><a href="#cb2-176" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb2-177"><a href="#cb2-177" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb2-178"><a href="#cb2-178" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-179"><a href="#cb2-179" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> mmapVBO<span class="op">,</span> mmapVAO<span class="op">,</span> mmapEBO<span class="op">;</span></span><span id="cb2-180"><a href="#cb2-180" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVAO<span class="op">);</span></span><span id="cb2-181"><a href="#cb2-181" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>mmapVAO<span class="op">);</span></span><span id="cb2-182"><a href="#cb2-182" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-183"><a href="#cb2-183" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVBO<span class="op">);</span></span><span id="cb2-184"><a href="#cb2-184" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> mmapVBO<span class="op">);</span></span><span id="cb2-185"><a href="#cb2-185" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>verticesMMap<span class="op">),</span> verticesMMap<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb2-186"><a href="#cb2-186" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-187"><a href="#cb2-187" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapEBO<span class="op">);</span></span><span id="cb2-188"><a href="#cb2-188" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> mmapEBO<span class="op">);</span></span><span id="cb2-189"><a href="#cb2-189" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indicesMMap<span class="op">),</span> indicesMMap<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb2-190"><a href="#cb2-190" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-191"><a href="#cb2-191" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb2-192"><a href="#cb2-192" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-193"><a href="#cb2-193" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-194"><a href="#cb2-194" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb2-195"><a href="#cb2-195" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb2-196"><a href="#cb2-196" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb2-197"><a href="#cb2-197" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb2-198"><a href="#cb2-198" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb2-199"><a href="#cb2-199" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb2-200"><a href="#cb2-200" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-201"><a href="#cb2-201" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-202"><a href="#cb2-202" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-203"><a href="#cb2-203" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-204"><a href="#cb2-204" aria-hidden="true" tabindex="-1"></a>    <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb2-205"><a href="#cb2-205" aria-hidden="true" tabindex="-1"></a>    textureShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-206"><a href="#cb2-206" aria-hidden="true" tabindex="-1"></a>    textureShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-207"><a href="#cb2-207" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-208"><a href="#cb2-208" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-209"><a href="#cb2-209" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"material.diffuse"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-210"><a href="#cb2-210" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"material.specular"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb2-211"><a href="#cb2-211" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-212"><a href="#cb2-212" aria-hidden="true" tabindex="-1"></a>    glEnable<span class="op">(</span>GL_DEPTH_TEST<span class="op">);</span></span><span id="cb2-213"><a href="#cb2-213" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-214"><a href="#cb2-214" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec3 cubePositions<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-215"><a href="#cb2-215" aria-hidden="true" tabindex="-1"></a>         glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-216"><a href="#cb2-216" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">2.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">5.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">15.0</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-217"><a href="#cb2-217" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(-</span><span class="fl">1.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.2</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.5</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-218"><a href="#cb2-218" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(-</span><span class="fl">3.8</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">12.3</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-219"><a href="#cb2-219" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">2.4</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.4</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">3.5</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-220"><a href="#cb2-220" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(-</span><span class="fl">1.7</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">3.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">7.5</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-221"><a href="#cb2-221" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">1.3</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.5</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-222"><a href="#cb2-222" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">1.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">2.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.5</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-223"><a href="#cb2-223" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">1.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.5</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-224"><a href="#cb2-224" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(-</span><span class="fl">1.3</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.5</span><span class="bu">f</span><span class="op">)</span></span><span id="cb2-225"><a href="#cb2-225" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb2-226"><a href="#cb2-226" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-227"><a href="#cb2-227" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec3 pointLightPositions<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-228"><a href="#cb2-228" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.7</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">2.0</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-229"><a href="#cb2-229" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">2.3</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">3.3</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">4.0</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-230"><a href="#cb2-230" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(-</span><span class="fl">4.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">2.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">12.0</span><span class="bu">f</span><span class="op">),</span></span><span id="cb2-231"><a href="#cb2-231" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">3.0</span><span class="bu">f</span><span class="op">)</span></span><span id="cb2-232"><a href="#cb2-232" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb2-233"><a href="#cb2-233" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-234"><a href="#cb2-234" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb2-235"><a href="#cb2-235" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-236"><a href="#cb2-236" aria-hidden="true" tabindex="-1"></a>        <span class="co">// per-frame time logic</span></span><span id="cb2-237"><a href="#cb2-237" aria-hidden="true" tabindex="-1"></a>        <span class="co">// --------------------</span></span><span id="cb2-238"><a href="#cb2-238" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> currentFrame <span class="op">=</span> glfwGetTime<span class="op">();</span></span><span id="cb2-239"><a href="#cb2-239" aria-hidden="true" tabindex="-1"></a>        deltaTime <span class="op">=</span> currentFrame <span class="op">-</span> lastFrame<span class="op">;</span></span><span id="cb2-240"><a href="#cb2-240" aria-hidden="true" tabindex="-1"></a>        lastFrame <span class="op">=</span> currentFrame<span class="op">;</span></span><span id="cb2-241"><a href="#cb2-241" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-242"><a href="#cb2-242" aria-hidden="true" tabindex="-1"></a>        <span class="co">// input</span></span><span id="cb2-243"><a href="#cb2-243" aria-hidden="true" tabindex="-1"></a>        <span class="co">// -----</span></span><span id="cb2-244"><a href="#cb2-244" aria-hidden="true" tabindex="-1"></a>        processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-245"><a href="#cb2-245" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-246"><a href="#cb2-246" aria-hidden="true" tabindex="-1"></a>        glClearColor<span class="op">(</span><span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-247"><a href="#cb2-247" aria-hidden="true" tabindex="-1"></a>        glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT <span class="op">|</span> GL_DEPTH_BUFFER_BIT<span class="op">);</span></span><span id="cb2-248"><a href="#cb2-248" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-249"><a href="#cb2-249" aria-hidden="true" tabindex="-1"></a>        <span class="co">// be sure to activate shader when setting uniforms/drawing objects</span></span><span id="cb2-250"><a href="#cb2-250" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-251"><a href="#cb2-251" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"viewPos"</span><span class="op">,</span> camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb2-252"><a href="#cb2-252" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"material.shininess"</span><span class="op">,</span> <span class="fl">32.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-253"><a href="#cb2-253" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-254"><a href="#cb2-254" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*</span></span><span id="cb2-255"><a href="#cb2-255" aria-hidden="true" tabindex="-1"></a><span class="co">           Here we set all the uniforms for the 5/6 types of lights we have. We have to set them manually and index</span></span><span id="cb2-256"><a href="#cb2-256" aria-hidden="true" tabindex="-1"></a><span class="co">           the proper PointLight struct in the array to set each uniform variable. This can be done more code-friendly</span></span><span id="cb2-257"><a href="#cb2-257" aria-hidden="true" tabindex="-1"></a><span class="co">           by defining light types as classes and set their values in there, or by using a more efficient uniform approach</span></span><span id="cb2-258"><a href="#cb2-258" aria-hidden="true" tabindex="-1"></a><span class="co">           by using 'Uniform buffer objects', but that is something we'll discuss in the 'Advanced GLSL' tutorial.</span></span><span id="cb2-259"><a href="#cb2-259" aria-hidden="true" tabindex="-1"></a><span class="co">        */</span></span><span id="cb2-260"><a href="#cb2-260" aria-hidden="true" tabindex="-1"></a>        <span class="co">// directional light</span></span><span id="cb2-261"><a href="#cb2-261" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"dirLight.direction"</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.3</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-262"><a href="#cb2-262" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"dirLight.ambient"</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-263"><a href="#cb2-263" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"dirLight.diffuse"</span><span class="op">,</span> <span class="fl">0.4</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.4</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.4</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-264"><a href="#cb2-264" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"dirLight.specular"</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-265"><a href="#cb2-265" aria-hidden="true" tabindex="-1"></a>        <span class="co">// point light 1</span></span><span id="cb2-266"><a href="#cb2-266" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[0].position"</span><span class="op">,</span> pointLightPositions<span class="op">[</span><span class="dv">0</span><span class="op">]);</span></span><span id="cb2-267"><a href="#cb2-267" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[0].ambient"</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-268"><a href="#cb2-268" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[0].diffuse"</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-269"><a href="#cb2-269" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[0].specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-270"><a href="#cb2-270" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[0].constant"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-271"><a href="#cb2-271" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[0].linear"</span><span class="op">,</span> <span class="fl">0.09</span><span class="op">);</span></span><span id="cb2-272"><a href="#cb2-272" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[0].quadratic"</span><span class="op">,</span> <span class="fl">0.032</span><span class="op">);</span></span><span id="cb2-273"><a href="#cb2-273" aria-hidden="true" tabindex="-1"></a>        <span class="co">// point light 2</span></span><span id="cb2-274"><a href="#cb2-274" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[1].position"</span><span class="op">,</span> pointLightPositions<span class="op">[</span><span class="dv">1</span><span class="op">]);</span></span><span id="cb2-275"><a href="#cb2-275" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[1].ambient"</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-276"><a href="#cb2-276" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[1].diffuse"</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-277"><a href="#cb2-277" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[1].specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-278"><a href="#cb2-278" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[1].constant"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-279"><a href="#cb2-279" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[1].linear"</span><span class="op">,</span> <span class="fl">0.09</span><span class="op">);</span></span><span id="cb2-280"><a href="#cb2-280" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[1].quadratic"</span><span class="op">,</span> <span class="fl">0.032</span><span class="op">);</span></span><span id="cb2-281"><a href="#cb2-281" aria-hidden="true" tabindex="-1"></a>        <span class="co">// point light 3</span></span><span id="cb2-282"><a href="#cb2-282" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[2].position"</span><span class="op">,</span> pointLightPositions<span class="op">[</span><span class="dv">2</span><span class="op">]);</span></span><span id="cb2-283"><a href="#cb2-283" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[2].ambient"</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-284"><a href="#cb2-284" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[2].diffuse"</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-285"><a href="#cb2-285" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[2].specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-286"><a href="#cb2-286" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[2].constant"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-287"><a href="#cb2-287" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[2].linear"</span><span class="op">,</span> <span class="fl">0.09</span><span class="op">);</span></span><span id="cb2-288"><a href="#cb2-288" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[2].quadratic"</span><span class="op">,</span> <span class="fl">0.032</span><span class="op">);</span></span><span id="cb2-289"><a href="#cb2-289" aria-hidden="true" tabindex="-1"></a>        <span class="co">// point light 4</span></span><span id="cb2-290"><a href="#cb2-290" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[3].position"</span><span class="op">,</span> pointLightPositions<span class="op">[</span><span class="dv">3</span><span class="op">]);</span></span><span id="cb2-291"><a href="#cb2-291" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[3].ambient"</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-292"><a href="#cb2-292" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[3].diffuse"</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.8</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-293"><a href="#cb2-293" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"pointLights[3].specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-294"><a href="#cb2-294" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[3].constant"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-295"><a href="#cb2-295" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[3].linear"</span><span class="op">,</span> <span class="fl">0.09</span><span class="op">);</span></span><span id="cb2-296"><a href="#cb2-296" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"pointLights[3].quadratic"</span><span class="op">,</span> <span class="fl">0.032</span><span class="op">);</span></span><span id="cb2-297"><a href="#cb2-297" aria-hidden="true" tabindex="-1"></a>        <span class="co">// spotLight</span></span><span id="cb2-298"><a href="#cb2-298" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"spotLight.position"</span><span class="op">,</span> camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb2-299"><a href="#cb2-299" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"spotLight.direction"</span><span class="op">,</span> camera<span class="op">.</span>Front<span class="op">);</span></span><span id="cb2-300"><a href="#cb2-300" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"spotLight.ambient"</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-301"><a href="#cb2-301" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"spotLight.diffuse"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-302"><a href="#cb2-302" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"spotLight.specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-303"><a href="#cb2-303" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"spotLight.constant"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-304"><a href="#cb2-304" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"spotLight.linear"</span><span class="op">,</span> <span class="fl">0.09</span><span class="op">);</span></span><span id="cb2-305"><a href="#cb2-305" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"spotLight.quadratic"</span><span class="op">,</span> <span class="fl">0.032</span><span class="op">);</span></span><span id="cb2-306"><a href="#cb2-306" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"spotLight.cutOff"</span><span class="op">,</span> glm<span class="op">::</span>cos<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span><span class="fl">12.5</span><span class="bu">f</span><span class="op">)));</span></span><span id="cb2-307"><a href="#cb2-307" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"spotLight.outerCutOff"</span><span class="op">,</span> glm<span class="op">::</span>cos<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span><span class="fl">15.0</span><span class="bu">f</span><span class="op">)));</span></span><span id="cb2-308"><a href="#cb2-308" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-309"><a href="#cb2-309" aria-hidden="true" tabindex="-1"></a>        <span class="co">// view/projection transformations</span></span><span id="cb2-310"><a href="#cb2-310" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>camera<span class="op">.</span>Zoom<span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wWidth <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wHeight<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-311"><a href="#cb2-311" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 view <span class="op">=</span> camera<span class="op">.</span>GetViewMatrix<span class="op">();</span></span><span id="cb2-312"><a href="#cb2-312" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb2-313"><a href="#cb2-313" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb2-314"><a href="#cb2-314" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-315"><a href="#cb2-315" aria-hidden="true" tabindex="-1"></a>        <span class="co">// world transformation</span></span><span id="cb2-316"><a href="#cb2-316" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-317"><a href="#cb2-317" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb2-318"><a href="#cb2-318" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-319"><a href="#cb2-319" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind diffuse map</span></span><span id="cb2-320"><a href="#cb2-320" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb2-321"><a href="#cb2-321" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> diffuseMap<span class="op">);</span></span><span id="cb2-322"><a href="#cb2-322" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind specular map</span></span><span id="cb2-323"><a href="#cb2-323" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb2-324"><a href="#cb2-324" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> specularMap<span class="op">);</span></span><span id="cb2-325"><a href="#cb2-325" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-326"><a href="#cb2-326" aria-hidden="true" tabindex="-1"></a>        <span class="co">// render containers</span></span><span id="cb2-327"><a href="#cb2-327" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb2-328"><a href="#cb2-328" aria-hidden="true" tabindex="-1"></a>        <span class="cf">for</span> <span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> <span class="dv">10</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb2-329"><a href="#cb2-329" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-330"><a href="#cb2-330" aria-hidden="true" tabindex="-1"></a>            <span class="co">// calculate the model matrix for each object and pass it to shader before drawing</span></span><span id="cb2-331"><a href="#cb2-331" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-332"><a href="#cb2-332" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> cubePositions<span class="op">[</span>i<span class="op">]);</span></span><span id="cb2-333"><a href="#cb2-333" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> angle <span class="op">=</span> <span class="fl">20.0</span><span class="bu">f</span> <span class="op">*</span> i<span class="op">;</span></span><span id="cb2-334"><a href="#cb2-334" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>rotate<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>radians<span class="op">(</span>angle<span class="op">),</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">));</span></span><span id="cb2-335"><a href="#cb2-335" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb2-336"><a href="#cb2-336" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-337"><a href="#cb2-337" aria-hidden="true" tabindex="-1"></a>            glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb2-338"><a href="#cb2-338" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-339"><a href="#cb2-339" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-340"><a href="#cb2-340" aria-hidden="true" tabindex="-1"></a>        <span class="co">// also draw the lamp object</span></span><span id="cb2-341"><a href="#cb2-341" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-342"><a href="#cb2-342" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb2-343"><a href="#cb2-343" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb2-344"><a href="#cb2-344" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-345"><a href="#cb2-345" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb2-346"><a href="#cb2-346" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>scale<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">));</span> <span class="co">// a smaller cube</span></span><span id="cb2-347"><a href="#cb2-347" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb2-348"><a href="#cb2-348" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-349"><a href="#cb2-349" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb2-350"><a href="#cb2-350" aria-hidden="true" tabindex="-1"></a>        glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb2-351"><a href="#cb2-351" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-352"><a href="#cb2-352" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind Texture1</span></span><span id="cb2-353"><a href="#cb2-353" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*glActiveTexture(GL_TEXTURE0);</span></span><span id="cb2-354"><a href="#cb2-354" aria-hidden="true" tabindex="-1"></a><span class="co">        glBindTexture(GL_TEXTURE_2D, diffuseMap);*/</span></span><span id="cb2-355"><a href="#cb2-355" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-356"><a href="#cb2-356" aria-hidden="true" tabindex="-1"></a>        textureShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-357"><a href="#cb2-357" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>mmapVAO<span class="op">);</span></span><span id="cb2-358"><a href="#cb2-358" aria-hidden="true" tabindex="-1"></a>        glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-359"><a href="#cb2-359" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-360"><a href="#cb2-360" aria-hidden="true" tabindex="-1"></a>        glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-361"><a href="#cb2-361" aria-hidden="true" tabindex="-1"></a>        glfwPollEvents<span class="op">();</span></span><span id="cb2-362"><a href="#cb2-362" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-363"><a href="#cb2-363" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-364"><a href="#cb2-364" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb2-365"><a href="#cb2-365" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb2-366"><a href="#cb2-366" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb2-367"><a href="#cb2-367" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-368"><a href="#cb2-368" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVAO<span class="op">);</span></span><span id="cb2-369"><a href="#cb2-369" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVBO<span class="op">);</span></span><span id="cb2-370"><a href="#cb2-370" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapEBO<span class="op">);</span></span><span id="cb2-371"><a href="#cb2-371" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-372"><a href="#cb2-372" aria-hidden="true" tabindex="-1"></a>TERMINATE<span class="op">:</span></span><span id="cb2-373"><a href="#cb2-373" aria-hidden="true" tabindex="-1"></a>    glfwTerminate<span class="op">();</span></span><span id="cb2-374"><a href="#cb2-374" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb2-375"><a href="#cb2-375" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-376"><a href="#cb2-376" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-377"><a href="#cb2-377" aria-hidden="true" tabindex="-1"></a><span class="co">// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly</span></span><span id="cb2-378"><a href="#cb2-378" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------------------------------------------------------------</span></span><span id="cb2-379"><a href="#cb2-379" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb2-380"><a href="#cb2-380" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-381"><a href="#cb2-381" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb2-382"><a href="#cb2-382" aria-hidden="true" tabindex="-1"></a>        glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb2-383"><a href="#cb2-383" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-384"><a href="#cb2-384" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_W<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb2-385"><a href="#cb2-385" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>FORWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb2-386"><a href="#cb2-386" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_S<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb2-387"><a href="#cb2-387" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>BACKWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb2-388"><a href="#cb2-388" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_A<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb2-389"><a href="#cb2-389" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>LEFT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb2-390"><a href="#cb2-390" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_D<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb2-391"><a href="#cb2-391" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>RIGHT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb2-392"><a href="#cb2-392" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-393"><a href="#cb2-393" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-394"><a href="#cb2-394" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the window size changed (by OS or user resize) this callback function executes</span></span><span id="cb2-395"><a href="#cb2-395" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------------------------------------------------</span></span><span id="cb2-396"><a href="#cb2-396" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb2-397"><a href="#cb2-397" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-398"><a href="#cb2-398" aria-hidden="true" tabindex="-1"></a>    <span class="co">// make sure the viewport matches the new window dimensions; note that width and </span></span><span id="cb2-399"><a href="#cb2-399" aria-hidden="true" tabindex="-1"></a>    <span class="co">// height will be significantly larger than specified on retina displays.</span></span><span id="cb2-400"><a href="#cb2-400" aria-hidden="true" tabindex="-1"></a>    glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb2-401"><a href="#cb2-401" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-402"><a href="#cb2-402" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-403"><a href="#cb2-403" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the mouse moves, this callback is called</span></span><span id="cb2-404"><a href="#cb2-404" aria-hidden="true" tabindex="-1"></a><span class="co">// -------------------------------------------------------</span></span><span id="cb2-405"><a href="#cb2-405" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">)</span></span><span id="cb2-406"><a href="#cb2-406" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-407"><a href="#cb2-407" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>firstMouse<span class="op">)</span></span><span id="cb2-408"><a href="#cb2-408" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-409"><a href="#cb2-409" aria-hidden="true" tabindex="-1"></a>        lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb2-410"><a href="#cb2-410" aria-hidden="true" tabindex="-1"></a>        lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb2-411"><a href="#cb2-411" aria-hidden="true" tabindex="-1"></a>        firstMouse <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb2-412"><a href="#cb2-412" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-413"><a href="#cb2-413" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-414"><a href="#cb2-414" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> xoffset <span class="op">=</span> xpos <span class="op">-</span> lastX<span class="op">;</span></span><span id="cb2-415"><a href="#cb2-415" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> yoffset <span class="op">=</span> lastY <span class="op">-</span> ypos<span class="op">;</span> <span class="co">// reversed since y-coordinates go from bottom to top</span></span><span id="cb2-416"><a href="#cb2-416" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-417"><a href="#cb2-417" aria-hidden="true" tabindex="-1"></a>    lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb2-418"><a href="#cb2-418" aria-hidden="true" tabindex="-1"></a>    lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb2-419"><a href="#cb2-419" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-420"><a href="#cb2-420" aria-hidden="true" tabindex="-1"></a>    camera<span class="op">.</span>ProcessMouseMovement<span class="op">(</span>xoffset<span class="op">,</span> yoffset<span class="op">);</span></span><span id="cb2-421"><a href="#cb2-421" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-422"><a href="#cb2-422" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-423"><a href="#cb2-423" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the mouse scroll wheel scrolls, this callback is called</span></span><span id="cb2-424"><a href="#cb2-424" aria-hidden="true" tabindex="-1"></a><span class="co">// ----------------------------------------------------------------------</span></span><span id="cb2-425"><a href="#cb2-425" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">)</span></span><span id="cb2-426"><a href="#cb2-426" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-427"><a href="#cb2-427" aria-hidden="true" tabindex="-1"></a>    camera<span class="op">.</span>ProcessMouseScroll<span class="op">(</span>yoffset<span class="op">);</span></span><span id="cb2-428"><a href="#cb2-428" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-429"><a href="#cb2-429" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-430"><a href="#cb2-430" aria-hidden="true" tabindex="-1"></a><span class="co">// utility function for loading a 2D texture from file</span></span><span id="cb2-431"><a href="#cb2-431" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------</span></span><span id="cb2-432"><a href="#cb2-432" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> loadTexture<span class="op">(</span><span class="dt">char</span> <span class="at">const</span> <span class="op">*</span> path<span class="op">)</span></span><span id="cb2-433"><a href="#cb2-433" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-434"><a href="#cb2-434" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> textureID<span class="op">;</span></span><span id="cb2-435"><a href="#cb2-435" aria-hidden="true" tabindex="-1"></a>    glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>textureID<span class="op">);</span></span><span id="cb2-436"><a href="#cb2-436" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-437"><a href="#cb2-437" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrComponents<span class="op">;</span></span><span id="cb2-438"><a href="#cb2-438" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">char</span> <span class="op">*</span>data <span class="op">=</span> stbi_load<span class="op">(</span>path<span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrComponents<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-439"><a href="#cb2-439" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb2-440"><a href="#cb2-440" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-441"><a href="#cb2-441" aria-hidden="true" tabindex="-1"></a>        GLenum format<span class="op">;</span></span><span id="cb2-442"><a href="#cb2-442" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">1</span><span class="op">)</span></span><span id="cb2-443"><a href="#cb2-443" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RED<span class="op">;</span></span><span id="cb2-444"><a href="#cb2-444" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">3</span><span class="op">)</span></span><span id="cb2-445"><a href="#cb2-445" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RGB<span class="op">;</span></span><span id="cb2-446"><a href="#cb2-446" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">4</span><span class="op">)</span></span><span id="cb2-447"><a href="#cb2-447" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RGBA<span class="op">;</span></span><span id="cb2-448"><a href="#cb2-448" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-449"><a href="#cb2-449" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> textureID<span class="op">);</span></span><span id="cb2-450"><a href="#cb2-450" aria-hidden="true" tabindex="-1"></a>        glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> format<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> format<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb2-451"><a href="#cb2-451" aria-hidden="true" tabindex="-1"></a>        glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb2-452"><a href="#cb2-452" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-453"><a href="#cb2-453" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb2-454"><a href="#cb2-454" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb2-455"><a href="#cb2-455" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR_MIPMAP_LINEAR<span class="op">);</span></span><span id="cb2-456"><a href="#cb2-456" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb2-457"><a href="#cb2-457" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-458"><a href="#cb2-458" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb2-459"><a href="#cb2-459" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-460"><a href="#cb2-460" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span><span id="cb2-461"><a href="#cb2-461" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-462"><a href="#cb2-462" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Texture failed to load at path: "</span> <span class="op">&lt;&lt;</span> path <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-463"><a href="#cb2-463" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb2-464"><a href="#cb2-464" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-465"><a href="#cb2-465" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-466"><a href="#cb2-466" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> textureID<span class="op">;</span></span><span id="cb2-467"><a href="#cb2-467" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/02-guang-zhao-bu-fen/5.guang-yuan/"/>
      <url>/2022/08/10/opengl/02-guang-zhao-bu-fen/5.guang-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="光源投光物">光源(投光物)</h2><blockquote><p>将光投射(Cast)到物体的光源叫做投光物(Light Caster)。 主要的分类:<code>平行光</code>，<code>点光源</code>,<code>聚光</code></p></blockquote><hr><ol type="1"><li><p>平行光 &gt;当一个光源处于很远的地方时，来自光源的每条光线就会近似于互相平行。不论物体和者观察者的位置，&gt;看起来好像所有的光都来自于同一个方向。当我们使用一个假设光源处于无限远处的模型时，&gt;它就被称为定向光，因为它的所有光线都有着相同的方向，它与光源的位置是没有关系的</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Light <span class="op">{</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>        <span class="co">// vec3 position; // 因为要使用的是方向，就不需要位置来计算方向</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        vec3 direction<span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        vec3 ambient<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        vec3 diffuse<span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        vec3 specular<span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">...</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>      vec3 lightDir <span class="op">=</span> normalize<span class="op">(-</span>light<span class="op">.</span>direction<span class="op">);</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>      <span class="op">...</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>点光源</p><blockquote><p>定向光对于照亮整个场景的全局光源是非常棒的，但除了定向光之外我们也需要一些分散在场景中的点光源(PointLight)。点光源是处于世界中某一个位置的光源，它会朝着所有方向发光，但光线会随着距离逐渐衰减。想象作为投光物的灯泡和火把，它们都是点光源</p></blockquote><ol type="1"><li><p>衰减 &gt; 为了实现趋向真实的效果， 衰减公式 $ F_{att} = , d代表到光源距离，K_c、K_l、K_q 可查表。 $</p><table><thead><tr class="header"><th style="text-align: left;">距离</th><th style="text-align: left;">常数项</th><th style="text-align: left;">一次项</th><th style="text-align: left;">二次项</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">7</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.7</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;">13</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.35</td><td style="text-align: left;">0.44</td></tr><tr class="odd"><td style="text-align: left;">20</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.22</td><td style="text-align: left;">0.20</td></tr><tr class="even"><td style="text-align: left;">32</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.14</td><td style="text-align: left;">0.07</td></tr><tr class="odd"><td style="text-align: left;">50</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.09</td><td style="text-align: left;">0.032</td></tr><tr class="even"><td style="text-align: left;">65</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.07</td><td style="text-align: left;">0.017</td></tr><tr class="odd"><td style="text-align: left;">100</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.045</td><td style="text-align: left;">0.0075</td></tr><tr class="even"><td style="text-align: left;">160</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.027</td><td style="text-align: left;">0.0028</td></tr><tr class="odd"><td style="text-align: left;">200</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.022</td><td style="text-align: left;">0.0019</td></tr><tr class="even"><td style="text-align: left;">325</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.014</td><td style="text-align: left;">0.0007</td></tr><tr class="odd"><td style="text-align: left;">600</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.007</td><td style="text-align: left;">0.0002</td></tr><tr class="even"><td style="text-align: left;">3250</td><td style="text-align: left;">1.0</td><td style="text-align: left;">0.0014</td><td style="text-align: left;">0.000007</td></tr></tbody></table><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">struct</span> Light <span class="op">{</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    vec3 position<span class="op">;</span>  </span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    vec3 ambient<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    vec3 diffuse<span class="op">;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    vec3 specular<span class="op">;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> constant<span class="op">;</span> <span class="co">//K_c</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> linear<span class="op">;</span>   <span class="co">//K_l</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> quadratic<span class="op">;</span><span class="co">//K_q </span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span></code></pre></div></li><li><p>代码中设置衰减参数<code>cpp      lightingShader.setFloat("light.constant",  1.0f);      lightingShader.setFloat("light.linear",    0.09f);      lightingShader.setFloat("light.quadratic", 0.032f);</code></p></li><li><p>计算光照<code>GLSL内建的length函数计算距离</code></p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> distance    <span class="op">=</span> length<span class="op">(</span>light<span class="op">.</span>position <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> attenuation <span class="op">=</span> <span class="fl">1.0</span> <span class="op">/</span> <span class="op">(</span>light<span class="op">.</span>constant <span class="op">+</span> light<span class="op">.</span>linear <span class="op">*</span> distance <span class="op">+</span> light<span class="op">.</span>quadratic <span class="op">*</span> <span class="op">(</span>distance <span class="op">*</span> distance<span class="op">));</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//。。。。。</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//应用衰减参数</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    ambient  <span class="op">*=</span> attenuation<span class="op">;</span> </span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    diffuse  <span class="op">*=</span> attenuation<span class="op">;</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>    specular <span class="op">*=</span> attenuation<span class="op">;</span></span></code></pre></div></li></ol></li><li><p>聚光灯(Spotlight) &gt;OpenGL中聚光是用一个世界空间位置、一个方向和一个切光角(CutoffAngle)来表示的，切光角指定了聚光的半径（译注：是圆锥的半径不是距光源距离那个半径）。&gt;对于每个片段，我们会计算片段是否位于聚光的切光方向之间（也就是在锥形内），如果是的话，我们就会相应地照亮片段。</p><p>LightDir：从片段指向光源的向量。 SpotDir：聚光所指向的方向。<code>Phi</code> <span class="math inline">\(\phi\)</span>：指定了聚光半径的切光角。落在这个角度之外的物体都不会被这个聚光所照亮。<code>theta</code><span class="math inline">\(\theta\)</span>：LightDir向量和SpotDir向量之间的夹角。在聚光内部的话θ值应该比ϕ值小。</p><ol type="1"><li>结构定义</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Light <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>        vec3  position<span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>        vec3  direction<span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> cutOff<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="op">...</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span></code></pre></div><ol start="2" type="1"><li>设置参数</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.position"</span><span class="op">,</span>  camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.direction"</span><span class="op">,</span> camera<span class="op">.</span>Front<span class="op">);</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"light.cutOff"</span><span class="op">,</span>   glm<span class="op">::</span>cos<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span><span class="fl">12.5</span><span class="bu">f</span><span class="op">)));</span></span></code></pre></div><ol start="3" type="1"><li>区域判定， 使用<code>clamp 函数</code></li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> theta <span class="op">=</span> dot<span class="op">(</span>lightDir<span class="op">,</span> normalize<span class="op">(-</span>light<span class="op">.</span>direction<span class="op">));</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span><span class="op">(</span>theta <span class="op">&gt;</span> light<span class="op">.</span>cutOff<span class="op">)</span> </span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span>       </span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>      <span class="co">// 执行光照计算</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>  <span class="co">// 否则，使用环境光，让场景在聚光之外时不至于完全黑暗</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>      color <span class="op">=</span> vec4<span class="op">(</span>light<span class="op">.</span>ambient <span class="op">*</span> vec3<span class="op">(</span>texture<span class="op">(</span>material<span class="op">.</span>diffuse<span class="op">,</span> TexCoords<span class="op">)),</span> <span class="fl">1.0</span><span class="op">);</span></span></code></pre></div><ol start="4" type="1"><li>边缘软化 &gt;种看起来边缘平滑的聚光，我们需要模拟聚光有一个内圆锥(InnerCone)和一个外圆锥(OuterCone)。我们可以将内圆锥设置为上一部分中的那个圆锥，但我们也需要一个外圆锥，来让光从内圆锥逐渐减暗，直到外圆锥的边界。<ol type="1"><li>衰减公式 $ I= ,这里ϵ(Epsilon)是内（ϕ）和外圆锥（γ）之间的余弦值差（ϵ=ϕ−γ）。最终的I值就是在当前片段聚光的强度。$</li></ol><table><colgroup><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"><col style="width: 12%"></colgroup><thead><tr class="header"><th style="text-align: left;">θ</th><th style="text-align: left;">θ(角度)</th><th style="text-align: left;">ϕ(内光切)</th><th style="text-align: left;">ϕ(角度)</th><th style="text-align: left;">γ(外光切)</th><th style="text-align: left;">γ(角度)</th><th style="text-align: left;">ϵ</th><th style="text-align: left;">I</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">0.87</td><td style="text-align: left;">30</td><td style="text-align: left;">0.91</td><td style="text-align: left;">25</td><td style="text-align: left;">0.82</td><td style="text-align: left;">35</td><td style="text-align: left;">0.91 - 0.82 = 0.09</td><td style="text-align: left;">0.87 - 0.82 / 0.09 = 0.56</td></tr><tr class="even"><td style="text-align: left;">0.9</td><td style="text-align: left;">26</td><td style="text-align: left;">0.91</td><td style="text-align: left;">25</td><td style="text-align: left;">0.82</td><td style="text-align: left;">35</td><td style="text-align: left;">0.91 - 0.82 = 0.09</td><td style="text-align: left;">0.9 - 0.82 / 0.09 = 0.89</td></tr><tr class="odd"><td style="text-align: left;">0.97</td><td style="text-align: left;">14</td><td style="text-align: left;">0.91</td><td style="text-align: left;">25</td><td style="text-align: left;">0.82</td><td style="text-align: left;">35</td><td style="text-align: left;">0.91 - 0.82 = 0.09</td><td style="text-align: left;">0.97 - 0.82 / 0.09 = 1.67</td></tr><tr class="even"><td style="text-align: left;">0.83</td><td style="text-align: left;">34</td><td style="text-align: left;">0.91</td><td style="text-align: left;">25</td><td style="text-align: left;">0.82</td><td style="text-align: left;">35</td><td style="text-align: left;">0.91 - 0.82 = 0.09</td><td style="text-align: left;">0.83 - 0.82 / 0.09 = 0.11</td></tr><tr class="odd"><td style="text-align: left;">0.64</td><td style="text-align: left;">50</td><td style="text-align: left;">0.91</td><td style="text-align: left;">25</td><td style="text-align: left;">0.82</td><td style="text-align: left;">35</td><td style="text-align: left;">0.91 - 0.82 = 0.09</td><td style="text-align: left;">0.64 - 0.82 / 0.09 = -2.0</td></tr><tr class="even"><td style="text-align: left;">0.966</td><td style="text-align: left;">15</td><td style="text-align: left;">0.9978</td><td style="text-align: left;">12.5</td><td style="text-align: left;">0.953</td><td style="text-align: left;">17.5</td><td style="text-align: left;">0.966 - 0.953 = 0.0448</td><td style="text-align: left;">0.966 - 0.953 / 0.0448 = 0.29</td></tr></tbody></table></li></ol></li><li><p>完整代码</p><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glad/glad.h&gt;</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;GLFW/glfw3.h&gt;</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/glm.hpp&gt;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/gtc/type_ptr.hpp&gt;</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;shader_m.h&gt;</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;camera.h&gt;</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">);</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">);</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">);</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">);</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> loadTexture<span class="op">(</span><span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>path<span class="op">);</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a><span class="co">// settings</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a><span class="co">// camera</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>Camera camera<span class="op">(</span>glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">3.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastX <span class="op">=</span> wWidth <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastY <span class="op">=</span> wHeight <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> firstMouse <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a><span class="co">// timing</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> deltaTime <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastFrame <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a><span class="co">// lighting</span></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>glm<span class="op">::</span>vec3 lightPos<span class="op">(</span><span class="fl">0.</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.4</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 初始化</span></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 基本设置</span></span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a><span class="pp">#if __APPLE__</span></span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 创建窗口</span></span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a>    GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a>    <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a>    <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a>    <span class="co">//6. 设置视口</span></span><span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a>    glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a>    <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a>    glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a>    glfwSetCursorPosCallback<span class="op">(</span>window<span class="op">,</span> mouse_callback<span class="op">);</span></span><span id="cb7-83"><a href="#cb7-83" aria-hidden="true" tabindex="-1"></a>    glfwSetScrollCallback<span class="op">(</span>window<span class="op">,</span> scroll_callback<span class="op">);</span></span><span id="cb7-84"><a href="#cb7-84" aria-hidden="true" tabindex="-1"></a>    <span class="co">// build and compile our shader zprogram</span></span><span id="cb7-85"><a href="#cb7-85" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------</span></span><span id="cb7-86"><a href="#cb7-86" aria-hidden="true" tabindex="-1"></a>    Shader lightingShader<span class="op">(</span><span class="st">"res/shaders/light_maps.vs"</span><span class="op">,</span> <span class="st">"res/shaders/light_maps.fs"</span><span class="op">);</span></span><span id="cb7-87"><a href="#cb7-87" aria-hidden="true" tabindex="-1"></a>    Shader textureShader<span class="op">(</span><span class="st">"res/shaders/texture.vs"</span><span class="op">,</span> <span class="st">"res/shaders/texture1.fs"</span><span class="op">);</span></span><span id="cb7-88"><a href="#cb7-88" aria-hidden="true" tabindex="-1"></a>    Shader lightCubeShader<span class="op">(</span><span class="st">"res/shaders/cube.vs"</span><span class="op">,</span> <span class="st">"res/shaders/white.fs"</span><span class="op">);</span></span><span id="cb7-89"><a href="#cb7-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-90"><a href="#cb7-90" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb7-91"><a href="#cb7-91" aria-hidden="true" tabindex="-1"></a>        <span class="co">// positions          // normals           // texture coords</span></span><span id="cb7-92"><a href="#cb7-92" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-93"><a href="#cb7-93" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-94"><a href="#cb7-94" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-95"><a href="#cb7-95" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-96"><a href="#cb7-96" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-97"><a href="#cb7-97" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-98"><a href="#cb7-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-99"><a href="#cb7-99" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-100"><a href="#cb7-100" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-101"><a href="#cb7-101" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-102"><a href="#cb7-102" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-103"><a href="#cb7-103" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-104"><a href="#cb7-104" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-105"><a href="#cb7-105" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-106"><a href="#cb7-106" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-107"><a href="#cb7-107" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-108"><a href="#cb7-108" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-109"><a href="#cb7-109" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-110"><a href="#cb7-110" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-111"><a href="#cb7-111" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-112"><a href="#cb7-112" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-113"><a href="#cb7-113" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-114"><a href="#cb7-114" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-115"><a href="#cb7-115" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-116"><a href="#cb7-116" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-117"><a href="#cb7-117" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-118"><a href="#cb7-118" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-119"><a href="#cb7-119" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-120"><a href="#cb7-120" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-121"><a href="#cb7-121" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-122"><a href="#cb7-122" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-123"><a href="#cb7-123" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-124"><a href="#cb7-124" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-125"><a href="#cb7-125" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-126"><a href="#cb7-126" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-127"><a href="#cb7-127" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-128"><a href="#cb7-128" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-129"><a href="#cb7-129" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-130"><a href="#cb7-130" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-131"><a href="#cb7-131" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-132"><a href="#cb7-132" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span></span><span id="cb7-133"><a href="#cb7-133" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb7-134"><a href="#cb7-134" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-135"><a href="#cb7-135" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> cubeVAO<span class="op">;</span></span><span id="cb7-136"><a href="#cb7-136" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb7-137"><a href="#cb7-137" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb7-138"><a href="#cb7-138" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-139"><a href="#cb7-139" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb7-140"><a href="#cb7-140" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb7-141"><a href="#cb7-141" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-142"><a href="#cb7-142" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb7-143"><a href="#cb7-143" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-144"><a href="#cb7-144" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-145"><a href="#cb7-145" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb7-146"><a href="#cb7-146" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb7-147"><a href="#cb7-147" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb7-148"><a href="#cb7-148" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb7-149"><a href="#cb7-149" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-150"><a href="#cb7-150" aria-hidden="true" tabindex="-1"></a>    <span class="co">// second, configure the light's VAO (VBO stays the same; the vertices are the same for the light object which is also a 3D cube)</span></span><span id="cb7-151"><a href="#cb7-151" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> lightCubeVAO<span class="op">;</span></span><span id="cb7-152"><a href="#cb7-152" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb7-153"><a href="#cb7-153" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb7-154"><a href="#cb7-154" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-155"><a href="#cb7-155" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb7-156"><a href="#cb7-156" aria-hidden="true" tabindex="-1"></a>    <span class="co">// note that we update the lamp's position attribute's stride to reflect the updated buffer data</span></span><span id="cb7-157"><a href="#cb7-157" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-158"><a href="#cb7-158" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-159"><a href="#cb7-159" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-160"><a href="#cb7-160" aria-hidden="true" tabindex="-1"></a>    <span class="co">// load textures (we now use a utility function to keep the code more organized)</span></span><span id="cb7-161"><a href="#cb7-161" aria-hidden="true" tabindex="-1"></a>    <span class="co">// -----------------------------------------------------------------------------</span></span><span id="cb7-162"><a href="#cb7-162" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> diffuseMap <span class="op">=</span> loadTexture<span class="op">(</span><span class="st">"./res/textures/container2.png"</span><span class="op">);</span></span><span id="cb7-163"><a href="#cb7-163" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> specularMap <span class="op">=</span> loadTexture<span class="op">(</span><span class="st">"./res/textures/container2_specular.png"</span><span class="op">);</span></span><span id="cb7-164"><a href="#cb7-164" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-165"><a href="#cb7-165" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> verticesMMap<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb7-166"><a href="#cb7-166" aria-hidden="true" tabindex="-1"></a>        <span class="co">//位置                    // 基础颜色          // 贴图uv</span></span><span id="cb7-167"><a href="#cb7-167" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb7-168"><a href="#cb7-168" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb7-169"><a href="#cb7-169" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb7-170"><a href="#cb7-170" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb7-171"><a href="#cb7-171" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb7-172"><a href="#cb7-172" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-173"><a href="#cb7-173" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> indicesMMap<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb7-174"><a href="#cb7-174" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb7-175"><a href="#cb7-175" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb7-176"><a href="#cb7-176" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb7-177"><a href="#cb7-177" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-178"><a href="#cb7-178" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> mmapVBO<span class="op">,</span> mmapVAO<span class="op">,</span> mmapEBO<span class="op">;</span></span><span id="cb7-179"><a href="#cb7-179" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVAO<span class="op">);</span></span><span id="cb7-180"><a href="#cb7-180" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>mmapVAO<span class="op">);</span></span><span id="cb7-181"><a href="#cb7-181" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-182"><a href="#cb7-182" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVBO<span class="op">);</span></span><span id="cb7-183"><a href="#cb7-183" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> mmapVBO<span class="op">);</span></span><span id="cb7-184"><a href="#cb7-184" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>verticesMMap<span class="op">),</span> verticesMMap<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb7-185"><a href="#cb7-185" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-186"><a href="#cb7-186" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapEBO<span class="op">);</span></span><span id="cb7-187"><a href="#cb7-187" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> mmapEBO<span class="op">);</span></span><span id="cb7-188"><a href="#cb7-188" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indicesMMap<span class="op">),</span> indicesMMap<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb7-189"><a href="#cb7-189" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-190"><a href="#cb7-190" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb7-191"><a href="#cb7-191" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-192"><a href="#cb7-192" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-193"><a href="#cb7-193" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb7-194"><a href="#cb7-194" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb7-195"><a href="#cb7-195" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb7-196"><a href="#cb7-196" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb7-197"><a href="#cb7-197" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb7-198"><a href="#cb7-198" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb7-199"><a href="#cb7-199" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-200"><a href="#cb7-200" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-201"><a href="#cb7-201" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-202"><a href="#cb7-202" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-203"><a href="#cb7-203" aria-hidden="true" tabindex="-1"></a>    <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb7-204"><a href="#cb7-204" aria-hidden="true" tabindex="-1"></a>    textureShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb7-205"><a href="#cb7-205" aria-hidden="true" tabindex="-1"></a>    textureShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-206"><a href="#cb7-206" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-207"><a href="#cb7-207" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb7-208"><a href="#cb7-208" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"material.diffuse"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-209"><a href="#cb7-209" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"material.specular"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb7-210"><a href="#cb7-210" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-211"><a href="#cb7-211" aria-hidden="true" tabindex="-1"></a>    glEnable<span class="op">(</span>GL_DEPTH_TEST<span class="op">);</span></span><span id="cb7-212"><a href="#cb7-212" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb7-213"><a href="#cb7-213" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-214"><a href="#cb7-214" aria-hidden="true" tabindex="-1"></a>        <span class="co">// per-frame time logic</span></span><span id="cb7-215"><a href="#cb7-215" aria-hidden="true" tabindex="-1"></a>        <span class="co">// --------------------</span></span><span id="cb7-216"><a href="#cb7-216" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> currentFrame <span class="op">=</span> glfwGetTime<span class="op">();</span></span><span id="cb7-217"><a href="#cb7-217" aria-hidden="true" tabindex="-1"></a>        deltaTime <span class="op">=</span> currentFrame <span class="op">-</span> lastFrame<span class="op">;</span></span><span id="cb7-218"><a href="#cb7-218" aria-hidden="true" tabindex="-1"></a>        lastFrame <span class="op">=</span> currentFrame<span class="op">;</span></span><span id="cb7-219"><a href="#cb7-219" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-220"><a href="#cb7-220" aria-hidden="true" tabindex="-1"></a>        <span class="co">// input</span></span><span id="cb7-221"><a href="#cb7-221" aria-hidden="true" tabindex="-1"></a>        <span class="co">// -----</span></span><span id="cb7-222"><a href="#cb7-222" aria-hidden="true" tabindex="-1"></a>        processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-223"><a href="#cb7-223" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-224"><a href="#cb7-224" aria-hidden="true" tabindex="-1"></a>        glClearColor<span class="op">(</span><span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-225"><a href="#cb7-225" aria-hidden="true" tabindex="-1"></a>        glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT <span class="op">|</span> GL_DEPTH_BUFFER_BIT<span class="op">);</span></span><span id="cb7-226"><a href="#cb7-226" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-227"><a href="#cb7-227" aria-hidden="true" tabindex="-1"></a>        <span class="co">// be sure to activate shader when setting uniforms/drawing objects</span></span><span id="cb7-228"><a href="#cb7-228" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb7-229"><a href="#cb7-229" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.position"</span><span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb7-230"><a href="#cb7-230" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"viewPos"</span><span class="op">,</span> camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb7-231"><a href="#cb7-231" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-232"><a href="#cb7-232" aria-hidden="true" tabindex="-1"></a>        <span class="co">// light properties</span></span><span id="cb7-233"><a href="#cb7-233" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.ambient"</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-234"><a href="#cb7-234" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.diffuse"</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-235"><a href="#cb7-235" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-236"><a href="#cb7-236" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-237"><a href="#cb7-237" aria-hidden="true" tabindex="-1"></a>        <span class="co">// material properties</span></span><span id="cb7-238"><a href="#cb7-238" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"material.shininess"</span><span class="op">,</span> <span class="fl">64.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-239"><a href="#cb7-239" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-240"><a href="#cb7-240" aria-hidden="true" tabindex="-1"></a>        <span class="co">// view/projection transformations</span></span><span id="cb7-241"><a href="#cb7-241" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>camera<span class="op">.</span>Zoom<span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wWidth <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wHeight<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-242"><a href="#cb7-242" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 view <span class="op">=</span> camera<span class="op">.</span>GetViewMatrix<span class="op">();</span></span><span id="cb7-243"><a href="#cb7-243" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb7-244"><a href="#cb7-244" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb7-245"><a href="#cb7-245" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-246"><a href="#cb7-246" aria-hidden="true" tabindex="-1"></a>        <span class="co">// world transformation</span></span><span id="cb7-247"><a href="#cb7-247" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-248"><a href="#cb7-248" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb7-249"><a href="#cb7-249" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-250"><a href="#cb7-250" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind diffuse map</span></span><span id="cb7-251"><a href="#cb7-251" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb7-252"><a href="#cb7-252" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> diffuseMap<span class="op">);</span></span><span id="cb7-253"><a href="#cb7-253" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-254"><a href="#cb7-254" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind diffuse map</span></span><span id="cb7-255"><a href="#cb7-255" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb7-256"><a href="#cb7-256" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> specularMap<span class="op">);</span></span><span id="cb7-257"><a href="#cb7-257" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-258"><a href="#cb7-258" aria-hidden="true" tabindex="-1"></a>        <span class="co">// render the cube</span></span><span id="cb7-259"><a href="#cb7-259" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb7-260"><a href="#cb7-260" aria-hidden="true" tabindex="-1"></a>        glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb7-261"><a href="#cb7-261" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-262"><a href="#cb7-262" aria-hidden="true" tabindex="-1"></a>        <span class="co">// also draw the lamp object</span></span><span id="cb7-263"><a href="#cb7-263" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb7-264"><a href="#cb7-264" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb7-265"><a href="#cb7-265" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb7-266"><a href="#cb7-266" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-267"><a href="#cb7-267" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb7-268"><a href="#cb7-268" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>scale<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">));</span> <span class="co">// a smaller cube</span></span><span id="cb7-269"><a href="#cb7-269" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb7-270"><a href="#cb7-270" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-271"><a href="#cb7-271" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb7-272"><a href="#cb7-272" aria-hidden="true" tabindex="-1"></a>        glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb7-273"><a href="#cb7-273" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-274"><a href="#cb7-274" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind Texture1</span></span><span id="cb7-275"><a href="#cb7-275" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*glActiveTexture(GL_TEXTURE0);</span></span><span id="cb7-276"><a href="#cb7-276" aria-hidden="true" tabindex="-1"></a><span class="co">        glBindTexture(GL_TEXTURE_2D, diffuseMap);*/</span></span><span id="cb7-277"><a href="#cb7-277" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-278"><a href="#cb7-278" aria-hidden="true" tabindex="-1"></a>        textureShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb7-279"><a href="#cb7-279" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>mmapVAO<span class="op">);</span></span><span id="cb7-280"><a href="#cb7-280" aria-hidden="true" tabindex="-1"></a>        glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-281"><a href="#cb7-281" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-282"><a href="#cb7-282" aria-hidden="true" tabindex="-1"></a>        glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-283"><a href="#cb7-283" aria-hidden="true" tabindex="-1"></a>        glfwPollEvents<span class="op">();</span></span><span id="cb7-284"><a href="#cb7-284" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-285"><a href="#cb7-285" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-286"><a href="#cb7-286" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb7-287"><a href="#cb7-287" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb7-288"><a href="#cb7-288" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb7-289"><a href="#cb7-289" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-290"><a href="#cb7-290" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVAO<span class="op">);</span></span><span id="cb7-291"><a href="#cb7-291" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVBO<span class="op">);</span></span><span id="cb7-292"><a href="#cb7-292" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapEBO<span class="op">);</span></span><span id="cb7-293"><a href="#cb7-293" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-294"><a href="#cb7-294" aria-hidden="true" tabindex="-1"></a>TERMINATE<span class="op">:</span></span><span id="cb7-295"><a href="#cb7-295" aria-hidden="true" tabindex="-1"></a>    glfwTerminate<span class="op">();</span></span><span id="cb7-296"><a href="#cb7-296" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb7-297"><a href="#cb7-297" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-298"><a href="#cb7-298" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-299"><a href="#cb7-299" aria-hidden="true" tabindex="-1"></a><span class="co">// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly</span></span><span id="cb7-300"><a href="#cb7-300" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------------------------------------------------------------</span></span><span id="cb7-301"><a href="#cb7-301" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb7-302"><a href="#cb7-302" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-303"><a href="#cb7-303" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb7-304"><a href="#cb7-304" aria-hidden="true" tabindex="-1"></a>        glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb7-305"><a href="#cb7-305" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-306"><a href="#cb7-306" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_W<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb7-307"><a href="#cb7-307" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>FORWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb7-308"><a href="#cb7-308" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_S<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb7-309"><a href="#cb7-309" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>BACKWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb7-310"><a href="#cb7-310" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_A<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb7-311"><a href="#cb7-311" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>LEFT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb7-312"><a href="#cb7-312" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_D<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb7-313"><a href="#cb7-313" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>RIGHT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb7-314"><a href="#cb7-314" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-315"><a href="#cb7-315" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-316"><a href="#cb7-316" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the window size changed (by OS or user resize) this callback function executes</span></span><span id="cb7-317"><a href="#cb7-317" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------------------------------------------------</span></span><span id="cb7-318"><a href="#cb7-318" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb7-319"><a href="#cb7-319" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-320"><a href="#cb7-320" aria-hidden="true" tabindex="-1"></a>    <span class="co">// make sure the viewport matches the new window dimensions; note that width and </span></span><span id="cb7-321"><a href="#cb7-321" aria-hidden="true" tabindex="-1"></a>    <span class="co">// height will be significantly larger than specified on retina displays.</span></span><span id="cb7-322"><a href="#cb7-322" aria-hidden="true" tabindex="-1"></a>    glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb7-323"><a href="#cb7-323" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-324"><a href="#cb7-324" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-325"><a href="#cb7-325" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the mouse moves, this callback is called</span></span><span id="cb7-326"><a href="#cb7-326" aria-hidden="true" tabindex="-1"></a><span class="co">// -------------------------------------------------------</span></span><span id="cb7-327"><a href="#cb7-327" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">)</span></span><span id="cb7-328"><a href="#cb7-328" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-329"><a href="#cb7-329" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>firstMouse<span class="op">)</span></span><span id="cb7-330"><a href="#cb7-330" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-331"><a href="#cb7-331" aria-hidden="true" tabindex="-1"></a>        lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb7-332"><a href="#cb7-332" aria-hidden="true" tabindex="-1"></a>        lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb7-333"><a href="#cb7-333" aria-hidden="true" tabindex="-1"></a>        firstMouse <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb7-334"><a href="#cb7-334" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-335"><a href="#cb7-335" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-336"><a href="#cb7-336" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> xoffset <span class="op">=</span> xpos <span class="op">-</span> lastX<span class="op">;</span></span><span id="cb7-337"><a href="#cb7-337" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> yoffset <span class="op">=</span> lastY <span class="op">-</span> ypos<span class="op">;</span> <span class="co">// reversed since y-coordinates go from bottom to top</span></span><span id="cb7-338"><a href="#cb7-338" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-339"><a href="#cb7-339" aria-hidden="true" tabindex="-1"></a>    lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb7-340"><a href="#cb7-340" aria-hidden="true" tabindex="-1"></a>    lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb7-341"><a href="#cb7-341" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-342"><a href="#cb7-342" aria-hidden="true" tabindex="-1"></a>    camera<span class="op">.</span>ProcessMouseMovement<span class="op">(</span>xoffset<span class="op">,</span> yoffset<span class="op">);</span></span><span id="cb7-343"><a href="#cb7-343" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-344"><a href="#cb7-344" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-345"><a href="#cb7-345" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the mouse scroll wheel scrolls, this callback is called</span></span><span id="cb7-346"><a href="#cb7-346" aria-hidden="true" tabindex="-1"></a><span class="co">// ----------------------------------------------------------------------</span></span><span id="cb7-347"><a href="#cb7-347" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">)</span></span><span id="cb7-348"><a href="#cb7-348" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-349"><a href="#cb7-349" aria-hidden="true" tabindex="-1"></a>    camera<span class="op">.</span>ProcessMouseScroll<span class="op">(</span>yoffset<span class="op">);</span></span><span id="cb7-350"><a href="#cb7-350" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb7-351"><a href="#cb7-351" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-352"><a href="#cb7-352" aria-hidden="true" tabindex="-1"></a><span class="co">// utility function for loading a 2D texture from file</span></span><span id="cb7-353"><a href="#cb7-353" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------</span></span><span id="cb7-354"><a href="#cb7-354" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> loadTexture<span class="op">(</span><span class="dt">char</span> <span class="at">const</span> <span class="op">*</span> path<span class="op">)</span></span><span id="cb7-355"><a href="#cb7-355" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb7-356"><a href="#cb7-356" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> textureID<span class="op">;</span></span><span id="cb7-357"><a href="#cb7-357" aria-hidden="true" tabindex="-1"></a>    glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>textureID<span class="op">);</span></span><span id="cb7-358"><a href="#cb7-358" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-359"><a href="#cb7-359" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrComponents<span class="op">;</span></span><span id="cb7-360"><a href="#cb7-360" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">char</span> <span class="op">*</span>data <span class="op">=</span> stbi_load<span class="op">(</span>path<span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrComponents<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-361"><a href="#cb7-361" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb7-362"><a href="#cb7-362" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-363"><a href="#cb7-363" aria-hidden="true" tabindex="-1"></a>        GLenum format<span class="op">;</span></span><span id="cb7-364"><a href="#cb7-364" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">1</span><span class="op">)</span></span><span id="cb7-365"><a href="#cb7-365" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RED<span class="op">;</span></span><span id="cb7-366"><a href="#cb7-366" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">3</span><span class="op">)</span></span><span id="cb7-367"><a href="#cb7-367" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RGB<span class="op">;</span></span><span id="cb7-368"><a href="#cb7-368" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">4</span><span class="op">)</span></span><span id="cb7-369"><a href="#cb7-369" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RGBA<span class="op">;</span></span><span id="cb7-370"><a href="#cb7-370" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-371"><a href="#cb7-371" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> textureID<span class="op">);</span></span><span id="cb7-372"><a href="#cb7-372" aria-hidden="true" tabindex="-1"></a>        glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> format<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> format<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb7-373"><a href="#cb7-373" aria-hidden="true" tabindex="-1"></a>        glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb7-374"><a href="#cb7-374" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-375"><a href="#cb7-375" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb7-376"><a href="#cb7-376" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb7-377"><a href="#cb7-377" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR_MIPMAP_LINEAR<span class="op">);</span></span><span id="cb7-378"><a href="#cb7-378" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb7-379"><a href="#cb7-379" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-380"><a href="#cb7-380" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb7-381"><a href="#cb7-381" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-382"><a href="#cb7-382" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span><span id="cb7-383"><a href="#cb7-383" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-384"><a href="#cb7-384" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Texture failed to load at path: "</span> <span class="op">&lt;&lt;</span> path <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb7-385"><a href="#cb7-385" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb7-386"><a href="#cb7-386" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-387"><a href="#cb7-387" aria-hidden="true" tabindex="-1"></a></span><span id="cb7-388"><a href="#cb7-388" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> textureID<span class="op">;</span></span><span id="cb7-389"><a href="#cb7-389" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/02-guang-zhao-bu-fen/4.guang-zhao-tie-tu/"/>
      <url>/2022/08/10/opengl/02-guang-zhao-bu-fen/4.guang-zhao-tie-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="光照贴图">光照贴图</h2><blockquote><p>为了对物体的漫反射分量（以及间接地对环境光分量，它们几乎总是一样的）和镜面光分量有着更精确的控制，材质属性准确的控制(环境光交给light)。</p></blockquote><hr><ol type="1"><li><p>漫反射贴图 &gt;其实都是使用一张覆盖物体的图像，让我们能够逐片段索引其独立的颜色值。在光照场景中，它通常叫做一个漫反射贴图(DiffuseMap)（3D艺术家通常都这么叫它），它是一个表现了物体所有的漫反射颜色的纹理图像。&gt; 所以我们将材质结构体的漫反射变量 修改为漫反射贴图 &gt;并使用贴图采样 <code>texture(material.diffuse, TexCoords)</code>获取满发射颜色分量。<code>cpp         //漫反射         vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse, TexCoords));         //环境光，这里的环境光也是用漫反射分量影响，而不是用材质的环境光属性         vec3 ambient = light.ambient * vec3(texture(material.diffuse, TexCoords));</code></p></li><li><p>使用材质属性变量</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    out vec4 FragColor<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//定义材质属性</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Material <span class="op">{</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        sampler2D diffuse<span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        sampler2D specular<span class="op">;</span>    </span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        sampler2D emission<span class="op">;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> shininess<span class="op">;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span> </span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">//定义光属性</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Light <span class="op">{</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        vec3 position<span class="op">;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>        vec3 ambient<span class="op">;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>        vec3 diffuse<span class="op">;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        vec3 specular<span class="op">;</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    in vec3 FragPos<span class="op">;</span>  </span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    in vec3 Normal<span class="op">;</span>  </span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    in vec2 TexCoords<span class="op">;</span>        </span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    uniform vec3 viewPos<span class="op">;</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    uniform Material material<span class="op">;</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    uniform Light light<span class="op">;</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ambient</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>        vec3 ambient <span class="op">=</span> light<span class="op">.</span>ambient <span class="op">*</span> texture<span class="op">(</span>material<span class="op">.</span>diffuse<span class="op">,</span> TexCoords<span class="op">).</span>rgb<span class="op">;</span>            </span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">// diffuse </span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        vec3 norm <span class="op">=</span> normalize<span class="op">(</span>Normal<span class="op">);</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>        vec3 lightDir <span class="op">=</span> normalize<span class="op">(</span>light<span class="op">.</span>position <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> diff <span class="op">=</span> max<span class="op">(</span>dot<span class="op">(</span>norm<span class="op">,</span> lightDir<span class="op">),</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>        vec3 diffuse <span class="op">=</span> light<span class="op">.</span>diffuse <span class="op">*</span> diff <span class="op">*</span> texture<span class="op">(</span>material<span class="op">.</span>diffuse<span class="op">,</span> TexCoords<span class="op">).</span>rgb<span class="op">;</span>             </span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        <span class="co">// specular</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>        vec3 viewDir <span class="op">=</span> normalize<span class="op">(</span>viewPos <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>        vec3 reflectDir <span class="op">=</span> reflect<span class="op">(-</span>lightDir<span class="op">,</span> norm<span class="op">);</span>  </span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> spec <span class="op">=</span> pow<span class="op">(</span>max<span class="op">(</span>dot<span class="op">(</span>viewDir<span class="op">,</span> reflectDir<span class="op">),</span> <span class="fl">0.0</span><span class="op">),</span> material<span class="op">.</span>shininess<span class="op">);</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>        vec3 specular <span class="op">=</span> light<span class="op">.</span>specular <span class="op">*</span> spec <span class="op">*</span> texture<span class="op">(</span>material<span class="op">.</span>specular<span class="op">,</span> TexCoords<span class="op">).</span>rgb<span class="op">;</span>              </span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        <span class="co">// emission 光滑度细节</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        vec3 emission <span class="op">=</span> texture<span class="op">(</span>material<span class="op">.</span>emission<span class="op">,</span> TexCoords<span class="op">).</span>rgb<span class="op">;</span>              </span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        vec3 result <span class="op">=</span> ambient <span class="op">+</span> diffuse <span class="op">+</span> specular <span class="op">+</span> emission<span class="op">;</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>result<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> </span></code></pre></div></li><li><p>为Shader材质属性设置值 &gt;结构体只是作为uniform变量的一个封装，所以如果想填充这个结构体的话，我们仍需要对<code>每个单独的uniform进行设置</code>，但这次要带上结构体名的前缀：</p><p>配置Shader贴图属性<code>cpp          lightingShader.use();          lightingShader.setInt("material.diffuse", 0);          lightingShader.setInt("material.specular", 1);          lightingShader.setInt("material.emission", 2);</code></p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.position"</span><span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"viewPos"</span><span class="op">,</span> camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 光属性</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.ambient"</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.diffuse"</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 对应贴图属性local的配置 0</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> diffuseMap<span class="op">);</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 对应贴图属性local的配置 1</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> specularMap<span class="op">);</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 对应贴图属性local的配置 2</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE2<span class="op">);</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> emissionMap<span class="op">);</span></span></code></pre></div></li><li><p>完整代码</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glad/glad.h&gt;</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;GLFW/glfw3.h&gt;</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/glm.hpp&gt;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glm/gtc/type_ptr.hpp&gt;</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;shader_m.h&gt;</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;camera.h&gt;</span></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">);</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">);</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">);</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">);</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> loadTexture<span class="op">(</span><span class="at">const</span> <span class="dt">char</span> <span class="op">*</span>path<span class="op">);</span></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a><span class="co">// settings</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a><span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a><span class="co">// camera</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>Camera camera<span class="op">(</span>glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">3.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastX <span class="op">=</span> wWidth <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastY <span class="op">=</span> wHeight <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a><span class="dt">bool</span> firstMouse <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="co">// timing</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> deltaTime <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="dt">float</span> lastFrame <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="co">// lighting</span></span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>glm<span class="op">::</span>vec3 lightPos<span class="op">(</span><span class="fl">0.</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.4</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 初始化</span></span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 基本设置</span></span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a><span class="pp">#if __APPLE__</span></span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 创建窗口</span></span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>    GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a>    <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>    <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb3-75"><a href="#cb3-75" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-76"><a href="#cb3-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-77"><a href="#cb3-77" aria-hidden="true" tabindex="-1"></a>    <span class="co">//6. 设置视口</span></span><span id="cb3-78"><a href="#cb3-78" aria-hidden="true" tabindex="-1"></a>    glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb3-79"><a href="#cb3-79" aria-hidden="true" tabindex="-1"></a>    <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb3-80"><a href="#cb3-80" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-81"><a href="#cb3-81" aria-hidden="true" tabindex="-1"></a>    glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb3-82"><a href="#cb3-82" aria-hidden="true" tabindex="-1"></a>    glfwSetCursorPosCallback<span class="op">(</span>window<span class="op">,</span> mouse_callback<span class="op">);</span></span><span id="cb3-83"><a href="#cb3-83" aria-hidden="true" tabindex="-1"></a>    glfwSetScrollCallback<span class="op">(</span>window<span class="op">,</span> scroll_callback<span class="op">);</span></span><span id="cb3-84"><a href="#cb3-84" aria-hidden="true" tabindex="-1"></a>    <span class="co">// build and compile our shader zprogram</span></span><span id="cb3-85"><a href="#cb3-85" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------</span></span><span id="cb3-86"><a href="#cb3-86" aria-hidden="true" tabindex="-1"></a>    Shader lightingShader<span class="op">(</span><span class="st">"res/shaders/light_maps.vs"</span><span class="op">,</span> <span class="st">"res/shaders/light_maps.fs"</span><span class="op">);</span></span><span id="cb3-87"><a href="#cb3-87" aria-hidden="true" tabindex="-1"></a>    Shader textureShader<span class="op">(</span><span class="st">"res/shaders/texture.vs"</span><span class="op">,</span> <span class="st">"res/shaders/texture1.fs"</span><span class="op">);</span></span><span id="cb3-88"><a href="#cb3-88" aria-hidden="true" tabindex="-1"></a>    Shader lightCubeShader<span class="op">(</span><span class="st">"res/shaders/cube.vs"</span><span class="op">,</span> <span class="st">"res/shaders/white.fs"</span><span class="op">);</span></span><span id="cb3-89"><a href="#cb3-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-90"><a href="#cb3-90" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb3-91"><a href="#cb3-91" aria-hidden="true" tabindex="-1"></a>        <span class="co">// positions          // normals           // texture coords</span></span><span id="cb3-92"><a href="#cb3-92" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-93"><a href="#cb3-93" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-94"><a href="#cb3-94" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-95"><a href="#cb3-95" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-96"><a href="#cb3-96" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-97"><a href="#cb3-97" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-98"><a href="#cb3-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-99"><a href="#cb3-99" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-100"><a href="#cb3-100" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-101"><a href="#cb3-101" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-102"><a href="#cb3-102" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-103"><a href="#cb3-103" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-104"><a href="#cb3-104" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-105"><a href="#cb3-105" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-106"><a href="#cb3-106" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-107"><a href="#cb3-107" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-108"><a href="#cb3-108" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-109"><a href="#cb3-109" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-110"><a href="#cb3-110" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-111"><a href="#cb3-111" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-112"><a href="#cb3-112" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-113"><a href="#cb3-113" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-114"><a href="#cb3-114" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-115"><a href="#cb3-115" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-116"><a href="#cb3-116" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-117"><a href="#cb3-117" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-118"><a href="#cb3-118" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-119"><a href="#cb3-119" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-120"><a href="#cb3-120" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-121"><a href="#cb3-121" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-122"><a href="#cb3-122" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-123"><a href="#cb3-123" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-124"><a href="#cb3-124" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-125"><a href="#cb3-125" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-126"><a href="#cb3-126" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-127"><a href="#cb3-127" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-128"><a href="#cb3-128" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-129"><a href="#cb3-129" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-130"><a href="#cb3-130" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-131"><a href="#cb3-131" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb3-132"><a href="#cb3-132" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span></span><span id="cb3-133"><a href="#cb3-133" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb3-134"><a href="#cb3-134" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-135"><a href="#cb3-135" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> cubeVAO<span class="op">;</span></span><span id="cb3-136"><a href="#cb3-136" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb3-137"><a href="#cb3-137" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb3-138"><a href="#cb3-138" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-139"><a href="#cb3-139" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb3-140"><a href="#cb3-140" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-141"><a href="#cb3-141" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-142"><a href="#cb3-142" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb3-143"><a href="#cb3-143" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-144"><a href="#cb3-144" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-145"><a href="#cb3-145" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-146"><a href="#cb3-146" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb3-147"><a href="#cb3-147" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-148"><a href="#cb3-148" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb3-149"><a href="#cb3-149" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-150"><a href="#cb3-150" aria-hidden="true" tabindex="-1"></a>    <span class="co">// second, configure the light's VAO (VBO stays the same; the vertices are the same for the light object which is also a 3D cube)</span></span><span id="cb3-151"><a href="#cb3-151" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> lightCubeVAO<span class="op">;</span></span><span id="cb3-152"><a href="#cb3-152" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb3-153"><a href="#cb3-153" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb3-154"><a href="#cb3-154" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-155"><a href="#cb3-155" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb3-156"><a href="#cb3-156" aria-hidden="true" tabindex="-1"></a>    <span class="co">// note that we update the lamp's position attribute's stride to reflect the updated buffer data</span></span><span id="cb3-157"><a href="#cb3-157" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-158"><a href="#cb3-158" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-159"><a href="#cb3-159" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-160"><a href="#cb3-160" aria-hidden="true" tabindex="-1"></a>    <span class="co">// load textures (we now use a utility function to keep the code more organized)</span></span><span id="cb3-161"><a href="#cb3-161" aria-hidden="true" tabindex="-1"></a>    <span class="co">// -----------------------------------------------------------------------------</span></span><span id="cb3-162"><a href="#cb3-162" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> diffuseMap <span class="op">=</span> loadTexture<span class="op">(</span><span class="st">"./res/textures/container2.png"</span><span class="op">);</span></span><span id="cb3-163"><a href="#cb3-163" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> specularMap <span class="op">=</span> loadTexture<span class="op">(</span><span class="st">"./res/textures/container2_specular.png"</span><span class="op">);</span></span><span id="cb3-164"><a href="#cb3-164" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-165"><a href="#cb3-165" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> verticesMMap<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb3-166"><a href="#cb3-166" aria-hidden="true" tabindex="-1"></a>        <span class="co">//位置                    // 基础颜色          // 贴图uv</span></span><span id="cb3-167"><a href="#cb3-167" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb3-168"><a href="#cb3-168" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb3-169"><a href="#cb3-169" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb3-170"><a href="#cb3-170" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.9</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.6</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb3-171"><a href="#cb3-171" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb3-172"><a href="#cb3-172" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-173"><a href="#cb3-173" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> indicesMMap<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb3-174"><a href="#cb3-174" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb3-175"><a href="#cb3-175" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb3-176"><a href="#cb3-176" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb3-177"><a href="#cb3-177" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-178"><a href="#cb3-178" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> mmapVBO<span class="op">,</span> mmapVAO<span class="op">,</span> mmapEBO<span class="op">;</span></span><span id="cb3-179"><a href="#cb3-179" aria-hidden="true" tabindex="-1"></a>    glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVAO<span class="op">);</span></span><span id="cb3-180"><a href="#cb3-180" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>mmapVAO<span class="op">);</span></span><span id="cb3-181"><a href="#cb3-181" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-182"><a href="#cb3-182" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVBO<span class="op">);</span></span><span id="cb3-183"><a href="#cb3-183" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> mmapVBO<span class="op">);</span></span><span id="cb3-184"><a href="#cb3-184" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>verticesMMap<span class="op">),</span> verticesMMap<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-185"><a href="#cb3-185" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-186"><a href="#cb3-186" aria-hidden="true" tabindex="-1"></a>    glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapEBO<span class="op">);</span></span><span id="cb3-187"><a href="#cb3-187" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> mmapEBO<span class="op">);</span></span><span id="cb3-188"><a href="#cb3-188" aria-hidden="true" tabindex="-1"></a>    glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indicesMMap<span class="op">),</span> indicesMMap<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-189"><a href="#cb3-189" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-190"><a href="#cb3-190" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb3-191"><a href="#cb3-191" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-192"><a href="#cb3-192" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-193"><a href="#cb3-193" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb3-194"><a href="#cb3-194" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-195"><a href="#cb3-195" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb3-196"><a href="#cb3-196" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb3-197"><a href="#cb3-197" aria-hidden="true" tabindex="-1"></a>    glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-198"><a href="#cb3-198" aria-hidden="true" tabindex="-1"></a>    glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb3-199"><a href="#cb3-199" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-200"><a href="#cb3-200" aria-hidden="true" tabindex="-1"></a>    glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-201"><a href="#cb3-201" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-202"><a href="#cb3-202" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-203"><a href="#cb3-203" aria-hidden="true" tabindex="-1"></a>    <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb3-204"><a href="#cb3-204" aria-hidden="true" tabindex="-1"></a>    textureShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-205"><a href="#cb3-205" aria-hidden="true" tabindex="-1"></a>    textureShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-206"><a href="#cb3-206" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-207"><a href="#cb3-207" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-208"><a href="#cb3-208" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"material.diffuse"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-209"><a href="#cb3-209" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"material.specular"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb3-210"><a href="#cb3-210" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-211"><a href="#cb3-211" aria-hidden="true" tabindex="-1"></a>    glEnable<span class="op">(</span>GL_DEPTH_TEST<span class="op">);</span></span><span id="cb3-212"><a href="#cb3-212" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb3-213"><a href="#cb3-213" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-214"><a href="#cb3-214" aria-hidden="true" tabindex="-1"></a>        <span class="co">// per-frame time logic</span></span><span id="cb3-215"><a href="#cb3-215" aria-hidden="true" tabindex="-1"></a>        <span class="co">// --------------------</span></span><span id="cb3-216"><a href="#cb3-216" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> currentFrame <span class="op">=</span> glfwGetTime<span class="op">();</span></span><span id="cb3-217"><a href="#cb3-217" aria-hidden="true" tabindex="-1"></a>        deltaTime <span class="op">=</span> currentFrame <span class="op">-</span> lastFrame<span class="op">;</span></span><span id="cb3-218"><a href="#cb3-218" aria-hidden="true" tabindex="-1"></a>        lastFrame <span class="op">=</span> currentFrame<span class="op">;</span></span><span id="cb3-219"><a href="#cb3-219" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-220"><a href="#cb3-220" aria-hidden="true" tabindex="-1"></a>        <span class="co">// input</span></span><span id="cb3-221"><a href="#cb3-221" aria-hidden="true" tabindex="-1"></a>        <span class="co">// -----</span></span><span id="cb3-222"><a href="#cb3-222" aria-hidden="true" tabindex="-1"></a>        processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-223"><a href="#cb3-223" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-224"><a href="#cb3-224" aria-hidden="true" tabindex="-1"></a>        glClearColor<span class="op">(</span><span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-225"><a href="#cb3-225" aria-hidden="true" tabindex="-1"></a>        glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT <span class="op">|</span> GL_DEPTH_BUFFER_BIT<span class="op">);</span></span><span id="cb3-226"><a href="#cb3-226" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-227"><a href="#cb3-227" aria-hidden="true" tabindex="-1"></a>        <span class="co">// be sure to activate shader when setting uniforms/drawing objects</span></span><span id="cb3-228"><a href="#cb3-228" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-229"><a href="#cb3-229" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.position"</span><span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb3-230"><a href="#cb3-230" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"viewPos"</span><span class="op">,</span> camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb3-231"><a href="#cb3-231" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-232"><a href="#cb3-232" aria-hidden="true" tabindex="-1"></a>        <span class="co">// light properties</span></span><span id="cb3-233"><a href="#cb3-233" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.ambient"</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-234"><a href="#cb3-234" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.diffuse"</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-235"><a href="#cb3-235" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-236"><a href="#cb3-236" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-237"><a href="#cb3-237" aria-hidden="true" tabindex="-1"></a>        <span class="co">// material properties</span></span><span id="cb3-238"><a href="#cb3-238" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"material.shininess"</span><span class="op">,</span> <span class="fl">64.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-239"><a href="#cb3-239" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-240"><a href="#cb3-240" aria-hidden="true" tabindex="-1"></a>        <span class="co">// view/projection transformations</span></span><span id="cb3-241"><a href="#cb3-241" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>camera<span class="op">.</span>Zoom<span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wWidth <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wHeight<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-242"><a href="#cb3-242" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 view <span class="op">=</span> camera<span class="op">.</span>GetViewMatrix<span class="op">();</span></span><span id="cb3-243"><a href="#cb3-243" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb3-244"><a href="#cb3-244" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb3-245"><a href="#cb3-245" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-246"><a href="#cb3-246" aria-hidden="true" tabindex="-1"></a>        <span class="co">// world transformation</span></span><span id="cb3-247"><a href="#cb3-247" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-248"><a href="#cb3-248" aria-hidden="true" tabindex="-1"></a>        lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb3-249"><a href="#cb3-249" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-250"><a href="#cb3-250" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind diffuse map</span></span><span id="cb3-251"><a href="#cb3-251" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb3-252"><a href="#cb3-252" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> diffuseMap<span class="op">);</span></span><span id="cb3-253"><a href="#cb3-253" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-254"><a href="#cb3-254" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind diffuse map</span></span><span id="cb3-255"><a href="#cb3-255" aria-hidden="true" tabindex="-1"></a>        glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb3-256"><a href="#cb3-256" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> specularMap<span class="op">);</span></span><span id="cb3-257"><a href="#cb3-257" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-258"><a href="#cb3-258" aria-hidden="true" tabindex="-1"></a>        <span class="co">// render the cube</span></span><span id="cb3-259"><a href="#cb3-259" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb3-260"><a href="#cb3-260" aria-hidden="true" tabindex="-1"></a>        glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb3-261"><a href="#cb3-261" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-262"><a href="#cb3-262" aria-hidden="true" tabindex="-1"></a>        <span class="co">// also draw the lamp object</span></span><span id="cb3-263"><a href="#cb3-263" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-264"><a href="#cb3-264" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb3-265"><a href="#cb3-265" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb3-266"><a href="#cb3-266" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-267"><a href="#cb3-267" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb3-268"><a href="#cb3-268" aria-hidden="true" tabindex="-1"></a>        model <span class="op">=</span> glm<span class="op">::</span>scale<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">));</span> <span class="co">// a smaller cube</span></span><span id="cb3-269"><a href="#cb3-269" aria-hidden="true" tabindex="-1"></a>        lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb3-270"><a href="#cb3-270" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-271"><a href="#cb3-271" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb3-272"><a href="#cb3-272" aria-hidden="true" tabindex="-1"></a>        glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb3-273"><a href="#cb3-273" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-274"><a href="#cb3-274" aria-hidden="true" tabindex="-1"></a>        <span class="co">// bind Texture1</span></span><span id="cb3-275"><a href="#cb3-275" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*glActiveTexture(GL_TEXTURE0);</span></span><span id="cb3-276"><a href="#cb3-276" aria-hidden="true" tabindex="-1"></a><span class="co">        glBindTexture(GL_TEXTURE_2D, diffuseMap);*/</span></span><span id="cb3-277"><a href="#cb3-277" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-278"><a href="#cb3-278" aria-hidden="true" tabindex="-1"></a>        textureShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-279"><a href="#cb3-279" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>mmapVAO<span class="op">);</span></span><span id="cb3-280"><a href="#cb3-280" aria-hidden="true" tabindex="-1"></a>        glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-281"><a href="#cb3-281" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-282"><a href="#cb3-282" aria-hidden="true" tabindex="-1"></a>        glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-283"><a href="#cb3-283" aria-hidden="true" tabindex="-1"></a>        glfwPollEvents<span class="op">();</span></span><span id="cb3-284"><a href="#cb3-284" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-285"><a href="#cb3-285" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-286"><a href="#cb3-286" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb3-287"><a href="#cb3-287" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb3-288"><a href="#cb3-288" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb3-289"><a href="#cb3-289" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-290"><a href="#cb3-290" aria-hidden="true" tabindex="-1"></a>    glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVAO<span class="op">);</span></span><span id="cb3-291"><a href="#cb3-291" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapVBO<span class="op">);</span></span><span id="cb3-292"><a href="#cb3-292" aria-hidden="true" tabindex="-1"></a>    glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>mmapEBO<span class="op">);</span></span><span id="cb3-293"><a href="#cb3-293" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-294"><a href="#cb3-294" aria-hidden="true" tabindex="-1"></a>TERMINATE<span class="op">:</span></span><span id="cb3-295"><a href="#cb3-295" aria-hidden="true" tabindex="-1"></a>    glfwTerminate<span class="op">();</span></span><span id="cb3-296"><a href="#cb3-296" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb3-297"><a href="#cb3-297" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-298"><a href="#cb3-298" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-299"><a href="#cb3-299" aria-hidden="true" tabindex="-1"></a><span class="co">// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly</span></span><span id="cb3-300"><a href="#cb3-300" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------------------------------------------------------------</span></span><span id="cb3-301"><a href="#cb3-301" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb3-302"><a href="#cb3-302" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-303"><a href="#cb3-303" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb3-304"><a href="#cb3-304" aria-hidden="true" tabindex="-1"></a>        glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb3-305"><a href="#cb3-305" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-306"><a href="#cb3-306" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_W<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb3-307"><a href="#cb3-307" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>FORWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb3-308"><a href="#cb3-308" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_S<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb3-309"><a href="#cb3-309" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>BACKWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb3-310"><a href="#cb3-310" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_A<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb3-311"><a href="#cb3-311" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>LEFT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb3-312"><a href="#cb3-312" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_D<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb3-313"><a href="#cb3-313" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>RIGHT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb3-314"><a href="#cb3-314" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-315"><a href="#cb3-315" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-316"><a href="#cb3-316" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the window size changed (by OS or user resize) this callback function executes</span></span><span id="cb3-317"><a href="#cb3-317" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------------------------------------------------</span></span><span id="cb3-318"><a href="#cb3-318" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb3-319"><a href="#cb3-319" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-320"><a href="#cb3-320" aria-hidden="true" tabindex="-1"></a>    <span class="co">// make sure the viewport matches the new window dimensions; note that width and </span></span><span id="cb3-321"><a href="#cb3-321" aria-hidden="true" tabindex="-1"></a>    <span class="co">// height will be significantly larger than specified on retina displays.</span></span><span id="cb3-322"><a href="#cb3-322" aria-hidden="true" tabindex="-1"></a>    glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb3-323"><a href="#cb3-323" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-324"><a href="#cb3-324" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-325"><a href="#cb3-325" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the mouse moves, this callback is called</span></span><span id="cb3-326"><a href="#cb3-326" aria-hidden="true" tabindex="-1"></a><span class="co">// -------------------------------------------------------</span></span><span id="cb3-327"><a href="#cb3-327" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">)</span></span><span id="cb3-328"><a href="#cb3-328" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-329"><a href="#cb3-329" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>firstMouse<span class="op">)</span></span><span id="cb3-330"><a href="#cb3-330" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-331"><a href="#cb3-331" aria-hidden="true" tabindex="-1"></a>        lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb3-332"><a href="#cb3-332" aria-hidden="true" tabindex="-1"></a>        lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb3-333"><a href="#cb3-333" aria-hidden="true" tabindex="-1"></a>        firstMouse <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb3-334"><a href="#cb3-334" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-335"><a href="#cb3-335" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-336"><a href="#cb3-336" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> xoffset <span class="op">=</span> xpos <span class="op">-</span> lastX<span class="op">;</span></span><span id="cb3-337"><a href="#cb3-337" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> yoffset <span class="op">=</span> lastY <span class="op">-</span> ypos<span class="op">;</span> <span class="co">// reversed since y-coordinates go from bottom to top</span></span><span id="cb3-338"><a href="#cb3-338" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-339"><a href="#cb3-339" aria-hidden="true" tabindex="-1"></a>    lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb3-340"><a href="#cb3-340" aria-hidden="true" tabindex="-1"></a>    lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb3-341"><a href="#cb3-341" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-342"><a href="#cb3-342" aria-hidden="true" tabindex="-1"></a>    camera<span class="op">.</span>ProcessMouseMovement<span class="op">(</span>xoffset<span class="op">,</span> yoffset<span class="op">);</span></span><span id="cb3-343"><a href="#cb3-343" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-344"><a href="#cb3-344" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-345"><a href="#cb3-345" aria-hidden="true" tabindex="-1"></a><span class="co">// glfw: whenever the mouse scroll wheel scrolls, this callback is called</span></span><span id="cb3-346"><a href="#cb3-346" aria-hidden="true" tabindex="-1"></a><span class="co">// ----------------------------------------------------------------------</span></span><span id="cb3-347"><a href="#cb3-347" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">)</span></span><span id="cb3-348"><a href="#cb3-348" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-349"><a href="#cb3-349" aria-hidden="true" tabindex="-1"></a>    camera<span class="op">.</span>ProcessMouseScroll<span class="op">(</span>yoffset<span class="op">);</span></span><span id="cb3-350"><a href="#cb3-350" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb3-351"><a href="#cb3-351" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-352"><a href="#cb3-352" aria-hidden="true" tabindex="-1"></a><span class="co">// utility function for loading a 2D texture from file</span></span><span id="cb3-353"><a href="#cb3-353" aria-hidden="true" tabindex="-1"></a><span class="co">// ---------------------------------------------------</span></span><span id="cb3-354"><a href="#cb3-354" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> loadTexture<span class="op">(</span><span class="dt">char</span> <span class="at">const</span> <span class="op">*</span> path<span class="op">)</span></span><span id="cb3-355"><a href="#cb3-355" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-356"><a href="#cb3-356" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> textureID<span class="op">;</span></span><span id="cb3-357"><a href="#cb3-357" aria-hidden="true" tabindex="-1"></a>    glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>textureID<span class="op">);</span></span><span id="cb3-358"><a href="#cb3-358" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-359"><a href="#cb3-359" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrComponents<span class="op">;</span></span><span id="cb3-360"><a href="#cb3-360" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">char</span> <span class="op">*</span>data <span class="op">=</span> stbi_load<span class="op">(</span>path<span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrComponents<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-361"><a href="#cb3-361" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb3-362"><a href="#cb3-362" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-363"><a href="#cb3-363" aria-hidden="true" tabindex="-1"></a>        GLenum format<span class="op">;</span></span><span id="cb3-364"><a href="#cb3-364" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">1</span><span class="op">)</span></span><span id="cb3-365"><a href="#cb3-365" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RED<span class="op">;</span></span><span id="cb3-366"><a href="#cb3-366" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">3</span><span class="op">)</span></span><span id="cb3-367"><a href="#cb3-367" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RGB<span class="op">;</span></span><span id="cb3-368"><a href="#cb3-368" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span> <span class="cf">if</span> <span class="op">(</span>nrComponents <span class="op">==</span> <span class="dv">4</span><span class="op">)</span></span><span id="cb3-369"><a href="#cb3-369" aria-hidden="true" tabindex="-1"></a>            format <span class="op">=</span> GL_RGBA<span class="op">;</span></span><span id="cb3-370"><a href="#cb3-370" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-371"><a href="#cb3-371" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> textureID<span class="op">);</span></span><span id="cb3-372"><a href="#cb3-372" aria-hidden="true" tabindex="-1"></a>        glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> format<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> format<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb3-373"><a href="#cb3-373" aria-hidden="true" tabindex="-1"></a>        glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb3-374"><a href="#cb3-374" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-375"><a href="#cb3-375" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb3-376"><a href="#cb3-376" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb3-377"><a href="#cb3-377" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR_MIPMAP_LINEAR<span class="op">);</span></span><span id="cb3-378"><a href="#cb3-378" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb3-379"><a href="#cb3-379" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-380"><a href="#cb3-380" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb3-381"><a href="#cb3-381" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-382"><a href="#cb3-382" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span></span><span id="cb3-383"><a href="#cb3-383" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-384"><a href="#cb3-384" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Texture failed to load at path: "</span> <span class="op">&lt;&lt;</span> path <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb3-385"><a href="#cb3-385" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb3-386"><a href="#cb3-386" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-387"><a href="#cb3-387" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-388"><a href="#cb3-388" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> textureID<span class="op">;</span></span><span id="cb3-389"><a href="#cb3-389" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/02-guang-zhao-bu-fen/3.shu-xing-feng-zhuang-cai-zhi/"/>
      <url>/2022/08/10/opengl/02-guang-zhao-bu-fen/3.shu-xing-feng-zhuang-cai-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="属性封装-材质光">属性封装-材质、光</h2><blockquote><p>主要是针对面向对象的设计，shader数据使用<code>结构struct</code>来抽象个体</p></blockquote><hr><ol type="1"><li><p>材质 &gt; 描述物体特有反射、散射、高光等属性。</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//结构定义</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Material <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        vec3 ambient<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        vec3 diffuse<span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        vec3 specular<span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> shininess<span class="op">;</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span> </span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">//材质属性</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    uniform Material material<span class="op">;</span></span></code></pre></div></li><li><p>使用材质属性变量</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span>    </span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 环境光</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>        vec3 ambient <span class="op">=</span> lightColor <span class="op">*</span> material<span class="op">.</span>ambient<span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 漫反射 </span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        vec3 norm <span class="op">=</span> normalize<span class="op">(</span>Normal<span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>        vec3 lightDir <span class="op">=</span> normalize<span class="op">(</span>lightPos <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> diff <span class="op">=</span> max<span class="op">(</span>dot<span class="op">(</span>norm<span class="op">,</span> lightDir<span class="op">),</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        vec3 diffuse <span class="op">=</span> lightColor <span class="op">*</span> <span class="op">(</span>diff <span class="op">*</span> material<span class="op">.</span>diffuse<span class="op">);</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 镜面光</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        vec3 viewDir <span class="op">=</span> normalize<span class="op">(</span>viewPos <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        vec3 reflectDir <span class="op">=</span> reflect<span class="op">(-</span>lightDir<span class="op">,</span> norm<span class="op">);</span>  </span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> spec <span class="op">=</span> pow<span class="op">(</span>max<span class="op">(</span>dot<span class="op">(</span>viewDir<span class="op">,</span> reflectDir<span class="op">),</span> <span class="fl">0.0</span><span class="op">),</span> material<span class="op">.</span>shininess<span class="op">);</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        vec3 specular <span class="op">=</span> lightColor <span class="op">*</span> <span class="op">(</span>spec <span class="op">*</span> material<span class="op">.</span>specular<span class="op">);</span>  </span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        vec3 result <span class="op">=</span> ambient <span class="op">+</span> diffuse <span class="op">+</span> specular<span class="op">;</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>result<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>为Shader材质属性设置值 &gt;结构体只是作为uniform变量的一个封装，所以如果想填充这个结构体的话，我们仍需要对<code>每个单独的uniform进行设置</code>，但这次要带上结构体名的前缀：</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"material.ambient"</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.31</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"material.diffuse"</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.31</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"material.specular"</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"material.shininess"</span><span class="op">,</span> <span class="fl">32.0</span><span class="bu">f</span><span class="op">);</span></span></code></pre></div></li><li><p>光的属性 &gt; 光的对应属性叠加材质对应属性</p><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="kw">struct</span> Light <span class="op">{</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    vec3 position<span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    vec3 ambient<span class="op">;</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    vec3 diffuse<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    vec3 specular<span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>uniform Light light<span class="op">;</span></span></code></pre></div></li><li><p>使用光属性变量<code>cpp         void main()         {             // ambient             vec3 ambient = light.ambient * material.ambient;                         // diffuse              vec3 norm = normalize(Normal);             vec3 lightDir = normalize(light.position - FragPos);             float diff = max(dot(norm, lightDir), 0.0);             vec3 diffuse = light.diffuse * (diff * material.diffuse);                        // specular             vec3 viewDir = normalize(viewPos - FragPos);             vec3 reflectDir = reflect(-lightDir, norm);               float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);             vec3 specular = light.specular * (spec * material.specular);                             vec3 result = ambient + diffuse + specular;             FragColor = vec4(result, 1.0);         }</code></p></li><li><p>为光属性传递值<code>cpp         lightingShader.setVec3("light.ambient",  0.2f, 0.2f, 0.2f);         lightingShader.setVec3("light.diffuse",  0.5f, 0.5f, 0.5f); // 将光照调暗了一些以搭配场景         lightingShader.setVec3("light.specular", 1.0f, 1.0f, 1.0f);</code></p></li><li><p>完整代码</p><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;glad/glad.h&gt;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;GLFW/glfw3.h&gt;</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;glm/glm.hpp&gt;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;glm/gtc/matrix_transform.hpp&gt;</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;glm/gtc/type_ptr.hpp&gt;</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;shader_m.h&gt;</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;camera.h&gt;</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">);</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">);</span></span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">);</span></span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">);</span></span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">// settings</span></span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">unsigned</span> <span class="dt">int</span> SCR_WIDTH <span class="op">=</span> <span class="dv">800</span><span class="op">;</span></span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">unsigned</span> <span class="dt">int</span> SCR_HEIGHT <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>    <span class="co">// camera</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>    Camera camera<span class="op">(</span>glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">3.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> lastX <span class="op">=</span> SCR_WIDTH <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> lastY <span class="op">=</span> SCR_HEIGHT <span class="op">/</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> firstMouse <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a>    <span class="co">// timing</span></span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> deltaTime <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> lastFrame <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>    <span class="co">// lighting</span></span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec3 lightPos<span class="op">(</span><span class="fl">1.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">()</span></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a>        <span class="co">// glfw: initialize and configure</span></span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ------------------------------</span></span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a>        glfwInit<span class="op">();</span></span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#ifdef __APPLE__</span></span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GL_TRUE<span class="op">);</span></span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>        <span class="co">// glfw window creation</span></span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>        <span class="co">// --------------------</span></span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>        GLFWwindow<span class="op">*</span> window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>SCR_WIDTH<span class="op">,</span> SCR_HEIGHT<span class="op">,</span> <span class="st">"LearnOpenGL"</span><span class="op">,</span> NULL<span class="op">,</span> NULL<span class="op">);</span></span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> NULL<span class="op">)</span></span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-54"><a href="#cb5-54" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb5-55"><a href="#cb5-55" aria-hidden="true" tabindex="-1"></a>            glfwTerminate<span class="op">();</span></span><span id="cb5-56"><a href="#cb5-56" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span><span id="cb5-57"><a href="#cb5-57" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-58"><a href="#cb5-58" aria-hidden="true" tabindex="-1"></a>        glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb5-59"><a href="#cb5-59" aria-hidden="true" tabindex="-1"></a>        glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb5-60"><a href="#cb5-60" aria-hidden="true" tabindex="-1"></a>        glfwSetCursorPosCallback<span class="op">(</span>window<span class="op">,</span> mouse_callback<span class="op">);</span></span><span id="cb5-61"><a href="#cb5-61" aria-hidden="true" tabindex="-1"></a>        glfwSetScrollCallback<span class="op">(</span>window<span class="op">,</span> scroll_callback<span class="op">);</span></span><span id="cb5-62"><a href="#cb5-62" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-63"><a href="#cb5-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">// tell GLFW to capture our mouse</span></span><span id="cb5-64"><a href="#cb5-64" aria-hidden="true" tabindex="-1"></a>        glfwSetInputMode<span class="op">(</span>window<span class="op">,</span> GLFW_CURSOR<span class="op">,</span> GLFW_CURSOR_DISABLED<span class="op">);</span></span><span id="cb5-65"><a href="#cb5-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-66"><a href="#cb5-66" aria-hidden="true" tabindex="-1"></a>        <span class="co">// glad: load all OpenGL function pointers</span></span><span id="cb5-67"><a href="#cb5-67" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ---------------------------------------</span></span><span id="cb5-68"><a href="#cb5-68" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb5-69"><a href="#cb5-69" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-70"><a href="#cb5-70" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb5-71"><a href="#cb5-71" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="op">-</span><span class="dv">1</span><span class="op">;</span></span><span id="cb5-72"><a href="#cb5-72" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-73"><a href="#cb5-73" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-74"><a href="#cb5-74" aria-hidden="true" tabindex="-1"></a>        <span class="co">//xx</span></span><span id="cb5-75"><a href="#cb5-75" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> SCR_WIDTH<span class="op">,</span> SCR_WIDTH<span class="op">);</span></span><span id="cb5-76"><a href="#cb5-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-77"><a href="#cb5-77" aria-hidden="true" tabindex="-1"></a>        <span class="co">// configure global opengl state</span></span><span id="cb5-78"><a href="#cb5-78" aria-hidden="true" tabindex="-1"></a>        <span class="co">// -----------------------------</span></span><span id="cb5-79"><a href="#cb5-79" aria-hidden="true" tabindex="-1"></a>        glEnable<span class="op">(</span>GL_DEPTH_TEST<span class="op">);</span></span><span id="cb5-80"><a href="#cb5-80" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-81"><a href="#cb5-81" aria-hidden="true" tabindex="-1"></a>        <span class="co">// build and compile our shader zprogram</span></span><span id="cb5-82"><a href="#cb5-82" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ------------------------------------</span></span><span id="cb5-83"><a href="#cb5-83" aria-hidden="true" tabindex="-1"></a>        Shader lightingShader<span class="op">(</span><span class="st">"res/shaders/light_object_material.vs"</span><span class="op">,</span> <span class="st">"res/shaders/light_object_material.fs"</span><span class="op">);</span></span><span id="cb5-84"><a href="#cb5-84" aria-hidden="true" tabindex="-1"></a>        Shader lightCubeShader<span class="op">(</span><span class="st">"res/shaders/cube.vs"</span><span class="op">,</span> <span class="st">"res/shaders/white.fs"</span><span class="op">);</span></span><span id="cb5-85"><a href="#cb5-85" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-86"><a href="#cb5-86" aria-hidden="true" tabindex="-1"></a>        <span class="co">// set up vertex data (and buffer(s)) and configure vertex attributes</span></span><span id="cb5-87"><a href="#cb5-87" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ------------------------------------------------------------------</span></span><span id="cb5-88"><a href="#cb5-88" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb5-89"><a href="#cb5-89" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-90"><a href="#cb5-90" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-91"><a href="#cb5-91" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-92"><a href="#cb5-92" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-93"><a href="#cb5-93" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-94"><a href="#cb5-94" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-95"><a href="#cb5-95" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-96"><a href="#cb5-96" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-97"><a href="#cb5-97" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-98"><a href="#cb5-98" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-99"><a href="#cb5-99" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-100"><a href="#cb5-100" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-101"><a href="#cb5-101" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-102"><a href="#cb5-102" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-103"><a href="#cb5-103" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-104"><a href="#cb5-104" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-105"><a href="#cb5-105" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-106"><a href="#cb5-106" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-107"><a href="#cb5-107" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-108"><a href="#cb5-108" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-109"><a href="#cb5-109" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-110"><a href="#cb5-110" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-111"><a href="#cb5-111" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-112"><a href="#cb5-112" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-113"><a href="#cb5-113" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-114"><a href="#cb5-114" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-115"><a href="#cb5-115" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-116"><a href="#cb5-116" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-117"><a href="#cb5-117" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-118"><a href="#cb5-118" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-119"><a href="#cb5-119" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-120"><a href="#cb5-120" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-121"><a href="#cb5-121" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-122"><a href="#cb5-122" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-123"><a href="#cb5-123" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-124"><a href="#cb5-124" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-125"><a href="#cb5-125" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-126"><a href="#cb5-126" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-127"><a href="#cb5-127" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-128"><a href="#cb5-128" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb5-129"><a href="#cb5-129" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.0</span><span class="bu">f</span></span><span id="cb5-130"><a href="#cb5-130" aria-hidden="true" tabindex="-1"></a>        <span class="op">};</span></span><span id="cb5-131"><a href="#cb5-131" aria-hidden="true" tabindex="-1"></a>        <span class="co">// first, configure the cube's VAO (and VBO)</span></span><span id="cb5-132"><a href="#cb5-132" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> cubeVAO<span class="op">;</span></span><span id="cb5-133"><a href="#cb5-133" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb5-134"><a href="#cb5-134" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb5-135"><a href="#cb5-135" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-136"><a href="#cb5-136" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb5-137"><a href="#cb5-137" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb5-138"><a href="#cb5-138" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-139"><a href="#cb5-139" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb5-140"><a href="#cb5-140" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-141"><a href="#cb5-141" aria-hidden="true" tabindex="-1"></a>        <span class="co">// position attribute</span></span><span id="cb5-142"><a href="#cb5-142" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-143"><a href="#cb5-143" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-144"><a href="#cb5-144" aria-hidden="true" tabindex="-1"></a>        <span class="co">// normal attribute</span></span><span id="cb5-145"><a href="#cb5-145" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb5-146"><a href="#cb5-146" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb5-147"><a href="#cb5-147" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-148"><a href="#cb5-148" aria-hidden="true" tabindex="-1"></a>        <span class="co">// second, configure the light's VAO (VBO stays the same; the vertices are the same for the light object which is also a 3D cube)</span></span><span id="cb5-149"><a href="#cb5-149" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> lightCubeVAO<span class="op">;</span></span><span id="cb5-150"><a href="#cb5-150" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb5-151"><a href="#cb5-151" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb5-152"><a href="#cb5-152" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-153"><a href="#cb5-153" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb5-154"><a href="#cb5-154" aria-hidden="true" tabindex="-1"></a>        <span class="co">// note that we update the lamp's position attribute's stride to reflect the updated buffer data</span></span><span id="cb5-155"><a href="#cb5-155" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-156"><a href="#cb5-156" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-157"><a href="#cb5-157" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-158"><a href="#cb5-158" aria-hidden="true" tabindex="-1"></a>        <span class="co">// render loop</span></span><span id="cb5-159"><a href="#cb5-159" aria-hidden="true" tabindex="-1"></a>        <span class="co">// -----------</span></span><span id="cb5-160"><a href="#cb5-160" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb5-161"><a href="#cb5-161" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-162"><a href="#cb5-162" aria-hidden="true" tabindex="-1"></a>            <span class="co">// per-frame time logic</span></span><span id="cb5-163"><a href="#cb5-163" aria-hidden="true" tabindex="-1"></a>            <span class="co">// --------------------</span></span><span id="cb5-164"><a href="#cb5-164" aria-hidden="true" tabindex="-1"></a>            <span class="dt">float</span> currentFrame <span class="op">=</span> glfwGetTime<span class="op">();</span></span><span id="cb5-165"><a href="#cb5-165" aria-hidden="true" tabindex="-1"></a>            deltaTime <span class="op">=</span> currentFrame <span class="op">-</span> lastFrame<span class="op">;</span></span><span id="cb5-166"><a href="#cb5-166" aria-hidden="true" tabindex="-1"></a>            lastFrame <span class="op">=</span> currentFrame<span class="op">;</span></span><span id="cb5-167"><a href="#cb5-167" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-168"><a href="#cb5-168" aria-hidden="true" tabindex="-1"></a>            <span class="co">// input</span></span><span id="cb5-169"><a href="#cb5-169" aria-hidden="true" tabindex="-1"></a>            <span class="co">// -----</span></span><span id="cb5-170"><a href="#cb5-170" aria-hidden="true" tabindex="-1"></a>            processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb5-171"><a href="#cb5-171" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-172"><a href="#cb5-172" aria-hidden="true" tabindex="-1"></a>            <span class="co">// render</span></span><span id="cb5-173"><a href="#cb5-173" aria-hidden="true" tabindex="-1"></a>            <span class="co">// ------</span></span><span id="cb5-174"><a href="#cb5-174" aria-hidden="true" tabindex="-1"></a>            glClearColor<span class="op">(</span><span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-175"><a href="#cb5-175" aria-hidden="true" tabindex="-1"></a>            glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT <span class="op">|</span> GL_DEPTH_BUFFER_BIT<span class="op">);</span></span><span id="cb5-176"><a href="#cb5-176" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-177"><a href="#cb5-177" aria-hidden="true" tabindex="-1"></a>            <span class="co">// be sure to activate shader when setting uniforms/drawing objects</span></span><span id="cb5-178"><a href="#cb5-178" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb5-179"><a href="#cb5-179" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.position"</span><span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb5-180"><a href="#cb5-180" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"viewPos"</span><span class="op">,</span> camera<span class="op">.</span>Position<span class="op">);</span></span><span id="cb5-181"><a href="#cb5-181" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-182"><a href="#cb5-182" aria-hidden="true" tabindex="-1"></a>            <span class="co">// light properties</span></span><span id="cb5-183"><a href="#cb5-183" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>vec3 lightColor<span class="op">;</span></span><span id="cb5-184"><a href="#cb5-184" aria-hidden="true" tabindex="-1"></a>            lightColor<span class="op">.</span>x <span class="op">=</span> sin<span class="op">(</span>glfwGetTime<span class="op">()</span> <span class="op">*</span> <span class="fl">2.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-185"><a href="#cb5-185" aria-hidden="true" tabindex="-1"></a>            lightColor<span class="op">.</span>y <span class="op">=</span> sin<span class="op">(</span>glfwGetTime<span class="op">()</span> <span class="op">*</span> <span class="fl">0.7</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-186"><a href="#cb5-186" aria-hidden="true" tabindex="-1"></a>            lightColor<span class="op">.</span>z <span class="op">=</span> sin<span class="op">(</span>glfwGetTime<span class="op">()</span> <span class="op">*</span> <span class="fl">1.3</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-187"><a href="#cb5-187" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>vec3 diffuseColor <span class="op">=</span> lightColor <span class="op">*</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span> <span class="co">// decrease the influence</span></span><span id="cb5-188"><a href="#cb5-188" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>vec3 ambientColor <span class="op">=</span> diffuseColor <span class="op">*</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">);</span> <span class="co">// low influence</span></span><span id="cb5-189"><a href="#cb5-189" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.ambient"</span><span class="op">,</span> ambientColor<span class="op">);</span></span><span id="cb5-190"><a href="#cb5-190" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.diffuse"</span><span class="op">,</span> diffuseColor<span class="op">);</span></span><span id="cb5-191"><a href="#cb5-191" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"light.specular"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-192"><a href="#cb5-192" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-193"><a href="#cb5-193" aria-hidden="true" tabindex="-1"></a>            <span class="co">// material properties</span></span><span id="cb5-194"><a href="#cb5-194" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"material.ambient"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.31</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-195"><a href="#cb5-195" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"material.diffuse"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.31</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-196"><a href="#cb5-196" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"material.specular"</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">);</span> <span class="co">// specular lighting doesn't have full effect on this object's material</span></span><span id="cb5-197"><a href="#cb5-197" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setFloat<span class="op">(</span><span class="st">"material.shininess"</span><span class="op">,</span> <span class="fl">32.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-198"><a href="#cb5-198" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-199"><a href="#cb5-199" aria-hidden="true" tabindex="-1"></a>            <span class="co">// view/projection transformations</span></span><span id="cb5-200"><a href="#cb5-200" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>camera<span class="op">.</span>Zoom<span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>SCR_WIDTH <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>SCR_HEIGHT<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-201"><a href="#cb5-201" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 view <span class="op">=</span> camera<span class="op">.</span>GetViewMatrix<span class="op">();</span></span><span id="cb5-202"><a href="#cb5-202" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb5-203"><a href="#cb5-203" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb5-204"><a href="#cb5-204" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-205"><a href="#cb5-205" aria-hidden="true" tabindex="-1"></a>            <span class="co">// world transformation</span></span><span id="cb5-206"><a href="#cb5-206" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-207"><a href="#cb5-207" aria-hidden="true" tabindex="-1"></a>            lightingShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb5-208"><a href="#cb5-208" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-209"><a href="#cb5-209" aria-hidden="true" tabindex="-1"></a>            <span class="co">// render the cube</span></span><span id="cb5-210"><a href="#cb5-210" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>cubeVAO<span class="op">);</span></span><span id="cb5-211"><a href="#cb5-211" aria-hidden="true" tabindex="-1"></a>            glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb5-212"><a href="#cb5-212" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-213"><a href="#cb5-213" aria-hidden="true" tabindex="-1"></a>            <span class="co">// also draw the lamp object</span></span><span id="cb5-214"><a href="#cb5-214" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb5-215"><a href="#cb5-215" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb5-216"><a href="#cb5-216" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb5-217"><a href="#cb5-217" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb5-218"><a href="#cb5-218" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb5-219"><a href="#cb5-219" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>scale<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">));</span> <span class="co">// a smaller cube</span></span><span id="cb5-220"><a href="#cb5-220" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb5-221"><a href="#cb5-221" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-222"><a href="#cb5-222" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>lightCubeVAO<span class="op">);</span></span><span id="cb5-223"><a href="#cb5-223" aria-hidden="true" tabindex="-1"></a>            glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb5-224"><a href="#cb5-224" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-225"><a href="#cb5-225" aria-hidden="true" tabindex="-1"></a>            <span class="co">// glfw: swap buffers and poll IO events (keys pressed/released, mouse moved etc.)</span></span><span id="cb5-226"><a href="#cb5-226" aria-hidden="true" tabindex="-1"></a>            <span class="co">// -------------------------------------------------------------------------------</span></span><span id="cb5-227"><a href="#cb5-227" aria-hidden="true" tabindex="-1"></a>            glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb5-228"><a href="#cb5-228" aria-hidden="true" tabindex="-1"></a>            glfwPollEvents<span class="op">();</span></span><span id="cb5-229"><a href="#cb5-229" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-230"><a href="#cb5-230" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-231"><a href="#cb5-231" aria-hidden="true" tabindex="-1"></a>        <span class="co">// optional: de-allocate all resources once they've outlived their purpose:</span></span><span id="cb5-232"><a href="#cb5-232" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb5-233"><a href="#cb5-233" aria-hidden="true" tabindex="-1"></a>        glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>cubeVAO<span class="op">);</span></span><span id="cb5-234"><a href="#cb5-234" aria-hidden="true" tabindex="-1"></a>        glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightCubeVAO<span class="op">);</span></span><span id="cb5-235"><a href="#cb5-235" aria-hidden="true" tabindex="-1"></a>        glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb5-236"><a href="#cb5-236" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-237"><a href="#cb5-237" aria-hidden="true" tabindex="-1"></a>        <span class="co">// glfw: terminate, clearing all previously allocated GLFW resources.</span></span><span id="cb5-238"><a href="#cb5-238" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ------------------------------------------------------------------</span></span><span id="cb5-239"><a href="#cb5-239" aria-hidden="true" tabindex="-1"></a>        glfwTerminate<span class="op">();</span></span><span id="cb5-240"><a href="#cb5-240" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb5-241"><a href="#cb5-241" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-242"><a href="#cb5-242" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-243"><a href="#cb5-243" aria-hidden="true" tabindex="-1"></a>    <span class="co">// process all input: query GLFW whether relevant keys are pressed/released this frame and react accordingly</span></span><span id="cb5-244"><a href="#cb5-244" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ---------------------------------------------------------------------------------------------------------</span></span><span id="cb5-245"><a href="#cb5-245" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb5-246"><a href="#cb5-246" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-247"><a href="#cb5-247" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb5-248"><a href="#cb5-248" aria-hidden="true" tabindex="-1"></a>            glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb5-249"><a href="#cb5-249" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-250"><a href="#cb5-250" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_W<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb5-251"><a href="#cb5-251" aria-hidden="true" tabindex="-1"></a>            camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>FORWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb5-252"><a href="#cb5-252" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_S<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb5-253"><a href="#cb5-253" aria-hidden="true" tabindex="-1"></a>            camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>BACKWARD<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb5-254"><a href="#cb5-254" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_A<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb5-255"><a href="#cb5-255" aria-hidden="true" tabindex="-1"></a>            camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>LEFT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb5-256"><a href="#cb5-256" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_D<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb5-257"><a href="#cb5-257" aria-hidden="true" tabindex="-1"></a>            camera<span class="op">.</span>ProcessKeyboard<span class="op">(</span>RIGHT<span class="op">,</span> deltaTime<span class="op">);</span></span><span id="cb5-258"><a href="#cb5-258" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-259"><a href="#cb5-259" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-260"><a href="#cb5-260" aria-hidden="true" tabindex="-1"></a>    <span class="co">// glfw: whenever the window size changed (by OS or user resize) this callback function executes</span></span><span id="cb5-261"><a href="#cb5-261" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ---------------------------------------------------------------------------------------------</span></span><span id="cb5-262"><a href="#cb5-262" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb5-263"><a href="#cb5-263" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-264"><a href="#cb5-264" aria-hidden="true" tabindex="-1"></a>        <span class="co">// make sure the viewport matches the new window dimensions; note that width and </span></span><span id="cb5-265"><a href="#cb5-265" aria-hidden="true" tabindex="-1"></a>        <span class="co">// height will be significantly larger than specified on retina displays.</span></span><span id="cb5-266"><a href="#cb5-266" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb5-267"><a href="#cb5-267" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-268"><a href="#cb5-268" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-269"><a href="#cb5-269" aria-hidden="true" tabindex="-1"></a>    <span class="co">// glfw: whenever the mouse moves, this callback is called</span></span><span id="cb5-270"><a href="#cb5-270" aria-hidden="true" tabindex="-1"></a>    <span class="co">// -------------------------------------------------------</span></span><span id="cb5-271"><a href="#cb5-271" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">)</span></span><span id="cb5-272"><a href="#cb5-272" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-273"><a href="#cb5-273" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>firstMouse<span class="op">)</span></span><span id="cb5-274"><a href="#cb5-274" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb5-275"><a href="#cb5-275" aria-hidden="true" tabindex="-1"></a>            lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb5-276"><a href="#cb5-276" aria-hidden="true" tabindex="-1"></a>            lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb5-277"><a href="#cb5-277" aria-hidden="true" tabindex="-1"></a>            firstMouse <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb5-278"><a href="#cb5-278" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb5-279"><a href="#cb5-279" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-280"><a href="#cb5-280" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> xoffset <span class="op">=</span> xpos <span class="op">-</span> lastX<span class="op">;</span></span><span id="cb5-281"><a href="#cb5-281" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> yoffset <span class="op">=</span> lastY <span class="op">-</span> ypos<span class="op">;</span> <span class="co">// reversed since y-coordinates go from bottom to top</span></span><span id="cb5-282"><a href="#cb5-282" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-283"><a href="#cb5-283" aria-hidden="true" tabindex="-1"></a>        lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb5-284"><a href="#cb5-284" aria-hidden="true" tabindex="-1"></a>        lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb5-285"><a href="#cb5-285" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-286"><a href="#cb5-286" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessMouseMovement<span class="op">(</span>xoffset<span class="op">,</span> yoffset<span class="op">);</span></span><span id="cb5-287"><a href="#cb5-287" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb5-288"><a href="#cb5-288" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-289"><a href="#cb5-289" aria-hidden="true" tabindex="-1"></a>    <span class="co">// glfw: whenever the mouse scroll wheel scrolls, this callback is called</span></span><span id="cb5-290"><a href="#cb5-290" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ----------------------------------------------------------------------</span></span><span id="cb5-291"><a href="#cb5-291" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">)</span></span><span id="cb5-292"><a href="#cb5-292" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb5-293"><a href="#cb5-293" aria-hidden="true" tabindex="-1"></a>        camera<span class="op">.</span>ProcessMouseScroll<span class="op">(</span>yoffset<span class="op">);</span></span><span id="cb5-294"><a href="#cb5-294" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/02-guang-zhao-bu-fen/2.ji-chu-guang-zhao/"/>
      <url>/2022/08/10/opengl/02-guang-zhao-bu-fen/2.ji-chu-guang-zhao/</url>
      
        <content type="html"><![CDATA[<h2 id="基础光照">基础光照</h2><blockquote><p><code>冯氏光照模型(Phong Lighting Model)</code></p><hr><p>现实世界的光照是极其复杂的，而且会受到诸多因素的影响，这是我们有限的计算能力所无法模拟的。因此OpenGL的光照使用的是简化的模型，对现实的情况进行近似，这样处理起来会更容易一些，而且看起来也差不多一样。这些光照模型都是基于我们对光的物理特性的理解。其中一个模型被称为<code>冯氏光照模型(Phong Lighting Model)</code>。冯氏光照模型的主要结构由3个分量组成：环境(Ambient)、漫反射(Diffuse)和镜面(Specular)光照。</p></blockquote><ol type="1"><li><p>环境光(Ambient Lighting) &gt;即使在黑暗的情况下，世界上通常也仍然有一些光亮（月亮、远处的光），所以物体几乎永远不会是完全黑暗的。为了模拟这个，我们会使用一个环境光照常量，它永远会给物体一些颜色。</p><p>光通常都不是来自于同一个光源，而是来自于我们周围分散的很多光源，即使它们可能并不是那么显而易见。光的一个属性是，它可以向很多方向发散并反弹，从而能够到达不是非常直接临近的点。所以，光能够在其它的表面上反射，对一个物体产生间接的影响。考虑到这种情况的算法叫做全局照明(GlobalIllumination)算法，但是这种算法既开销高昂又极其复杂。由于我们现在对那种又复杂又开销高昂的算法不是很感兴趣，所以我们将会先使用一个简化的全局照明模型，即环境光照。正如你在上一节所学到的，我们使用一个很小的常量（光照）颜色，添加到物体片段的最终颜色中，这样子的话即便场景中没有直接的光源也能看起来存在有一些发散的光。把环境光照添加到场景里非常简单。我们用光的颜色乘以一个很小的常量环境因子，再乘以物体的颜色，然后将最终结果作为片段的颜色：</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> ambientStrength <span class="op">=</span> <span class="fl">0.1</span><span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        vec3 ambient <span class="op">=</span> ambientStrength <span class="op">*</span> lightColor<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        vec3 result <span class="op">=</span> ambient <span class="op">*</span> objectColor<span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>result<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li><li><p>漫反射光照(Diffuse Lighting) &gt;模拟光源对物体的方向性影响(DirectionalImpact)。它是冯氏光照模型中视觉上最显著的分量。物体的某一部分越是正对着光源，它就会越亮。&gt; 主要计算在于 <code>光照方向</code>、<code>光照分量 dot(norm, lightDir)</code>、<code>非负数截断 max(xx, 0)</code>&gt;我们对norm和lightDir向量进行点乘，计算光源对当前片段实际的漫发射影响。结果值再乘以光的颜色，得到漫反射分量。两个向量之间的角度越大，漫反射分量就会越小<code>cpp         #version 330 core         out vec4 FragColor;         in vec3 Normal;           in vec3 FragPos;                   uniform vec3 lightPos;          uniform vec3 lightColor;         uniform vec3 objectColor;         void main()         {             // ambient             float ambientStrength = 0.1;             vec3 ambient = ambientStrength * lightColor;                         // diffuse              vec3 norm = normalize(Normal);             vec3 lightDir = normalize(lightPos - FragPos);             //点乘的集合意义，投影(分量)大小             float diff = max(dot(norm, lightDir), 0.0);             vec3 diffuse = diff * lightColor;                                vec3 result = (ambient + diffuse) * objectColor;             FragColor = vec4(result, 1.0);         }</code><code>//不等比的缩放会导致原本的法线不再垂直于表面，此时需要法线矩阵来修复         Normal = mat3(transpose(inverse(model))) * aNormal;</code></p></li><li><p>镜面光照(SpecularLighting)：模拟有光泽物体上面出现的亮点。镜面光照的颜色相比于物体的颜色会更倾向于光的颜色。</p><blockquote><p>和漫反射光照一样，镜面光照也是依据光的方向向量和物体的法向量来决定的，但是它也依赖于观察方向，例如玩家是从什么方向看着这个片段的。镜面光照是基于光的反射特性。如果我们想象物体表面像一面镜子一样，那么，无论我们从哪里去看那个表面所反射的光，镜面光照都会达到最大化<code>观察点通常使用相机的位置</code>，和<code>漫反射</code>类似，只是镜面光照是反射光在观察方向的分量</p></blockquote><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    out vec4 FragColor<span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    in vec3 Normal<span class="op">;</span>  </span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    in vec3 FragPos<span class="op">;</span>          </span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    uniform vec3 lightPos<span class="op">;</span> </span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    uniform vec3 viewPos<span class="op">;</span> </span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    uniform vec3 lightColor<span class="op">;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    uniform vec3 objectColor<span class="op">;</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    uniform <span class="dt">float</span> specularStrengthPow<span class="op">;</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ambient</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> ambientStrength <span class="op">=</span> <span class="fl">0.1</span><span class="op">;</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        vec3 ambient <span class="op">=</span> ambientStrength <span class="op">*</span> lightColor<span class="op">;</span>            </span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>        <span class="co">// diffuse </span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        vec3 norm <span class="op">=</span> normalize<span class="op">(</span>Normal<span class="op">);</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        vec3 lightDir <span class="op">=</span> normalize<span class="op">(</span>lightPos <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> diff <span class="op">=</span> max<span class="op">(</span>dot<span class="op">(</span>norm<span class="op">,</span> lightDir<span class="op">),</span> <span class="fl">0.0</span><span class="op">);</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        vec3 diffuse <span class="op">=</span> diff <span class="op">*</span> lightColor<span class="op">;</span>           </span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        <span class="co">// specular</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> specularStrength <span class="op">=</span> <span class="fl">0.5</span><span class="op">;</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>        vec3 viewDir <span class="op">=</span> normalize<span class="op">(</span>viewPos <span class="op">-</span> FragPos<span class="op">);</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>        vec3 reflectDir <span class="op">=</span> reflect<span class="op">(-</span>lightDir<span class="op">,</span> norm<span class="op">);</span>  </span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> spec <span class="op">=</span> pow<span class="op">(</span>max<span class="op">(</span>dot<span class="op">(</span>viewDir<span class="op">,</span> reflectDir<span class="op">),</span> <span class="fl">0.0</span><span class="op">),</span> <span class="dv">256</span><span class="op">);</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        vec3 specular <span class="op">=</span> specularStrength <span class="op">*</span> spec <span class="op">*</span> lightColor<span class="op">;</span>               </span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>        vec3 result <span class="op">=</span> <span class="op">(</span>ambient <span class="op">+</span> diffuse <span class="op">+</span> specular<span class="op">)</span> <span class="op">*</span> objectColor<span class="op">;</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">//vec3 result = (ambient + diffuse ) * objectColor;</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>        <span class="co">//vec3 result = specular* objectColor;</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>        <span class="co">//vec3 result = objectColor;</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> vec4<span class="op">(</span>result<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span> </span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/02-guang-zhao-bu-fen/1.yan-se/"/>
      <url>/2022/08/10/opengl/02-guang-zhao-bu-fen/1.yan-se/</url>
      
        <content type="html"><![CDATA[<h2 id="光照基础之颜色">光照基础之颜色</h2><blockquote><ol type="1"><li>主要使用颜色叠加效果，<code>最终输出颜色 = 物体颜色* 光照颜色</code></li><li>使用已有的VBO绘制光源立方体。</li></ol></blockquote><ol type="1"><li><p>被光照影响的物体使用的Shader</p><ol type="1"><li><p>顶点Shader没有变化，只有transform<code>cpp          #version 330 core          layout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0          uniform mat4 model;          uniform mat4 view;          uniform mat4 projection;          void main()          {              gl_Position = projection * view * model * vec4(aPos, 1.0);           }</code></p></li><li><p>主要变化在片元Shader<code>cpp          #version 330 core          out vec4 FragColor;          uniform vec3 objectColor;          uniform vec3 lightColor;          void main()          {              // 使用乘法颜色叠加， alpha先固定为 1.0              FragColor = vec4(lightColor * objectColor, 1.0);          }</code></p></li><li><p>传递颜色值<code>cpp          objectShader.use();          objectShader.setVec3("objectColor", 1.0f, 0.5f, 0.31f);          objectShader.setVec3("lightColor", lightColor);</code></p></li><li><p>调用渲染指令，则会渲染出叠加颜色的物体。</p></li></ol></li><li><p>渲染光源物体,(不是必须的，渲染出光源物体方便调试光源参数) &gt;作为普通物体的渲染，颜色、变换、等 &gt;位置注意要在<code>视椎体</code>内</p></li><li><p>完整代码</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//图片库</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">//glm OpenGL Math库</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/glm.hpp"</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/gtc/matrix_transform.hpp"</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/gtc/type_ptr.hpp"</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"shader.h"</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec3 cameraPos <span class="op">=</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">3.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec3 cameraFront <span class="op">=</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    glm<span class="op">::</span>vec3 cameraUp <span class="op">=</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> cameraSpeed <span class="op">=</span> <span class="fl">0.05</span><span class="bu">f</span><span class="op">;</span> <span class="co">// adjust accordingly</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> deltaTime <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span> <span class="co">// 当前帧与上一帧的时间差</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> lastFrame <span class="op">=</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">;</span> <span class="co">// 上一帧的时间</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> lastX <span class="op">=</span> <span class="dv">400</span><span class="op">,</span> lastY <span class="op">=</span> <span class="dv">300</span><span class="op">;</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> yaw <span class="op">=</span> <span class="dv">0</span><span class="op">,</span> pitch <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">bool</span> firstMouse <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> fov <span class="op">=</span> <span class="fl">45.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    <span class="co">//立方体顶点</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>         <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span></span><span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>            glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> cameraSpeed <span class="op">=</span> <span class="fl">2.5</span><span class="bu">f</span> <span class="op">*</span> deltaTime<span class="op">;</span></span><span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_W<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>            cameraPos <span class="op">+=</span> cameraSpeed <span class="op">*</span> cameraFront<span class="op">;</span></span><span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_S<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>            cameraPos <span class="op">-=</span> cameraSpeed <span class="op">*</span> cameraFront<span class="op">;</span></span><span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_A<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>            cameraPos <span class="op">-=</span> glm<span class="op">::</span>normalize<span class="op">(</span>glm<span class="op">::</span>cross<span class="op">(</span>cameraFront<span class="op">,</span> cameraUp<span class="op">))</span> <span class="op">*</span> cameraSpeed<span class="op">;</span></span><span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_D<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>            cameraPos <span class="op">+=</span> glm<span class="op">::</span>normalize<span class="op">(</span>glm<span class="op">::</span>cross<span class="op">(</span>cameraFront<span class="op">,</span> cameraUp<span class="op">))</span> <span class="op">*</span> cameraSpeed<span class="op">;</span></span><span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> mouse_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xpos<span class="op">,</span> <span class="dt">double</span> ypos<span class="op">)</span></span><span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>firstMouse<span class="op">)</span></span><span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>            lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>            lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>            firstMouse <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> xoffset <span class="op">=</span> xpos <span class="op">-</span> lastX<span class="op">;</span></span><span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> yoffset <span class="op">=</span> lastY <span class="op">-</span> ypos<span class="op">;</span></span><span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>        lastX <span class="op">=</span> xpos<span class="op">;</span></span><span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>        lastY <span class="op">=</span> ypos<span class="op">;</span></span><span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>        <span class="dt">float</span> sensitivity <span class="op">=</span> <span class="fl">0.05</span><span class="op">;</span></span><span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>        xoffset <span class="op">*=</span> sensitivity<span class="op">;</span></span><span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>        yoffset <span class="op">*=</span> sensitivity<span class="op">;</span></span><span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>        yaw <span class="op">+=</span> xoffset<span class="op">;</span></span><span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>        pitch <span class="op">+=</span> yoffset<span class="op">;</span></span><span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>pitch <span class="op">&gt;</span> <span class="fl">89.0</span><span class="bu">f</span><span class="op">)</span></span><span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>            pitch <span class="op">=</span> <span class="fl">89.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>pitch <span class="op">&lt;</span> <span class="op">-</span><span class="fl">89.0</span><span class="bu">f</span><span class="op">)</span></span><span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a>            pitch <span class="op">=</span> <span class="op">-</span><span class="fl">89.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3 front<span class="op">;</span></span><span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>        front<span class="op">.</span>x <span class="op">=</span> cos<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>yaw<span class="op">))</span> <span class="op">*</span> cos<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>pitch<span class="op">));</span></span><span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>        front<span class="op">.</span>y <span class="op">=</span> sin<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>pitch<span class="op">));</span></span><span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>        front<span class="op">.</span>z <span class="op">=</span> sin<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>yaw<span class="op">))</span> <span class="op">*</span> cos<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>pitch<span class="op">));</span></span><span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>        cameraFront <span class="op">=</span> glm<span class="op">::</span>normalize<span class="op">(</span>front<span class="op">);</span></span><span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> scroll_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">double</span> xoffset<span class="op">,</span> <span class="dt">double</span> yoffset<span class="op">)</span></span><span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>fov <span class="op">&gt;=</span> <span class="fl">1.0</span><span class="bu">f</span> <span class="op">&amp;&amp;</span> fov <span class="op">&lt;=</span> <span class="fl">45.0</span><span class="bu">f</span><span class="op">)</span></span><span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>            fov <span class="op">-=</span> yoffset<span class="op">;</span></span><span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>fov <span class="op">&lt;=</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">)</span></span><span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a>            fov <span class="op">=</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>fov <span class="op">&gt;=</span> <span class="fl">45.0</span><span class="bu">f</span><span class="op">)</span></span><span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a>            fov <span class="op">=</span> <span class="fl">45.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">()</span></span><span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 初始化</span></span><span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 基本设置</span></span><span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if __APPLE__</span></span><span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 创建窗口</span></span><span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a>        GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a>        <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a>        glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>        <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb1-172"><a href="#cb1-172" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb1-173"><a href="#cb1-173" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-174"><a href="#cb1-174" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb1-175"><a href="#cb1-175" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb1-176"><a href="#cb1-176" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb1-177"><a href="#cb1-177" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-178"><a href="#cb1-178" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-179"><a href="#cb1-179" aria-hidden="true" tabindex="-1"></a>        <span class="co">//6. 设置视口</span></span><span id="cb1-180"><a href="#cb1-180" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb1-181"><a href="#cb1-181" aria-hidden="true" tabindex="-1"></a>        <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb1-182"><a href="#cb1-182" aria-hidden="true" tabindex="-1"></a>        glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb1-183"><a href="#cb1-183" aria-hidden="true" tabindex="-1"></a>        glfwSetInputMode<span class="op">(</span>window<span class="op">,</span> GLFW_CURSOR<span class="op">,</span> GLFW_CURSOR_DISABLED<span class="op">);</span></span><span id="cb1-184"><a href="#cb1-184" aria-hidden="true" tabindex="-1"></a>        glfwSetCursorPosCallback<span class="op">(</span>window<span class="op">,</span> mouse_callback<span class="op">);</span></span><span id="cb1-185"><a href="#cb1-185" aria-hidden="true" tabindex="-1"></a>        glfwSetScrollCallback<span class="op">(</span>window<span class="op">,</span> scroll_callback<span class="op">);</span></span><span id="cb1-186"><a href="#cb1-186" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-187"><a href="#cb1-187" aria-hidden="true" tabindex="-1"></a>        Shader objectShader<span class="op">(</span><span class="st">"res/shaders/sample_vertex_light_color.shader"</span><span class="op">,</span> <span class="st">"res/shaders/sample_fragment_light_color.shader"</span><span class="op">);</span></span><span id="cb1-188"><a href="#cb1-188" aria-hidden="true" tabindex="-1"></a>        Shader lightCubeShader<span class="op">(</span><span class="st">"res/shaders/sample_vertex_light_color.shader"</span><span class="op">,</span> <span class="st">"res/shaders/sample_fragment_light.shader"</span><span class="op">);</span></span><span id="cb1-189"><a href="#cb1-189" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-190"><a href="#cb1-190" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-191"><a href="#cb1-191" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> VAO<span class="op">,</span> lightVAO<span class="op">;</span></span><span id="cb1-192"><a href="#cb1-192" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb1-193"><a href="#cb1-193" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb1-194"><a href="#cb1-194" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-195"><a href="#cb1-195" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb1-196"><a href="#cb1-196" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb1-197"><a href="#cb1-197" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb1-198"><a href="#cb1-198" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-199"><a href="#cb1-199" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb1-200"><a href="#cb1-200" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-201"><a href="#cb1-201" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-202"><a href="#cb1-202" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-203"><a href="#cb1-203" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>lightVAO<span class="op">);</span></span><span id="cb1-204"><a href="#cb1-204" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>lightVAO<span class="op">);</span></span><span id="cb1-205"><a href="#cb1-205" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-206"><a href="#cb1-206" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb1-207"><a href="#cb1-207" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span>GL_FLOAT<span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">0</span><span class="op">));</span></span><span id="cb1-208"><a href="#cb1-208" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-209"><a href="#cb1-209" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-210"><a href="#cb1-210" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-211"><a href="#cb1-211" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-212"><a href="#cb1-212" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-213"><a href="#cb1-213" aria-hidden="true" tabindex="-1"></a>        <span class="co">/*glm::vec3 cubePositions[] = {</span></span><span id="cb1-214"><a href="#cb1-214" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(0.0f,  0.0f,  0.0f),</span></span><span id="cb1-215"><a href="#cb1-215" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(2.0f,  5.0f, -15.0f),</span></span><span id="cb1-216"><a href="#cb1-216" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(-1.5f, -2.2f, -2.5f),</span></span><span id="cb1-217"><a href="#cb1-217" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(-3.8f, -2.0f, -12.3f),</span></span><span id="cb1-218"><a href="#cb1-218" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(2.4f, -0.4f, -3.5f),</span></span><span id="cb1-219"><a href="#cb1-219" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(-1.7f,  3.0f, -7.5f),</span></span><span id="cb1-220"><a href="#cb1-220" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(1.3f, -2.0f, -2.5f),</span></span><span id="cb1-221"><a href="#cb1-221" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(1.5f,  2.0f, -2.5f),</span></span><span id="cb1-222"><a href="#cb1-222" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(1.5f,  0.2f, -1.5f),</span></span><span id="cb1-223"><a href="#cb1-223" aria-hidden="true" tabindex="-1"></a><span class="co">          glm::vec3(-1.3f,  1.0f, -1.5f)</span></span><span id="cb1-224"><a href="#cb1-224" aria-hidden="true" tabindex="-1"></a><span class="co">        };*/</span></span><span id="cb1-225"><a href="#cb1-225" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-226"><a href="#cb1-226" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3 lightPos<span class="op">(</span><span class="fl">1.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">2.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-227"><a href="#cb1-227" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> rgbmax <span class="op">=</span> <span class="bn">0xffffff</span><span class="op">;</span></span><span id="cb1-228"><a href="#cb1-228" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> rgbmin <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-229"><a href="#cb1-229" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> rgb <span class="op">=</span> rgbmax<span class="op">;</span></span><span id="cb1-230"><a href="#cb1-230" aria-hidden="true" tabindex="-1"></a>        <span class="dt">bool</span> sub <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-231"><a href="#cb1-231" aria-hidden="true" tabindex="-1"></a>        glm<span class="op">::</span>vec3 lightColor<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-232"><a href="#cb1-232" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb1-233"><a href="#cb1-233" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-234"><a href="#cb1-234" aria-hidden="true" tabindex="-1"></a>            processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb1-235"><a href="#cb1-235" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-236"><a href="#cb1-236" aria-hidden="true" tabindex="-1"></a>            glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-237"><a href="#cb1-237" aria-hidden="true" tabindex="-1"></a>            glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT <span class="op">|</span> GL_DEPTH_BUFFER_BIT<span class="op">);</span></span><span id="cb1-238"><a href="#cb1-238" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-239"><a href="#cb1-239" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-240"><a href="#cb1-240" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 view <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-241"><a href="#cb1-241" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-242"><a href="#cb1-242" aria-hidden="true" tabindex="-1"></a>            view <span class="op">=</span> glm<span class="op">::</span>lookAt<span class="op">(</span>cameraPos<span class="op">,</span> cameraPos <span class="op">+</span> cameraFront<span class="op">,</span> cameraUp<span class="op">);</span></span><span id="cb1-243"><a href="#cb1-243" aria-hidden="true" tabindex="-1"></a>            projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span>fov<span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wWidth <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wHeight<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-244"><a href="#cb1-244" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-245"><a href="#cb1-245" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 model<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-246"><a href="#cb1-246" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-247"><a href="#cb1-247" aria-hidden="true" tabindex="-1"></a>            objectShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb1-248"><a href="#cb1-248" aria-hidden="true" tabindex="-1"></a>            objectShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"objectColor"</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.31</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-249"><a href="#cb1-249" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-250"><a href="#cb1-250" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>rgb <span class="op">&gt;=</span> rgbmax<span class="op">)</span></span><span id="cb1-251"><a href="#cb1-251" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-252"><a href="#cb1-252" aria-hidden="true" tabindex="-1"></a>                sub <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-253"><a href="#cb1-253" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-254"><a href="#cb1-254" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-255"><a href="#cb1-255" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>rgb <span class="op">&lt;</span> rgbmin<span class="op">)</span></span><span id="cb1-256"><a href="#cb1-256" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-257"><a href="#cb1-257" aria-hidden="true" tabindex="-1"></a>                sub <span class="op">=</span> <span class="kw">false</span><span class="op">;</span></span><span id="cb1-258"><a href="#cb1-258" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-259"><a href="#cb1-259" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-260"><a href="#cb1-260" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(</span>sub<span class="op">)</span></span><span id="cb1-261"><a href="#cb1-261" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-262"><a href="#cb1-262" aria-hidden="true" tabindex="-1"></a>                rgb <span class="op">-=</span> <span class="dv">4</span><span class="op">;</span></span><span id="cb1-263"><a href="#cb1-263" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-264"><a href="#cb1-264" aria-hidden="true" tabindex="-1"></a>            <span class="cf">else</span></span><span id="cb1-265"><a href="#cb1-265" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb1-266"><a href="#cb1-266" aria-hidden="true" tabindex="-1"></a>                rgb <span class="op">+=</span> <span class="dv">4</span><span class="op">;</span></span><span id="cb1-267"><a href="#cb1-267" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb1-268"><a href="#cb1-268" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> ir <span class="op">=</span> <span class="op">(</span>rgb <span class="op">&amp;</span> <span class="bn">0xff0000</span><span class="op">)</span> <span class="op">&gt;&gt;</span> <span class="dv">16</span><span class="op">;</span></span><span id="cb1-269"><a href="#cb1-269" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> ig <span class="op">=</span> <span class="op">(</span>rgb <span class="op">&amp;</span> <span class="bn">0x00ff00</span><span class="op">)</span> <span class="op">&gt;&gt;</span> <span class="dv">8</span><span class="op">;</span></span><span id="cb1-270"><a href="#cb1-270" aria-hidden="true" tabindex="-1"></a>            <span class="dt">int</span> ib <span class="op">=</span> <span class="op">(</span>rgb <span class="op">&amp;</span> <span class="bn">0x0000ff</span><span class="op">);</span></span><span id="cb1-271"><a href="#cb1-271" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-272"><a href="#cb1-272" aria-hidden="true" tabindex="-1"></a>            <span class="co">//std::cout &lt;&lt; rgb&lt;&lt;"\t"&lt;&lt;ir&lt;&lt; "\t" &lt;&lt; ig &lt;&lt; "\t" &lt;&lt; ib &lt;&lt;std::endl;</span></span><span id="cb1-273"><a href="#cb1-273" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-274"><a href="#cb1-274" aria-hidden="true" tabindex="-1"></a>            lightColor<span class="op">.</span>r <span class="op">=</span> ir <span class="op">/</span> <span class="fl">255.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-275"><a href="#cb1-275" aria-hidden="true" tabindex="-1"></a>            lightColor<span class="op">.</span>b <span class="op">=</span> ib <span class="op">/</span> <span class="fl">255.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-276"><a href="#cb1-276" aria-hidden="true" tabindex="-1"></a>            lightColor<span class="op">.</span>g <span class="op">=</span> ig <span class="op">/</span> <span class="fl">255.0</span><span class="bu">f</span><span class="op">;</span></span><span id="cb1-277"><a href="#cb1-277" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-278"><a href="#cb1-278" aria-hidden="true" tabindex="-1"></a>            objectShader<span class="op">.</span>setVec3<span class="op">(</span><span class="st">"lightColor"</span><span class="op">,</span> lightColor<span class="op">);</span></span><span id="cb1-279"><a href="#cb1-279" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-280"><a href="#cb1-280" aria-hidden="true" tabindex="-1"></a>            objectShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb1-281"><a href="#cb1-281" aria-hidden="true" tabindex="-1"></a>            objectShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb1-282"><a href="#cb1-282" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-283"><a href="#cb1-283" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">));</span></span><span id="cb1-284"><a href="#cb1-284" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>rotate<span class="op">(</span>model<span class="op">,</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>glfwGetTime<span class="op">()</span> <span class="op">*</span> glm<span class="op">::</span>radians<span class="op">(</span><span class="fl">50.0</span><span class="bu">f</span><span class="op">),</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb1-285"><a href="#cb1-285" aria-hidden="true" tabindex="-1"></a>            objectShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb1-286"><a href="#cb1-286" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-287"><a href="#cb1-287" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb1-288"><a href="#cb1-288" aria-hidden="true" tabindex="-1"></a>            glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb1-289"><a href="#cb1-289" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-290"><a href="#cb1-290" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-291"><a href="#cb1-291" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>model<span class="op">,</span> lightPos<span class="op">);</span></span><span id="cb1-292"><a href="#cb1-292" aria-hidden="true" tabindex="-1"></a>            model <span class="op">=</span> glm<span class="op">::</span>scale<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">));</span></span><span id="cb1-293"><a href="#cb1-293" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-294"><a href="#cb1-294" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>use<span class="op">();</span></span><span id="cb1-295"><a href="#cb1-295" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb1-296"><a href="#cb1-296" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"view"</span><span class="op">,</span> view<span class="op">);</span></span><span id="cb1-297"><a href="#cb1-297" aria-hidden="true" tabindex="-1"></a>            lightCubeShader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"model"</span><span class="op">,</span> model<span class="op">);</span></span><span id="cb1-298"><a href="#cb1-298" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-299"><a href="#cb1-299" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>lightVAO<span class="op">);</span></span><span id="cb1-300"><a href="#cb1-300" aria-hidden="true" tabindex="-1"></a>            glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">36</span><span class="op">);</span></span><span id="cb1-301"><a href="#cb1-301" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-302"><a href="#cb1-302" aria-hidden="true" tabindex="-1"></a>            glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb1-303"><a href="#cb1-303" aria-hidden="true" tabindex="-1"></a>            glfwPollEvents<span class="op">();</span></span><span id="cb1-304"><a href="#cb1-304" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-305"><a href="#cb1-305" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-306"><a href="#cb1-306" aria-hidden="true" tabindex="-1"></a>        glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb1-307"><a href="#cb1-307" aria-hidden="true" tabindex="-1"></a>        glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb1-308"><a href="#cb1-308" aria-hidden="true" tabindex="-1"></a>        <span class="co">//glDeleteBuffers(1, &amp;EBO);</span></span><span id="cb1-309"><a href="#cb1-309" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-310"><a href="#cb1-310" aria-hidden="true" tabindex="-1"></a>    TERMINATE<span class="op">:</span></span><span id="cb1-311"><a href="#cb1-311" aria-hidden="true" tabindex="-1"></a>        glfwTerminate<span class="op">();</span></span><span id="cb1-312"><a href="#cb1-312" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-313"><a href="#cb1-313" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/8.she-xiang-ji/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/8.she-xiang-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="摄像机">摄像机</h2><blockquote><p>摄像机的引入控制view矩阵。同时可控制透视的fov视角。来模拟人的观察眼睛。因此可使用摄像机位置控制view， fov控制视角。使用欧拉角控制鼠标方向位置，因此要计算 yaw， pitch 1.摄像机方向，view方向</p></blockquote><pre><code>&gt; glm::lookAt( eye, center, up)```cpp    view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);```</code></pre><ol start="2" type="1"><li><p>透视矩阵构造 &gt; projection =glm::perspective(glm::radians(fov)/<em>fovy</em>/, aspect, near, far);&gt; fov 弧度 宽高使用显示区域的宽高，近裁剪面和远裁剪面</p></li><li><p>鼠标位置，鼠标滚轮控制缩放和位置。</p><ol type="1"><li>glfw 按键检测<ol type="1"><li>每帧 <code>glfwGetKey</code>获取按键状态处理<code>cpp      void processInput(GLFWwindow *window)      {          if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)              glfwSetWindowShouldClose(window, true);          float cameraSpeed = 2.5f * deltaTime;          if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)              cameraPos += cameraSpeed * cameraFront;          if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)              cameraPos -= cameraSpeed * cameraFront;          if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)              cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;          if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)              cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;      }</code></li></ol></li><li>鼠标位置检测<code>glfwSetCursorPosCallback(window, mouse_callback);</code><code>cpp          void mouse_callback(GLFWwindow* window, double xpos, double ypos)          {              if (firstMouse)              {                  lastX = xpos;                  lastY = ypos;                  firstMouse = false;              }              float xoffset = xpos - lastX;              float yoffset = lastY - ypos;              lastX = xpos;              lastY = ypos;              float sensitivity = 0.05;              xoffset *= sensitivity;              yoffset *= sensitivity;              yaw += xoffset;              pitch += yoffset;              if (pitch &gt; 89.0f)                  pitch = 89.0f;              if (pitch &lt; -89.0f)                  pitch = -89.0f;              glm::vec3 front;              front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));              front.y = sin(glm::radians(pitch));              front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));              cameraFront = glm::normalize(front);          }</code></li><li>鼠标滚轮检测<code>glfwSetScrollCallback(window, scroll_callback);</code><code>cpp          void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)          {              if (fov &gt;= 1.0f &amp;&amp; fov &lt;= 45.0f)                  fov -= yoffset;              if (fov &lt;= 1.0f)                  fov = 1.0f;              if (fov &gt;= 45.0f)                  fov = 45.0f;          }</code></li><li>鼠标焦点不显示光标<code>cpp          glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);</code></li></ol></li><li><p>应用于观察view矩阵和透视projection矩阵,就可以通过鼠标位置和滑轮控制 矩阵，使得图像移动。<code>cpp         view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);         projection = glm::perspective(glm::radians(fov), (float)wWidth / (float)wHeight, 0.1f, 100.0f);</code></p></li><li><p>完整代码<code>cpp         #include "glad/glad.h"         #include "GLFW/glfw3.h"         //图片库         #define STB_IMAGE_IMPLEMENTATION         #include "stb_image.h"         //glm OpenGL Math库         #include "glm/glm.hpp"         #include "glm/gtc/matrix_transform.hpp"         #include "glm/gtc/type_ptr.hpp"         #include "shader.h"         #include &lt;iostream&gt;         using namespace std;         const int wWidth = 800, wHeight = 600;         const char* wName = "LearnOpenGL";         glm::vec3 cameraPos = glm::vec3(0.0f, 0.0f, 3.0f);         glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, -1.0f);         glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);         float cameraSpeed = 0.05f; // adjust accordingly         float deltaTime = 0.0f; // 当前帧与上一帧的时间差         float lastFrame = 0.0f; // 上一帧的时间         float lastX = 400, lastY = 300;         float yaw = 0, pitch = 0;         bool firstMouse = true;         float fov = 45.0f;         //立方体顶点         float vertices[] = {             //一面             -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,              0.5f, -0.5f, -0.5f,  1.0f, 0.0f,              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,             -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,             -0.5f, -0.5f, -0.5f,  0.0f, 0.0f,             //一面             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,              0.5f, -0.5f,  0.5f,  1.0f, 0.0f,              0.5f,  0.5f,  0.5f,  1.0f, 1.0f,              0.5f,  0.5f,  0.5f,  1.0f, 1.0f,             -0.5f,  0.5f,  0.5f,  0.0f, 1.0f,             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,             //一面             -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,             -0.5f,  0.5f, -0.5f,  1.0f, 1.0f,             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,             -0.5f,  0.5f,  0.5f,  1.0f, 0.0f,             //一面              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,              0.5f, -0.5f, -0.5f,  0.0f, 1.0f,              0.5f, -0.5f, -0.5f,  0.0f, 1.0f,              0.5f, -0.5f,  0.5f,  0.0f, 0.0f,              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,             //一面             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,              0.5f, -0.5f, -0.5f,  1.0f, 1.0f,              0.5f, -0.5f,  0.5f,  1.0f, 0.0f,              0.5f, -0.5f,  0.5f,  1.0f, 0.0f,             -0.5f, -0.5f,  0.5f,  0.0f, 0.0f,             -0.5f, -0.5f, -0.5f,  0.0f, 1.0f,             //一面             -0.5f,  0.5f, -0.5f,  0.0f, 1.0f,              0.5f,  0.5f, -0.5f,  1.0f, 1.0f,              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,              0.5f,  0.5f,  0.5f,  1.0f, 0.0f,             -0.5f,  0.5f,  0.5f,  0.0f, 0.0f,             -0.5f,  0.5f, -0.5f,  0.0f, 1.0f         };         void framebuffer_size_callback(GLFWwindow* window, int width, int height)         {             glViewport(0, 0, width, height);         }         void processInput(GLFWwindow *window)         {             if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)                 glfwSetWindowShouldClose(window, true);             float cameraSpeed = 2.5f * deltaTime;             if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)                 cameraPos += cameraSpeed * cameraFront;             if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)                 cameraPos -= cameraSpeed * cameraFront;             if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)                 cameraPos -= glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;             if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)                 cameraPos += glm::normalize(glm::cross(cameraFront, cameraUp)) * cameraSpeed;         }         void mouse_callback(GLFWwindow* window, double xpos, double ypos)         {             if (firstMouse)             {                 lastX = xpos;                 lastY = ypos;                 firstMouse = false;             }             float xoffset = xpos - lastX;             float yoffset = lastY - ypos;             lastX = xpos;             lastY = ypos;             float sensitivity = 0.05;             xoffset *= sensitivity;             yoffset *= sensitivity;             yaw += xoffset;             pitch += yoffset;             if (pitch &gt; 89.0f)                 pitch = 89.0f;             if (pitch &lt; -89.0f)                 pitch = -89.0f;             glm::vec3 front;             front.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));             front.y = sin(glm::radians(pitch));             front.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));             cameraFront = glm::normalize(front);         }         void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)         {             if (fov &gt;= 1.0f &amp;&amp; fov &lt;= 45.0f)                 fov -= yoffset;             if (fov &lt;= 1.0f)                 fov = 1.0f;             if (fov &gt;= 45.0f)                 fov = 45.0f;         }         int main()         {             //1. 初始化             if (glfwInit() == GLFW_FALSE)             {                 cout &lt;&lt; "init glfw fail";                 return 1;             }             //2. 基本设置             glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);             glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);             glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);         #if __APPLE__             glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GLFW_TRUE);         #endif             //3. 创建窗口             GLFWwindow *window = glfwCreateWindow(wWidth, wHeight, wName, nullptr, nullptr);             if (window == nullptr)             {                 cout &lt;&lt; "Failed to create GLFW window";                 goto TERMINATE;                 //return 1;             }             //4. 当前主线程上下文窗口             glfwMakeContextCurrent(window);             //5. 使用glad管理OpenGL指针。             if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress))             {                 std::cout &lt;&lt; "Failed to initialize GLAD" &lt;&lt; std::endl;                 goto TERMINATE;                 //return 1;             }             //6. 设置视口             glViewport(0, 0, wWidth, wHeight);             //7. 设置resize回调，对应刷新视口             glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);             glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);             glfwSetCursorPosCallback(window, mouse_callback);             glfwSetScrollCallback(window, scroll_callback);             Shader shader("res/shaders/sample_vertex_mvp.shader", "res/shaders/sample_fragment_mvp.shader");             unsigned int VBO, VAO/*, EBO*/;             glGenVertexArrays(1, &amp;VAO);             glBindVertexArray(VAO);             glGenBuffers(1, &amp;VBO);             glBindBuffer(GL_ARRAY_BUFFER, VBO);             glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);             /*glGenBuffers(1, &amp;EBO);             glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);             glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);*/             //1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。             glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)0);             glEnableVertexAttribArray(0);             //2. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。             glVertexAttribPointer(2, 2, GL_FLOAT, GL_FALSE, 5 * sizeof(float), (void*)(3 * sizeof(float)));             glEnableVertexAttribArray(2);             glBindBuffer(GL_ARRAY_BUFFER, 0);             glBindVertexArray(0);             unsigned int texture1, texture2;             //加载贴图1             glGenTextures(1, &amp;texture1);             glBindTexture(GL_TEXTURE_2D, texture1);             // 设置 wrapping 参数             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);             // 设置  filtering 参数             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);             // 加载解析贴图文件             int width, height, nrChannels;             stbi_set_flip_vertically_on_load(true); // tell stb_image.h to flip loaded texture's on the y-axis.             unsigned char* data = stbi_load("./res/textures/container.jpg", &amp;width, &amp;height, &amp;nrChannels, 0);             if (data)             {                 //第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。                 glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGB, GL_UNSIGNED_BYTE, data);                 glGenerateMipmap(GL_TEXTURE_2D);             }             else             {                 std::cout &lt;&lt; "Failed to load texture" &lt;&lt; std::endl;             }             stbi_image_free(data);             //加载贴图2             glGenTextures(1, &amp;texture2);             glBindTexture(GL_TEXTURE_2D, texture2);             //  设置 wrapping 参数             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);             // 设置  filtering 参数             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);             glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);             // l加载解析贴图文件             data = stbi_load("./res/textures/awesomeface.png", &amp;width, &amp;height, &amp;nrChannels, 0);             if (data)             {                 //第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。                 glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, width, height, 0, GL_RGBA, GL_UNSIGNED_BYTE, data);                 glGenerateMipmap(GL_TEXTURE_2D);             }             else             {                 std::cout &lt;&lt; "Failed to load texture" &lt;&lt; std::endl;             }             stbi_image_free(data);             //指定采样器贴图储存的位置             shader.use();             shader.setInt("texture1", 0);             shader.setInt("texture2", 1);             glm::vec3 cubePositions[] = {               glm::vec3(0.0f,  0.0f,  0.0f),               glm::vec3(2.0f,  5.0f, -15.0f),               glm::vec3(-1.5f, -2.2f, -2.5f),               glm::vec3(-3.8f, -2.0f, -12.3f),               glm::vec3(2.4f, -0.4f, -3.5f),               glm::vec3(-1.7f,  3.0f, -7.5f),               glm::vec3(1.3f, -2.0f, -2.5f),               glm::vec3(1.5f,  2.0f, -2.5f),               glm::vec3(1.5f,  0.2f, -1.5f),               glm::vec3(-1.3f,  1.0f, -1.5f)                 };             lastFrame = glfwGetTime();             while (!glfwWindowShouldClose(window))             {                 float currentFrame = glfwGetTime();                 deltaTime = currentFrame - lastFrame;                 lastFrame = currentFrame;                 processInput(window);                 glClearColor(0.2f, 0.3f, 0.3f, 1.0f);                 glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);                 // bind Texture1                 glActiveTexture(GL_TEXTURE0);                 glBindTexture(GL_TEXTURE_2D, texture1);                 // bind Texture2                 glActiveTexture(GL_TEXTURE1);                 glBindTexture(GL_TEXTURE_2D, texture2);                 shader.use();                 glm::mat4 view = glm::mat4(1.0f);                 glm::mat4 projection = glm::mat4(1.0f);                 //view = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));                 view = glm::lookAt(cameraPos, cameraPos + cameraFront, cameraUp);                 projection = glm::perspective(glm::radians(fov), (float)wWidth / (float)wHeight, 0.1f, 100.0f);                 shader.setMat4("projection", projection);                 shader.setMat4("view", view);                 glBindVertexArray(VAO);                 glEnable(GL_DEPTH_TEST);                 for (size_t i = 0; i &lt; 10; i++)                 {                     glm::mat4 model(1.0f);                     model = glm::translate(model, cubePositions[i]);                     model = glm::rotate(model, (float)glfwGetTime() * glm::radians(50.0f), glm::vec3(0.5f, 1.0f, 0.0f));                     float angle = 20.0f * i;                     model = glm::rotate(model, glm::radians(angle), glm::vec3(1.0f, 0.3f, 0.5f));                     shader.setMat4("model", model);                     glDrawArrays(GL_TRIANGLES, 0, 36);                 }                 glfwSwapBuffers(window);                 glfwPollEvents();             }             glDeleteVertexArrays(1, &amp;VAO);             glDeleteBuffers(1, &amp;VBO);             //glDeleteBuffers(1, &amp;EBO);         TERMINATE:             glfwTerminate();             return 0;         }</code></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/7.li-fang-ti/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/7.li-fang-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="渲染立方体">渲染立方体</h2><blockquote><p>数学知识参考<a href="../3d数学/README.md">3d数学部分</a>渲染立方体需要6个面，12个三角形，同样每个顶点需要对应一个uv。</p></blockquote><ol type="1"><li><p>基础代码同上一节,绘制立方体代码,这里调用绘制36个顶点的代码（6个面= 12个三角形 = 36个顶点，虽然重用顶点，但是对于每次绘制的三角形而言还是3个顶点一个三角形）<code>cpp         glDrawArrays(GL_TRIANGLES, 0, 36);</code></p></li><li><p>同一份顶点、uv数据、贴图数据绘制多次，用于绘制多个不同物体。 &gt;只需要重复调用绘制函数，比如<code>glDrawArrays(GL_TRIANGLES, 0, 36);</code>.因为数据完全没有变化，所以绘制是重复的。 &gt;此时可以传递不同的位置、旋转等值然后在绘制。</p></li><li><p>Z缓冲&amp; 深度缓冲 &gt;OpenGL存储它的所有深度信息于一个Z缓冲(Z-buffer)中，也被称为深度缓冲(DepthBuffer)。GLFW会自动为你生成这样一个缓冲（就像它也有一个颜色缓冲来存储输出图像的颜色）。&gt;深度值存储在每个片段里面（作为片段的z值），当片段想要输出它的颜色时，OpenGL会将它的深度值和z缓冲进行比较，如果当前的片段在其它片段之后，它将会被丢弃，否则将会覆盖。&gt; 这个过程称为深度测试(Depth Testing)，它是由OpenGL自动完成的。</p><ol type="1"><li>开启深度测试</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>  glEnable<span class="op">(</span>GL_DEPTH_TEST<span class="op">);</span></span></code></pre></div><ol start="2" type="1"><li>因为开启了深度测试，每次渲染之前深度缓冲区，都保留了之前的深度缓冲，所以需要先清除掉<code>GL_DEPTH_BUFFER_BIT</code>。</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>  glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">|</span> GL_DEPTH_BUFFER_BIT<span class="op">);</span></span></code></pre></div></li><li><p>透视投影<br>正如你看到的那样，由于透视，这两条线在很远的地方看起来会相交。这正是透视投影想要模仿的效果，它是使用透视投影矩阵来完成的。这个投影矩阵将给定的平截头体范围映射到裁剪空间，除此之外还修改了每个顶点坐标的w值，从而使得离观察者越远的顶点坐标w分量越大。被变换到裁剪空间的坐标都会在-w到w的范围之间（任何大于这个范围的坐标都会被裁剪掉）。OpenGL要求所有可见的坐标都落在-1.0到1.0范围内，作为顶点着色器最后的输出，因此，一旦坐标在裁剪空间内之后，透视除法就会被应用到裁剪空间坐标上：glm内置透视投影函数 <code>glm::perspective</code><code>cpp         // fov, 宽高比， 近裁剪面，远裁剪面         projection = glm::perspective(glm::radians(45.0f), (float)wWidth / (float)wHeight, 0.1f, 100.0f);</code></p><p><span class="math display">\[     out = \left( x/w \\ y/w \\ z/w \right)\]</span></p></li><li><p>本地坐标转换到裁剪空间 <span class="math display">\[     V_{clip} = M_{projection}⋅M_{view}⋅M_{model}⋅V_{local}\]</span></p><p><strong>!!注意矩阵运算的顺序是相反的（记住我们需要从右往左阅读矩阵的乘法）。最后的顶点应该被赋值到顶点着色器中的gl_Position，OpenGL将会自动进行透视除法和裁剪。</strong></p></li><li><p>顶点Shader，接受<code>MVP</code><code>cpp         #version 330 core         layout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0         layout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为1         layout (location = 2) in vec2 aUv;  // uv变量的属性位置值为2         out vec3 vertexColor;   // 为片段着色器指定一个颜色输出         out vec2 uv;            // 为片段着色器指定一个uv         uniform mat4 model;         uniform mat4 view;         uniform mat4 projection;         void main()         {             //顶点乘以mvp， 转换到 projection空间， MVP相反顺序。             gl_Position = projection * view * model * vec4(aPos, 1.0); // 注意我们如何把一个vec3作为vec4的构造器的参数             vertexColor = aColor; // 把输出变量设置为暗红色             uv = aUv; // 把输出变量设置为暗红色         }</code></p></li><li><p>构造mvp矩阵，并传递值<code>cpp         //初始化矩阵变量         glm::mat4 model = glm::mat4(1.0f);          glm::mat4 view = glm::mat4(1.0f);         glm::mat4 projection = glm::mat4(1.0f);         //使模型矩阵沿着x轴向倾斜`-55`         model = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));         //观察矩阵 沿着 z平移 -3         view = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));         // 构造透视投影矩阵         projection = glm::perspective(glm::radians(45.0f), (float)wWidth / (float)wHeight, 0.1f, 100.0f);         //传递model 给shader         unsigned int modelLoc = glGetUniformLocation(shader.ID, "model");         glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));         //传递view 给shader         unsigned int viewLoc = glGetUniformLocation(shader.ID, "view");         glUniformMatrix4fv(viewLoc, 1, GL_FALSE, &amp;view[0][0]);         //传递view 给shader         unsigned int projectionLoc = glGetUniformLocation(shader.ID, "projection");         glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));         // 配合Shader的矩阵运算，至此图形已经有了透视效果。</code></p></li><li><p>完整代码</p><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>     <span class="co">//图片库</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>     <span class="co">//glm OpenGL Math库</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glm/glm.hpp"</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glm/gtc/matrix_transform.hpp"</span></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glm/gtc/type_ptr.hpp"</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"shader.h"</span></span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>     <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>     <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>     <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>     <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>         <span class="co">//位置                    // 基础颜色          // 题图uv</span></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>     <span class="op">};</span></span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>     <span class="dt">unsigned</span> <span class="dt">int</span> indices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>         <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>         <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a>     <span class="op">};</span></span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>     <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>         glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>     <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>             glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>     <span class="dt">int</span> main<span class="op">()</span></span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>         <span class="co">//1. 初始化</span></span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>             cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>             <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>         <span class="co">//2. 基本设置</span></span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#if __APPLE__</span></span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#endif</span></span><span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a>         <span class="co">//3. 创建窗口</span></span><span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a>         GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>             cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a>             <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a>             <span class="co">//return 1;</span></span><span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a>         <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb3-75"><a href="#cb3-75" aria-hidden="true" tabindex="-1"></a>         glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-76"><a href="#cb3-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-77"><a href="#cb3-77" aria-hidden="true" tabindex="-1"></a>         <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb3-78"><a href="#cb3-78" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb3-79"><a href="#cb3-79" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-80"><a href="#cb3-80" aria-hidden="true" tabindex="-1"></a>             <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb3-81"><a href="#cb3-81" aria-hidden="true" tabindex="-1"></a>             <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb3-82"><a href="#cb3-82" aria-hidden="true" tabindex="-1"></a>             <span class="co">//return 1;</span></span><span id="cb3-83"><a href="#cb3-83" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-84"><a href="#cb3-84" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-85"><a href="#cb3-85" aria-hidden="true" tabindex="-1"></a>         <span class="co">//6. 设置视口</span></span><span id="cb3-86"><a href="#cb3-86" aria-hidden="true" tabindex="-1"></a>         glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb3-87"><a href="#cb3-87" aria-hidden="true" tabindex="-1"></a>         <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb3-88"><a href="#cb3-88" aria-hidden="true" tabindex="-1"></a>         glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb3-89"><a href="#cb3-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-90"><a href="#cb3-90" aria-hidden="true" tabindex="-1"></a>         Shader shader<span class="op">(</span><span class="st">"res/shaders/sample_vertex_mvp.shader"</span><span class="op">,</span> <span class="st">"res/shaders/sample_fragment_mvp.shader"</span><span class="op">);</span></span><span id="cb3-91"><a href="#cb3-91" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-92"><a href="#cb3-92" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-93"><a href="#cb3-93" aria-hidden="true" tabindex="-1"></a>         <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> VAO<span class="op">,</span> EBO<span class="op">;</span></span><span id="cb3-94"><a href="#cb3-94" aria-hidden="true" tabindex="-1"></a>         glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb3-95"><a href="#cb3-95" aria-hidden="true" tabindex="-1"></a>         glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb3-96"><a href="#cb3-96" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-97"><a href="#cb3-97" aria-hidden="true" tabindex="-1"></a>         glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb3-98"><a href="#cb3-98" aria-hidden="true" tabindex="-1"></a>         glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb3-99"><a href="#cb3-99" aria-hidden="true" tabindex="-1"></a>         glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-100"><a href="#cb3-100" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-101"><a href="#cb3-101" aria-hidden="true" tabindex="-1"></a>         glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb3-102"><a href="#cb3-102" aria-hidden="true" tabindex="-1"></a>         glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> EBO<span class="op">);</span></span><span id="cb3-103"><a href="#cb3-103" aria-hidden="true" tabindex="-1"></a>         glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indices<span class="op">),</span> indices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb3-104"><a href="#cb3-104" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-105"><a href="#cb3-105" aria-hidden="true" tabindex="-1"></a>         <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb3-106"><a href="#cb3-106" aria-hidden="true" tabindex="-1"></a>         glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-107"><a href="#cb3-107" aria-hidden="true" tabindex="-1"></a>         glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-108"><a href="#cb3-108" aria-hidden="true" tabindex="-1"></a>         <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb3-109"><a href="#cb3-109" aria-hidden="true" tabindex="-1"></a>         glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-110"><a href="#cb3-110" aria-hidden="true" tabindex="-1"></a>         glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb3-111"><a href="#cb3-111" aria-hidden="true" tabindex="-1"></a>         <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb3-112"><a href="#cb3-112" aria-hidden="true" tabindex="-1"></a>         glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb3-113"><a href="#cb3-113" aria-hidden="true" tabindex="-1"></a>         glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb3-114"><a href="#cb3-114" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-115"><a href="#cb3-115" aria-hidden="true" tabindex="-1"></a>         glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-116"><a href="#cb3-116" aria-hidden="true" tabindex="-1"></a>         glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb3-117"><a href="#cb3-117" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-118"><a href="#cb3-118" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-119"><a href="#cb3-119" aria-hidden="true" tabindex="-1"></a>         <span class="dt">unsigned</span> <span class="dt">int</span> texture1<span class="op">,</span> texture2<span class="op">;</span></span><span id="cb3-120"><a href="#cb3-120" aria-hidden="true" tabindex="-1"></a>         <span class="co">//加载贴图1</span></span><span id="cb3-121"><a href="#cb3-121" aria-hidden="true" tabindex="-1"></a>         glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture1<span class="op">);</span></span><span id="cb3-122"><a href="#cb3-122" aria-hidden="true" tabindex="-1"></a>         glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb3-123"><a href="#cb3-123" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 设置 wrapping 参数</span></span><span id="cb3-124"><a href="#cb3-124" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb3-125"><a href="#cb3-125" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb3-126"><a href="#cb3-126" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 设置  filtering 参数</span></span><span id="cb3-127"><a href="#cb3-127" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb3-128"><a href="#cb3-128" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb3-129"><a href="#cb3-129" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 加载解析贴图文件</span></span><span id="cb3-130"><a href="#cb3-130" aria-hidden="true" tabindex="-1"></a>         <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrChannels<span class="op">;</span></span><span id="cb3-131"><a href="#cb3-131" aria-hidden="true" tabindex="-1"></a>         stbi_set_flip_vertically_on_load<span class="op">(</span><span class="kw">true</span><span class="op">);</span> <span class="co">// tell stb_image.h to flip loaded texture's on the y-axis.</span></span><span id="cb3-132"><a href="#cb3-132" aria-hidden="true" tabindex="-1"></a>         <span class="dt">unsigned</span> <span class="dt">char</span><span class="op">*</span> data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/container.jpg"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-133"><a href="#cb3-133" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb3-134"><a href="#cb3-134" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-135"><a href="#cb3-135" aria-hidden="true" tabindex="-1"></a>             <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb3-136"><a href="#cb3-136" aria-hidden="true" tabindex="-1"></a>             glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb3-137"><a href="#cb3-137" aria-hidden="true" tabindex="-1"></a>             glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb3-138"><a href="#cb3-138" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-139"><a href="#cb3-139" aria-hidden="true" tabindex="-1"></a>         <span class="cf">else</span></span><span id="cb3-140"><a href="#cb3-140" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-141"><a href="#cb3-141" aria-hidden="true" tabindex="-1"></a>             <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb3-142"><a href="#cb3-142" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-143"><a href="#cb3-143" aria-hidden="true" tabindex="-1"></a>         stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb3-144"><a href="#cb3-144" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-145"><a href="#cb3-145" aria-hidden="true" tabindex="-1"></a>         <span class="co">//加载贴图2</span></span><span id="cb3-146"><a href="#cb3-146" aria-hidden="true" tabindex="-1"></a>         glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture2<span class="op">);</span></span><span id="cb3-147"><a href="#cb3-147" aria-hidden="true" tabindex="-1"></a>         glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb3-148"><a href="#cb3-148" aria-hidden="true" tabindex="-1"></a>         <span class="co">//  设置 wrapping 参数</span></span><span id="cb3-149"><a href="#cb3-149" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb3-150"><a href="#cb3-150" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb3-151"><a href="#cb3-151" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 设置  filtering 参数</span></span><span id="cb3-152"><a href="#cb3-152" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb3-153"><a href="#cb3-153" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb3-154"><a href="#cb3-154" aria-hidden="true" tabindex="-1"></a>         <span class="co">// l加载解析贴图文件</span></span><span id="cb3-155"><a href="#cb3-155" aria-hidden="true" tabindex="-1"></a>         data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/awesomeface.png"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-156"><a href="#cb3-156" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb3-157"><a href="#cb3-157" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-158"><a href="#cb3-158" aria-hidden="true" tabindex="-1"></a>             <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb3-159"><a href="#cb3-159" aria-hidden="true" tabindex="-1"></a>             glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb3-160"><a href="#cb3-160" aria-hidden="true" tabindex="-1"></a>             glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb3-161"><a href="#cb3-161" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-162"><a href="#cb3-162" aria-hidden="true" tabindex="-1"></a>         <span class="cf">else</span></span><span id="cb3-163"><a href="#cb3-163" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-164"><a href="#cb3-164" aria-hidden="true" tabindex="-1"></a>             <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb3-165"><a href="#cb3-165" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-166"><a href="#cb3-166" aria-hidden="true" tabindex="-1"></a>         stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb3-167"><a href="#cb3-167" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-168"><a href="#cb3-168" aria-hidden="true" tabindex="-1"></a>         <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb3-169"><a href="#cb3-169" aria-hidden="true" tabindex="-1"></a>         shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-170"><a href="#cb3-170" aria-hidden="true" tabindex="-1"></a>         shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-171"><a href="#cb3-171" aria-hidden="true" tabindex="-1"></a>         shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture2"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb3-172"><a href="#cb3-172" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-173"><a href="#cb3-173" aria-hidden="true" tabindex="-1"></a>         <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb3-174"><a href="#cb3-174" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb3-175"><a href="#cb3-175" aria-hidden="true" tabindex="-1"></a>             processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-176"><a href="#cb3-176" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-177"><a href="#cb3-177" aria-hidden="true" tabindex="-1"></a>             glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-178"><a href="#cb3-178" aria-hidden="true" tabindex="-1"></a>             glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb3-179"><a href="#cb3-179" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-180"><a href="#cb3-180" aria-hidden="true" tabindex="-1"></a>             <span class="co">// bind Texture1</span></span><span id="cb3-181"><a href="#cb3-181" aria-hidden="true" tabindex="-1"></a>             glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb3-182"><a href="#cb3-182" aria-hidden="true" tabindex="-1"></a>             glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb3-183"><a href="#cb3-183" aria-hidden="true" tabindex="-1"></a>             <span class="co">// bind Texture2</span></span><span id="cb3-184"><a href="#cb3-184" aria-hidden="true" tabindex="-1"></a>             glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb3-185"><a href="#cb3-185" aria-hidden="true" tabindex="-1"></a>             glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb3-186"><a href="#cb3-186" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-187"><a href="#cb3-187" aria-hidden="true" tabindex="-1"></a>             shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb3-188"><a href="#cb3-188" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-189"><a href="#cb3-189" aria-hidden="true" tabindex="-1"></a>             glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span> </span><span id="cb3-190"><a href="#cb3-190" aria-hidden="true" tabindex="-1"></a>             glm<span class="op">::</span>mat4 view <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-191"><a href="#cb3-191" aria-hidden="true" tabindex="-1"></a>             glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-192"><a href="#cb3-192" aria-hidden="true" tabindex="-1"></a>             model <span class="op">=</span> glm<span class="op">::</span>rotate<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>radians<span class="op">(-</span><span class="fl">55.0</span><span class="bu">f</span><span class="op">),</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb3-193"><a href="#cb3-193" aria-hidden="true" tabindex="-1"></a>             view <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>view<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">3.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb3-194"><a href="#cb3-194" aria-hidden="true" tabindex="-1"></a>             projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span><span class="fl">45.0</span><span class="bu">f</span><span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wWidth <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wHeight<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-195"><a href="#cb3-195" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-196"><a href="#cb3-196" aria-hidden="true" tabindex="-1"></a>             <span class="dt">unsigned</span> <span class="dt">int</span> modelLoc <span class="op">=</span> glGetUniformLocation<span class="op">(</span>shader<span class="op">.</span>ID<span class="op">,</span> <span class="st">"model"</span><span class="op">);</span></span><span id="cb3-197"><a href="#cb3-197" aria-hidden="true" tabindex="-1"></a>             <span class="dt">unsigned</span> <span class="dt">int</span> viewLoc <span class="op">=</span> glGetUniformLocation<span class="op">(</span>shader<span class="op">.</span>ID<span class="op">,</span> <span class="st">"view"</span><span class="op">);</span></span><span id="cb3-198"><a href="#cb3-198" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-199"><a href="#cb3-199" aria-hidden="true" tabindex="-1"></a>             glUniformMatrix4fv<span class="op">(</span>modelLoc<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> GL_FALSE<span class="op">,</span> glm<span class="op">::</span>value_ptr<span class="op">(</span>model<span class="op">));</span></span><span id="cb3-200"><a href="#cb3-200" aria-hidden="true" tabindex="-1"></a>             glUniformMatrix4fv<span class="op">(</span>viewLoc<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="op">&amp;</span>view<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">]);</span></span><span id="cb3-201"><a href="#cb3-201" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-202"><a href="#cb3-202" aria-hidden="true" tabindex="-1"></a>             shader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb3-203"><a href="#cb3-203" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-204"><a href="#cb3-204" aria-hidden="true" tabindex="-1"></a>             glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb3-205"><a href="#cb3-205" aria-hidden="true" tabindex="-1"></a>             glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb3-206"><a href="#cb3-206" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-207"><a href="#cb3-207" aria-hidden="true" tabindex="-1"></a>             glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb3-208"><a href="#cb3-208" aria-hidden="true" tabindex="-1"></a>             glfwPollEvents<span class="op">();</span></span><span id="cb3-209"><a href="#cb3-209" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb3-210"><a href="#cb3-210" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-211"><a href="#cb3-211" aria-hidden="true" tabindex="-1"></a>         glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb3-212"><a href="#cb3-212" aria-hidden="true" tabindex="-1"></a>         glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb3-213"><a href="#cb3-213" aria-hidden="true" tabindex="-1"></a>         glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb3-214"><a href="#cb3-214" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-215"><a href="#cb3-215" aria-hidden="true" tabindex="-1"></a>     TERMINATE<span class="op">:</span></span><span id="cb3-216"><a href="#cb3-216" aria-hidden="true" tabindex="-1"></a>         glfwTerminate<span class="op">();</span></span><span id="cb3-217"><a href="#cb3-217" aria-hidden="true" tabindex="-1"></a>         <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb3-218"><a href="#cb3-218" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/6.zuo-biao-xi/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/6.zuo-biao-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="使用glm数学库">使用glm数学库</h2><blockquote><p>数学知识参考<a href="../3d数学/README.md">3d数学部分</a>glm::perspective 构造</p></blockquote><ol type="1"><li><p>正交投影<br>正射投影矩阵定义了一个类似立方体的平截头箱，它定义了一个裁剪空间，在这空间之外的顶点都会被裁剪掉。创建一个正射投影矩阵需要指定可见平截头体的宽、高和长度。在使用正射投影矩阵变换至裁剪空间之后处于这个平截头体内的所有坐标将不会被裁剪掉。它的平截头体看起来像一个容器：<br>上面的平截头体定义了可见的坐标，它由由宽、高、近(Near)平面和远(Far)平面所指定。任何出现在近平面之前或远平面之后的坐标都会被裁剪掉。正射平截头体直接将平截头体内部的所有坐标映射为标准化设备坐标，因为每个向量的w分量都没有进行改变；如果w分量等于1.0，透视除法则不会改变这个坐标。<br>glm内置正交投影函数 <code>glm::ortho</code>：</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>     glm<span class="op">::</span>ortho<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">800.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">600.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span></code></pre></div></li><li><p>透视投影<br>正如你看到的那样，由于透视，这两条线在很远的地方看起来会相交。这正是透视投影想要模仿的效果，它是使用透视投影矩阵来完成的。这个投影矩阵将给定的平截头体范围映射到裁剪空间，除此之外还修改了每个顶点坐标的w值，从而使得离观察者越远的顶点坐标w分量越大。被变换到裁剪空间的坐标都会在-w到w的范围之间（任何大于这个范围的坐标都会被裁剪掉）。OpenGL要求所有可见的坐标都落在-1.0到1.0范围内，作为顶点着色器最后的输出，因此，一旦坐标在裁剪空间内之后，透视除法就会被应用到裁剪空间坐标上：glm内置透视投影函数 <code>glm::perspective</code><code>cpp         // fov, 宽高比， 近裁剪面，远裁剪面         projection = glm::perspective(glm::radians(45.0f), (float)wWidth / (float)wHeight, 0.1f, 100.0f);</code></p><p><span class="math display">\[     out = \left( x/w \\ y/w \\ z/w \right)\]</span></p></li><li><p>本地坐标转换到裁剪空间 <span class="math display">\[     V_{clip} = M_{projection}⋅M_{view}⋅M_{model}⋅V_{local}\]</span></p><p><strong>!!注意矩阵运算的顺序是相反的（记住我们需要从右往左阅读矩阵的乘法）。最后的顶点应该被赋值到顶点着色器中的gl_Position，OpenGL将会自动进行透视除法和裁剪。</strong></p></li><li><p>顶点Shader，接受<code>MVP</code><code>cpp         #version 330 core         layout (location = 0) in vec3 aPos; // 位置变量的属性位置值为0         layout (location = 1) in vec3 aColor; // 颜色变量的属性位置值为1         layout (location = 2) in vec2 aUv;  // uv变量的属性位置值为2         out vec3 vertexColor;   // 为片段着色器指定一个颜色输出         out vec2 uv;            // 为片段着色器指定一个uv         uniform mat4 model;         uniform mat4 view;         uniform mat4 projection;         void main()         {             //顶点乘以mvp， 转换到 projection空间， MVP相反顺序。             gl_Position = projection * view * model * vec4(aPos, 1.0); // 注意我们如何把一个vec3作为vec4的构造器的参数             vertexColor = aColor; // 把输出变量设置为暗红色             uv = aUv; // 把输出变量设置为暗红色         }</code></p></li><li><p>构造mvp矩阵，并传递值<code>cpp         //初始化矩阵变量         glm::mat4 model = glm::mat4(1.0f);          glm::mat4 view = glm::mat4(1.0f);         glm::mat4 projection = glm::mat4(1.0f);         //使模型矩阵沿着x轴向倾斜`-55`         model = glm::rotate(model, glm::radians(-55.0f), glm::vec3(1.0f, 0.0f, 0.0f));         //观察矩阵 沿着 z平移 -3         view = glm::translate(view, glm::vec3(0.0f, 0.0f, -3.0f));         // 构造透视投影矩阵         projection = glm::perspective(glm::radians(45.0f), (float)wWidth / (float)wHeight, 0.1f, 100.0f);         //传递model 给shader         unsigned int modelLoc = glGetUniformLocation(shader.ID, "model");         glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(model));         //传递view 给shader         unsigned int viewLoc = glGetUniformLocation(shader.ID, "view");         glUniformMatrix4fv(viewLoc, 1, GL_FALSE, &amp;view[0][0]);         //传递view 给shader         unsigned int projectionLoc = glGetUniformLocation(shader.ID, "projection");         glUniformMatrix4fv(projectionLoc, 1, GL_FALSE, glm::value_ptr(projection));         // 配合Shader的矩阵运算，至此图形已经有了透视效果。</code></p></li><li><p>完整代码</p><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>     <span class="co">//图片库</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>     <span class="co">//glm OpenGL Math库</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glm/glm.hpp"</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glm/gtc/matrix_transform.hpp"</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"glm/gtc/type_ptr.hpp"</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">"shader.h"</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>     <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>     <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>     <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>     <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>         <span class="co">//位置                    // 基础颜色          // 题图uv</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>             <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>            <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>     <span class="op">};</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>     <span class="dt">unsigned</span> <span class="dt">int</span> indices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>         <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>         <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>     <span class="op">};</span></span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>     <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span><span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>         glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span><span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>     <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span><span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>             glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span><span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>     <span class="dt">int</span> main<span class="op">()</span></span><span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a>     <span class="op">{</span></span><span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a>         <span class="co">//1. 初始化</span></span><span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-52"><a href="#cb2-52" aria-hidden="true" tabindex="-1"></a>             cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb2-53"><a href="#cb2-53" aria-hidden="true" tabindex="-1"></a>             <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb2-54"><a href="#cb2-54" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-55"><a href="#cb2-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-56"><a href="#cb2-56" aria-hidden="true" tabindex="-1"></a>         <span class="co">//2. 基本设置</span></span><span id="cb2-57"><a href="#cb2-57" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb2-58"><a href="#cb2-58" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb2-59"><a href="#cb2-59" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb2-60"><a href="#cb2-60" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-61"><a href="#cb2-61" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#if __APPLE__</span></span><span id="cb2-62"><a href="#cb2-62" aria-hidden="true" tabindex="-1"></a>         glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb2-63"><a href="#cb2-63" aria-hidden="true" tabindex="-1"></a>     <span class="pp">#endif</span></span><span id="cb2-64"><a href="#cb2-64" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-65"><a href="#cb2-65" aria-hidden="true" tabindex="-1"></a>         <span class="co">//3. 创建窗口</span></span><span id="cb2-66"><a href="#cb2-66" aria-hidden="true" tabindex="-1"></a>         GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb2-67"><a href="#cb2-67" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb2-68"><a href="#cb2-68" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-69"><a href="#cb2-69" aria-hidden="true" tabindex="-1"></a>             cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb2-70"><a href="#cb2-70" aria-hidden="true" tabindex="-1"></a>             <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb2-71"><a href="#cb2-71" aria-hidden="true" tabindex="-1"></a>             <span class="co">//return 1;</span></span><span id="cb2-72"><a href="#cb2-72" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-73"><a href="#cb2-73" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-74"><a href="#cb2-74" aria-hidden="true" tabindex="-1"></a>         <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb2-75"><a href="#cb2-75" aria-hidden="true" tabindex="-1"></a>         glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-76"><a href="#cb2-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-77"><a href="#cb2-77" aria-hidden="true" tabindex="-1"></a>         <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb2-78"><a href="#cb2-78" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb2-79"><a href="#cb2-79" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-80"><a href="#cb2-80" aria-hidden="true" tabindex="-1"></a>             <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-81"><a href="#cb2-81" aria-hidden="true" tabindex="-1"></a>             <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb2-82"><a href="#cb2-82" aria-hidden="true" tabindex="-1"></a>             <span class="co">//return 1;</span></span><span id="cb2-83"><a href="#cb2-83" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-84"><a href="#cb2-84" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-85"><a href="#cb2-85" aria-hidden="true" tabindex="-1"></a>         <span class="co">//6. 设置视口</span></span><span id="cb2-86"><a href="#cb2-86" aria-hidden="true" tabindex="-1"></a>         glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb2-87"><a href="#cb2-87" aria-hidden="true" tabindex="-1"></a>         <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb2-88"><a href="#cb2-88" aria-hidden="true" tabindex="-1"></a>         glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb2-89"><a href="#cb2-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-90"><a href="#cb2-90" aria-hidden="true" tabindex="-1"></a>         Shader shader<span class="op">(</span><span class="st">"res/shaders/sample_vertex_mvp.shader"</span><span class="op">,</span> <span class="st">"res/shaders/sample_fragment_mvp.shader"</span><span class="op">);</span></span><span id="cb2-91"><a href="#cb2-91" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-92"><a href="#cb2-92" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-93"><a href="#cb2-93" aria-hidden="true" tabindex="-1"></a>         <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> VAO<span class="op">,</span> EBO<span class="op">;</span></span><span id="cb2-94"><a href="#cb2-94" aria-hidden="true" tabindex="-1"></a>         glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb2-95"><a href="#cb2-95" aria-hidden="true" tabindex="-1"></a>         glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb2-96"><a href="#cb2-96" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-97"><a href="#cb2-97" aria-hidden="true" tabindex="-1"></a>         glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb2-98"><a href="#cb2-98" aria-hidden="true" tabindex="-1"></a>         glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb2-99"><a href="#cb2-99" aria-hidden="true" tabindex="-1"></a>         glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb2-100"><a href="#cb2-100" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-101"><a href="#cb2-101" aria-hidden="true" tabindex="-1"></a>         glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb2-102"><a href="#cb2-102" aria-hidden="true" tabindex="-1"></a>         glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> EBO<span class="op">);</span></span><span id="cb2-103"><a href="#cb2-103" aria-hidden="true" tabindex="-1"></a>         glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indices<span class="op">),</span> indices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb2-104"><a href="#cb2-104" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-105"><a href="#cb2-105" aria-hidden="true" tabindex="-1"></a>         <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb2-106"><a href="#cb2-106" aria-hidden="true" tabindex="-1"></a>         glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-107"><a href="#cb2-107" aria-hidden="true" tabindex="-1"></a>         glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-108"><a href="#cb2-108" aria-hidden="true" tabindex="-1"></a>         <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb2-109"><a href="#cb2-109" aria-hidden="true" tabindex="-1"></a>         glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb2-110"><a href="#cb2-110" aria-hidden="true" tabindex="-1"></a>         glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb2-111"><a href="#cb2-111" aria-hidden="true" tabindex="-1"></a>         <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb2-112"><a href="#cb2-112" aria-hidden="true" tabindex="-1"></a>         glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb2-113"><a href="#cb2-113" aria-hidden="true" tabindex="-1"></a>         glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb2-114"><a href="#cb2-114" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-115"><a href="#cb2-115" aria-hidden="true" tabindex="-1"></a>         glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-116"><a href="#cb2-116" aria-hidden="true" tabindex="-1"></a>         glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb2-117"><a href="#cb2-117" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-118"><a href="#cb2-118" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-119"><a href="#cb2-119" aria-hidden="true" tabindex="-1"></a>         <span class="dt">unsigned</span> <span class="dt">int</span> texture1<span class="op">,</span> texture2<span class="op">;</span></span><span id="cb2-120"><a href="#cb2-120" aria-hidden="true" tabindex="-1"></a>         <span class="co">//加载贴图1</span></span><span id="cb2-121"><a href="#cb2-121" aria-hidden="true" tabindex="-1"></a>         glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture1<span class="op">);</span></span><span id="cb2-122"><a href="#cb2-122" aria-hidden="true" tabindex="-1"></a>         glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb2-123"><a href="#cb2-123" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 设置 wrapping 参数</span></span><span id="cb2-124"><a href="#cb2-124" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb2-125"><a href="#cb2-125" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb2-126"><a href="#cb2-126" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 设置  filtering 参数</span></span><span id="cb2-127"><a href="#cb2-127" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb2-128"><a href="#cb2-128" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb2-129"><a href="#cb2-129" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 加载解析贴图文件</span></span><span id="cb2-130"><a href="#cb2-130" aria-hidden="true" tabindex="-1"></a>         <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrChannels<span class="op">;</span></span><span id="cb2-131"><a href="#cb2-131" aria-hidden="true" tabindex="-1"></a>         stbi_set_flip_vertically_on_load<span class="op">(</span><span class="kw">true</span><span class="op">);</span> <span class="co">// tell stb_image.h to flip loaded texture's on the y-axis.</span></span><span id="cb2-132"><a href="#cb2-132" aria-hidden="true" tabindex="-1"></a>         <span class="dt">unsigned</span> <span class="dt">char</span><span class="op">*</span> data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/container.jpg"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-133"><a href="#cb2-133" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb2-134"><a href="#cb2-134" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-135"><a href="#cb2-135" aria-hidden="true" tabindex="-1"></a>             <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb2-136"><a href="#cb2-136" aria-hidden="true" tabindex="-1"></a>             glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb2-137"><a href="#cb2-137" aria-hidden="true" tabindex="-1"></a>             glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb2-138"><a href="#cb2-138" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-139"><a href="#cb2-139" aria-hidden="true" tabindex="-1"></a>         <span class="cf">else</span></span><span id="cb2-140"><a href="#cb2-140" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-141"><a href="#cb2-141" aria-hidden="true" tabindex="-1"></a>             <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-142"><a href="#cb2-142" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-143"><a href="#cb2-143" aria-hidden="true" tabindex="-1"></a>         stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb2-144"><a href="#cb2-144" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-145"><a href="#cb2-145" aria-hidden="true" tabindex="-1"></a>         <span class="co">//加载贴图2</span></span><span id="cb2-146"><a href="#cb2-146" aria-hidden="true" tabindex="-1"></a>         glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture2<span class="op">);</span></span><span id="cb2-147"><a href="#cb2-147" aria-hidden="true" tabindex="-1"></a>         glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb2-148"><a href="#cb2-148" aria-hidden="true" tabindex="-1"></a>         <span class="co">//  设置 wrapping 参数</span></span><span id="cb2-149"><a href="#cb2-149" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb2-150"><a href="#cb2-150" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb2-151"><a href="#cb2-151" aria-hidden="true" tabindex="-1"></a>         <span class="co">// 设置  filtering 参数</span></span><span id="cb2-152"><a href="#cb2-152" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb2-153"><a href="#cb2-153" aria-hidden="true" tabindex="-1"></a>         glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb2-154"><a href="#cb2-154" aria-hidden="true" tabindex="-1"></a>         <span class="co">// l加载解析贴图文件</span></span><span id="cb2-155"><a href="#cb2-155" aria-hidden="true" tabindex="-1"></a>         data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/awesomeface.png"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-156"><a href="#cb2-156" aria-hidden="true" tabindex="-1"></a>         <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb2-157"><a href="#cb2-157" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-158"><a href="#cb2-158" aria-hidden="true" tabindex="-1"></a>             <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb2-159"><a href="#cb2-159" aria-hidden="true" tabindex="-1"></a>             glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb2-160"><a href="#cb2-160" aria-hidden="true" tabindex="-1"></a>             glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb2-161"><a href="#cb2-161" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-162"><a href="#cb2-162" aria-hidden="true" tabindex="-1"></a>         <span class="cf">else</span></span><span id="cb2-163"><a href="#cb2-163" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-164"><a href="#cb2-164" aria-hidden="true" tabindex="-1"></a>             <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-165"><a href="#cb2-165" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-166"><a href="#cb2-166" aria-hidden="true" tabindex="-1"></a>         stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb2-167"><a href="#cb2-167" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-168"><a href="#cb2-168" aria-hidden="true" tabindex="-1"></a>         <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb2-169"><a href="#cb2-169" aria-hidden="true" tabindex="-1"></a>         shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-170"><a href="#cb2-170" aria-hidden="true" tabindex="-1"></a>         shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-171"><a href="#cb2-171" aria-hidden="true" tabindex="-1"></a>         shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture2"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb2-172"><a href="#cb2-172" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-173"><a href="#cb2-173" aria-hidden="true" tabindex="-1"></a>         <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb2-174"><a href="#cb2-174" aria-hidden="true" tabindex="-1"></a>         <span class="op">{</span></span><span id="cb2-175"><a href="#cb2-175" aria-hidden="true" tabindex="-1"></a>             processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-176"><a href="#cb2-176" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-177"><a href="#cb2-177" aria-hidden="true" tabindex="-1"></a>             glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-178"><a href="#cb2-178" aria-hidden="true" tabindex="-1"></a>             glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb2-179"><a href="#cb2-179" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-180"><a href="#cb2-180" aria-hidden="true" tabindex="-1"></a>             <span class="co">// bind Texture1</span></span><span id="cb2-181"><a href="#cb2-181" aria-hidden="true" tabindex="-1"></a>             glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb2-182"><a href="#cb2-182" aria-hidden="true" tabindex="-1"></a>             glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb2-183"><a href="#cb2-183" aria-hidden="true" tabindex="-1"></a>             <span class="co">// bind Texture2</span></span><span id="cb2-184"><a href="#cb2-184" aria-hidden="true" tabindex="-1"></a>             glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb2-185"><a href="#cb2-185" aria-hidden="true" tabindex="-1"></a>             glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb2-186"><a href="#cb2-186" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-187"><a href="#cb2-187" aria-hidden="true" tabindex="-1"></a>             shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb2-188"><a href="#cb2-188" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-189"><a href="#cb2-189" aria-hidden="true" tabindex="-1"></a>             glm<span class="op">::</span>mat4 model <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span> </span><span id="cb2-190"><a href="#cb2-190" aria-hidden="true" tabindex="-1"></a>             glm<span class="op">::</span>mat4 view <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-191"><a href="#cb2-191" aria-hidden="true" tabindex="-1"></a>             glm<span class="op">::</span>mat4 projection <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-192"><a href="#cb2-192" aria-hidden="true" tabindex="-1"></a>             model <span class="op">=</span> glm<span class="op">::</span>rotate<span class="op">(</span>model<span class="op">,</span> glm<span class="op">::</span>radians<span class="op">(-</span><span class="fl">55.0</span><span class="bu">f</span><span class="op">),</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb2-193"><a href="#cb2-193" aria-hidden="true" tabindex="-1"></a>             view <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>view<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">3.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb2-194"><a href="#cb2-194" aria-hidden="true" tabindex="-1"></a>             projection <span class="op">=</span> glm<span class="op">::</span>perspective<span class="op">(</span>glm<span class="op">::</span>radians<span class="op">(</span><span class="fl">45.0</span><span class="bu">f</span><span class="op">),</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wWidth <span class="op">/</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>wHeight<span class="op">,</span> <span class="fl">0.1</span><span class="bu">f</span><span class="op">,</span> <span class="fl">100.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb2-195"><a href="#cb2-195" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-196"><a href="#cb2-196" aria-hidden="true" tabindex="-1"></a>             <span class="dt">unsigned</span> <span class="dt">int</span> modelLoc <span class="op">=</span> glGetUniformLocation<span class="op">(</span>shader<span class="op">.</span>ID<span class="op">,</span> <span class="st">"model"</span><span class="op">);</span></span><span id="cb2-197"><a href="#cb2-197" aria-hidden="true" tabindex="-1"></a>             <span class="dt">unsigned</span> <span class="dt">int</span> viewLoc <span class="op">=</span> glGetUniformLocation<span class="op">(</span>shader<span class="op">.</span>ID<span class="op">,</span> <span class="st">"view"</span><span class="op">);</span></span><span id="cb2-198"><a href="#cb2-198" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-199"><a href="#cb2-199" aria-hidden="true" tabindex="-1"></a>             glUniformMatrix4fv<span class="op">(</span>modelLoc<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> GL_FALSE<span class="op">,</span> glm<span class="op">::</span>value_ptr<span class="op">(</span>model<span class="op">));</span></span><span id="cb2-200"><a href="#cb2-200" aria-hidden="true" tabindex="-1"></a>             glUniformMatrix4fv<span class="op">(</span>viewLoc<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="op">&amp;</span>view<span class="op">[</span><span class="dv">0</span><span class="op">][</span><span class="dv">0</span><span class="op">]);</span></span><span id="cb2-201"><a href="#cb2-201" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-202"><a href="#cb2-202" aria-hidden="true" tabindex="-1"></a>             shader<span class="op">.</span>setMat4<span class="op">(</span><span class="st">"projection"</span><span class="op">,</span> projection<span class="op">);</span></span><span id="cb2-203"><a href="#cb2-203" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-204"><a href="#cb2-204" aria-hidden="true" tabindex="-1"></a>             glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb2-205"><a href="#cb2-205" aria-hidden="true" tabindex="-1"></a>             glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-206"><a href="#cb2-206" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-207"><a href="#cb2-207" aria-hidden="true" tabindex="-1"></a>             glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb2-208"><a href="#cb2-208" aria-hidden="true" tabindex="-1"></a>             glfwPollEvents<span class="op">();</span></span><span id="cb2-209"><a href="#cb2-209" aria-hidden="true" tabindex="-1"></a>         <span class="op">}</span></span><span id="cb2-210"><a href="#cb2-210" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-211"><a href="#cb2-211" aria-hidden="true" tabindex="-1"></a>         glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb2-212"><a href="#cb2-212" aria-hidden="true" tabindex="-1"></a>         glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb2-213"><a href="#cb2-213" aria-hidden="true" tabindex="-1"></a>         glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb2-214"><a href="#cb2-214" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-215"><a href="#cb2-215" aria-hidden="true" tabindex="-1"></a>     TERMINATE<span class="op">:</span></span><span id="cb2-216"><a href="#cb2-216" aria-hidden="true" tabindex="-1"></a>         glfwTerminate<span class="op">();</span></span><span id="cb2-217"><a href="#cb2-217" aria-hidden="true" tabindex="-1"></a>         <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb2-218"><a href="#cb2-218" aria-hidden="true" tabindex="-1"></a>     <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/5.shi-yong-glm-shu-xue-ku/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/5.shi-yong-glm-shu-xue-ku/</url>
      
        <content type="html"><![CDATA[<h2 id="使用glm数学库">使用glm数学库</h2><blockquote><p>数学知识参考<a href="../3d数学/README.md">3d数学部分</a> openglglfwGetTime()时间函数</p></blockquote><ol type="1"><li><p>glm数学库<code>cpp         #include &lt;glm/glm.hpp&gt;         #include &lt;glm/gtc/matrix_transform.hpp&gt;         #include &lt;glm/gtc/type_ptr.hpp&gt;</code></p></li><li><p>矩阵和向量初始化<code>cpp     //矩阵初始化     glm::mat4 mat = glm::mat4(1.0f)     //向量初始化     glm::vec4 vec(1.0f, 0.0f, 0.0f, 1.0f);</code></p></li><li><p>基础方法</p><ol type="1"><li>位移 <code>glm::translate</code></li><li>旋转 <code>glm::rotate</code></li><li>缩放 <code>glm::scale</code></li></ol></li><li><p>简单示例 <code>使用transform</code></p><ol type="1"><li>顶点Shader<code>cpp          #version 330 core          layout (location = 0) in vec3 aPos;          layout (location = 1) in vec2 aTexCoord;          out vec2 TexCoord;          uniform mat4 transform; //传递tranform矩阵，包含旋转偏移缩放量          void main()          {              gl_Position = transform * vec4(aPos, 1.0f);              TexCoord = vec2(aTexCoord.x, 1.0 - aTexCoord.y);          }</code></li><li>传递 transform值给Shader<code>cpp          unsigned int transformLoc = glGetUniformLocation(ourShader.ID, "transform");          glUniformMatrix4fv(transformLoc, 1, GL_FALSE, glm::value_ptr(trans));</code></li></ol></li><li><p>完整代码</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//图片库</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//glm OpenGL Math库</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/glm.hpp"</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/gtc/matrix_transform.hpp"</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/gtc/type_ptr.hpp"</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"shader.h"</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">//位置                    // 基础颜色          // 题图uv</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>           <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>           <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> indices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>            glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">()</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 初始化</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 基本设置</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb1-45"><a href="#cb1-45" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb1-46"><a href="#cb1-46" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb1-47"><a href="#cb1-47" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if __APPLE__</span></span><span id="cb1-48"><a href="#cb1-48" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb1-49"><a href="#cb1-49" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb1-50"><a href="#cb1-50" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 创建窗口</span></span><span id="cb1-51"><a href="#cb1-51" aria-hidden="true" tabindex="-1"></a>        GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb1-52"><a href="#cb1-52" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb1-53"><a href="#cb1-53" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-54"><a href="#cb1-54" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb1-55"><a href="#cb1-55" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb1-56"><a href="#cb1-56" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb1-57"><a href="#cb1-57" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-58"><a href="#cb1-58" aria-hidden="true" tabindex="-1"></a>        <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb1-59"><a href="#cb1-59" aria-hidden="true" tabindex="-1"></a>        glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb1-60"><a href="#cb1-60" aria-hidden="true" tabindex="-1"></a>        <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb1-61"><a href="#cb1-61" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb1-62"><a href="#cb1-62" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-63"><a href="#cb1-63" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb1-64"><a href="#cb1-64" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb1-65"><a href="#cb1-65" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb1-66"><a href="#cb1-66" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-67"><a href="#cb1-67" aria-hidden="true" tabindex="-1"></a>        <span class="co">//6. 设置视口</span></span><span id="cb1-68"><a href="#cb1-68" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb1-69"><a href="#cb1-69" aria-hidden="true" tabindex="-1"></a>        <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb1-70"><a href="#cb1-70" aria-hidden="true" tabindex="-1"></a>        glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb1-71"><a href="#cb1-71" aria-hidden="true" tabindex="-1"></a>        Shader shader<span class="op">(</span><span class="st">"res/shaders/sample_vertex_transoform.shader"</span><span class="op">,</span> <span class="st">"res/shaders/sample_fragment_transoform.shader"</span><span class="op">);</span></span><span id="cb1-72"><a href="#cb1-72" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> VAO<span class="op">,</span> EBO<span class="op">;</span></span><span id="cb1-73"><a href="#cb1-73" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb1-74"><a href="#cb1-74" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb1-75"><a href="#cb1-75" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb1-76"><a href="#cb1-76" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb1-77"><a href="#cb1-77" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb1-78"><a href="#cb1-78" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb1-79"><a href="#cb1-79" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> EBO<span class="op">);</span></span><span id="cb1-80"><a href="#cb1-80" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indices<span class="op">),</span> indices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb1-81"><a href="#cb1-81" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb1-82"><a href="#cb1-82" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-83"><a href="#cb1-83" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-84"><a href="#cb1-84" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb1-85"><a href="#cb1-85" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb1-86"><a href="#cb1-86" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb1-87"><a href="#cb1-87" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb1-88"><a href="#cb1-88" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb1-89"><a href="#cb1-89" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb1-90"><a href="#cb1-90" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-91"><a href="#cb1-91" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb1-92"><a href="#cb1-92" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> texture1<span class="op">,</span> texture2<span class="op">;</span></span><span id="cb1-93"><a href="#cb1-93" aria-hidden="true" tabindex="-1"></a>        <span class="co">//加载贴图1</span></span><span id="cb1-94"><a href="#cb1-94" aria-hidden="true" tabindex="-1"></a>        glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture1<span class="op">);</span></span><span id="cb1-95"><a href="#cb1-95" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb1-96"><a href="#cb1-96" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置 wrapping 参数</span></span><span id="cb1-97"><a href="#cb1-97" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb1-98"><a href="#cb1-98" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb1-99"><a href="#cb1-99" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置  filtering 参数</span></span><span id="cb1-100"><a href="#cb1-100" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb1-101"><a href="#cb1-101" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb1-102"><a href="#cb1-102" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 加载解析贴图文件</span></span><span id="cb1-103"><a href="#cb1-103" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrChannels<span class="op">;</span></span><span id="cb1-104"><a href="#cb1-104" aria-hidden="true" tabindex="-1"></a>        stbi_set_flip_vertically_on_load<span class="op">(</span><span class="kw">true</span><span class="op">);</span> <span class="co">// tell stb_image.h to flip loaded texture's on the y-axis.</span></span><span id="cb1-105"><a href="#cb1-105" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">char</span><span class="op">*</span> data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/container.jpg"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-106"><a href="#cb1-106" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb1-107"><a href="#cb1-107" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-108"><a href="#cb1-108" aria-hidden="true" tabindex="-1"></a>            <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb1-109"><a href="#cb1-109" aria-hidden="true" tabindex="-1"></a>            glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb1-110"><a href="#cb1-110" aria-hidden="true" tabindex="-1"></a>            glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb1-111"><a href="#cb1-111" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-112"><a href="#cb1-112" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb1-113"><a href="#cb1-113" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-114"><a href="#cb1-114" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb1-115"><a href="#cb1-115" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-116"><a href="#cb1-116" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb1-117"><a href="#cb1-117" aria-hidden="true" tabindex="-1"></a>        <span class="co">//加载贴图2</span></span><span id="cb1-118"><a href="#cb1-118" aria-hidden="true" tabindex="-1"></a>        glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture2<span class="op">);</span></span><span id="cb1-119"><a href="#cb1-119" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb1-120"><a href="#cb1-120" aria-hidden="true" tabindex="-1"></a>        <span class="co">//  设置 wrapping 参数</span></span><span id="cb1-121"><a href="#cb1-121" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb1-122"><a href="#cb1-122" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb1-123"><a href="#cb1-123" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置  filtering 参数</span></span><span id="cb1-124"><a href="#cb1-124" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb1-125"><a href="#cb1-125" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb1-126"><a href="#cb1-126" aria-hidden="true" tabindex="-1"></a>        <span class="co">// l加载解析贴图文件</span></span><span id="cb1-127"><a href="#cb1-127" aria-hidden="true" tabindex="-1"></a>        data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/awesomeface.png"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-128"><a href="#cb1-128" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb1-129"><a href="#cb1-129" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-130"><a href="#cb1-130" aria-hidden="true" tabindex="-1"></a>            <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb1-131"><a href="#cb1-131" aria-hidden="true" tabindex="-1"></a>            glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb1-132"><a href="#cb1-132" aria-hidden="true" tabindex="-1"></a>            glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb1-133"><a href="#cb1-133" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-134"><a href="#cb1-134" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb1-135"><a href="#cb1-135" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-136"><a href="#cb1-136" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb1-137"><a href="#cb1-137" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-138"><a href="#cb1-138" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb1-139"><a href="#cb1-139" aria-hidden="true" tabindex="-1"></a>        <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb1-140"><a href="#cb1-140" aria-hidden="true" tabindex="-1"></a>        shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb1-141"><a href="#cb1-141" aria-hidden="true" tabindex="-1"></a>        shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-142"><a href="#cb1-142" aria-hidden="true" tabindex="-1"></a>        shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture2"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb1-143"><a href="#cb1-143" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb1-144"><a href="#cb1-144" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb1-145"><a href="#cb1-145" aria-hidden="true" tabindex="-1"></a>            processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb1-146"><a href="#cb1-146" aria-hidden="true" tabindex="-1"></a>            glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb1-147"><a href="#cb1-147" aria-hidden="true" tabindex="-1"></a>            glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb1-148"><a href="#cb1-148" aria-hidden="true" tabindex="-1"></a>            <span class="co">// bind Texture1</span></span><span id="cb1-149"><a href="#cb1-149" aria-hidden="true" tabindex="-1"></a>            glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb1-150"><a href="#cb1-150" aria-hidden="true" tabindex="-1"></a>            glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb1-151"><a href="#cb1-151" aria-hidden="true" tabindex="-1"></a>            <span class="co">// bind Texture2</span></span><span id="cb1-152"><a href="#cb1-152" aria-hidden="true" tabindex="-1"></a>            glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb1-153"><a href="#cb1-153" aria-hidden="true" tabindex="-1"></a>            glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb1-154"><a href="#cb1-154" aria-hidden="true" tabindex="-1"></a>            glm<span class="op">::</span>mat4 transform <span class="op">=</span> glm<span class="op">::</span>mat4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span> </span><span id="cb1-155"><a href="#cb1-155" aria-hidden="true" tabindex="-1"></a>            transform <span class="op">=</span> glm<span class="op">::</span>translate<span class="op">(</span>transform<span class="op">,</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb1-156"><a href="#cb1-156" aria-hidden="true" tabindex="-1"></a>            transform <span class="op">=</span> glm<span class="op">::</span>rotate<span class="op">(</span>transform<span class="op">,</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>glfwGetTime<span class="op">(),</span> glm<span class="op">::</span>vec3<span class="op">(</span><span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">));</span></span><span id="cb1-157"><a href="#cb1-157" aria-hidden="true" tabindex="-1"></a>            shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb1-158"><a href="#cb1-158" aria-hidden="true" tabindex="-1"></a>            <span class="dt">unsigned</span> <span class="dt">int</span> transformLoc <span class="op">=</span> glGetUniformLocation<span class="op">(</span>shader<span class="op">.</span>ID<span class="op">,</span> <span class="st">"transform"</span><span class="op">);</span></span><span id="cb1-159"><a href="#cb1-159" aria-hidden="true" tabindex="-1"></a>            glUniformMatrix4fv<span class="op">(</span>transformLoc<span class="op">,</span> <span class="op">(</span><span class="dt">float</span><span class="op">)</span>glfwGetTime<span class="op">(),</span> GL_FALSE<span class="op">,</span> glm<span class="op">::</span>value_ptr<span class="op">(</span>transform<span class="op">));</span></span><span id="cb1-160"><a href="#cb1-160" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb1-161"><a href="#cb1-161" aria-hidden="true" tabindex="-1"></a>            glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb1-162"><a href="#cb1-162" aria-hidden="true" tabindex="-1"></a>            glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb1-163"><a href="#cb1-163" aria-hidden="true" tabindex="-1"></a>            glfwPollEvents<span class="op">();</span></span><span id="cb1-164"><a href="#cb1-164" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb1-165"><a href="#cb1-165" aria-hidden="true" tabindex="-1"></a>        glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb1-166"><a href="#cb1-166" aria-hidden="true" tabindex="-1"></a>        glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb1-167"><a href="#cb1-167" aria-hidden="true" tabindex="-1"></a>        glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb1-168"><a href="#cb1-168" aria-hidden="true" tabindex="-1"></a>    TERMINATE<span class="op">:</span></span><span id="cb1-169"><a href="#cb1-169" aria-hidden="true" tabindex="-1"></a>        glfwTerminate<span class="op">();</span></span><span id="cb1-170"><a href="#cb1-170" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-171"><a href="#cb1-171" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/4.tie-tu/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/4.tie-tu/</url>
      
        <content type="html"><![CDATA[<h2 id="贴图">贴图</h2><blockquote><p>使用贴图，贴图解析使用 std_image 库</p></blockquote><ol type="1"><li>贴图解析库</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">"stb_image.h"</span></span></code></pre></div><ol start="2" type="1"><li>贴图解析和加载</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> texture1<span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="co">//1. 创建贴图id</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture1<span class="op">);</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="co">//2. 绑定贴图id，一下操作都是针对此贴图</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="co">//3. 设置贴图各种属性</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="co">//3.1 设置wrapping参数</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span>  <span class="co">//设置为重复样式，不够尺寸则重复来填充</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span>  <span class="co">//设置为重复样式，不够尺寸则重复来填充</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="co">//3.2 设置filter滤波</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span><span class="co">//设置为线性插值</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span><span class="co">//设置为线性插值</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a><span class="co">//。。。其他参数设置</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a><span class="co">//4. 加载解析图片文件</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrChannels<span class="op">;</span> </span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">char</span><span class="op">*</span> data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/container.jpg"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>    <span class="co">//5. 解析成功，设置贴图数据， </span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式，通道数可少不能多，否则会报错。</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a><span class="cf">else</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a><span class="co">//6. 设置完贴图数据，则不需要字符串数据，释放。</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a><span class="co">//7. 至此贴图数据准备完毕，使用texture1贴图id即可。</span></span></code></pre></div><ol start="3" type="1"><li>使用贴图，需要渲染的shader支持贴图。</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//激活贴图GL_TEXTURE0，第一组贴图</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="co">//绑定texture1到第一组贴图</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span></code></pre></div><ol start="4" type="1"><li>贴图Shader<ol type="1"><li>顶点Shader</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">//location对应顶点属性位置。</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec3 aPos<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">1</span><span class="op">)</span> in vec3 aColor<span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">2</span><span class="op">)</span> in vec2 aTexCoord<span class="op">;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a>out vec3 ourColor<span class="op">;</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a>out vec2 TexCoord<span class="op">;</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a>    gl_Position <span class="op">=</span> vec4<span class="op">(</span>aPos<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a>    ourColor <span class="op">=</span> aColor<span class="op">;</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    TexCoord <span class="op">=</span> aTexCoord<span class="op">;</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>片元Shader， 使用texture函数对贴图uv采样。</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>out vec4 FragColor<span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>in vec3 ourColor<span class="op">;</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>in vec2 TexCoord<span class="op">;</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a>uniform sampler2D ourTexture<span class="op">;</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a>    FragColor <span class="op">=</span> texture<span class="op">(</span>ourTexture<span class="op">,</span> TexCoord<span class="op">);</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div></li><li>可以使用多张纹理,Shader使用 mix函数混合，</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 在绑定纹理之前先激活位置纹理单元</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span> </span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture<span class="op">);</span></span></code></pre></div><pre><code>1. 多张纹理的片元Shader</code></pre><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    out vec4 FragColor<span class="op">;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    in vec3 ourColor<span class="op">;</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    in vec2 TexCoord<span class="op">;</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    uniform sampler2D texture1<span class="op">;</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    uniform sampler2D texture2<span class="op">;</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> main<span class="op">()</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a>        FragColor <span class="op">=</span> mix<span class="op">(</span>texture<span class="op">(</span>texture1<span class="op">,</span> TexCoord<span class="op">),</span> texture<span class="op">(</span>texture2<span class="op">,</span> TexCoord<span class="op">),</span> <span class="fl">0.2</span><span class="op">);</span></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><pre><code>2. 还要通过使用glUniform1i设置每个采样器的方式告诉OpenGL每个着色器采样器属于哪个纹理单元。我们只需要设置一次即可    &gt; texture贴图不同于其他`Uniform`参数，因为数据在GPU,不能直接设置值，    &gt; 需要指定`位置值`，然后通过`glActiveTexture(GL_TEXTURE1)`函数激活对应位置;    &gt; 使用`glBindTexture(GL_TEXTURE_2D, texture1)`函数指定贴图值;</code></pre><div class="sourceCode" id="cb10"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="co">//glUniform1i</span></span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a><span class="co">//glUniform1i(glGetUniformLocation(ourShader.ID, "texture1"), 0); // 手动设置</span></span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture2"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span></code></pre></div><pre><code>3. 使用多张贴图</code></pre><div class="sourceCode" id="cb12"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>    glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb12-5"><a href="#cb12-5" aria-hidden="true" tabindex="-1"></a>    glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span></code></pre></div><ol start="6" type="1"><li>重要概念&amp;参数<ol type="1"><li>纹理环绕方式 Wrapping &gt; 通过<code>glTexParameterfv</code>函数设置 |环绕方式 | 描述| |:--|:--||GL_REPEAT |对纹理的默认行为。重复纹理图像。| |GL_MIRRORED_REPEAT |和GL_REPEAT一样，但每次重复图片是镜像放置的。| |GL_CLAMP_TO_EDGE |纹理坐标会被约束在0到1之间，超出的部分会重复纹理坐标的边缘，产生一种边缘被拉伸的效果。||GL_CLAMP_TO_BORDER | 超出的坐标为用户指定的边缘颜色。|</li><li>纹理过滤 filter (GL_TEXTURE_MIN_FILTER 渐进，GL_TEXTURE_MAG_FILTER渐远)<ol type="1"><li>GL_NEAREST GL_NEAREST（也叫邻近过滤，Nearest NeighborFiltering）是OpenGL默认的纹理过滤方式。当设置为GL_NEAREST的时候，OpenGL会选择中心点最接近纹理坐标的那个像素。下图中你可以看到四个像素，加号代表纹理坐标。左上角那个纹理像素的中心距离纹理坐标最近，所以它会被选择为样本颜色：</li><li>GL_LINEAR GL_LINEAR（也叫线性过滤，(Bi)linearFiltering）它会基于纹理坐标附近的纹理像素，计算出一个插值，近似出这些纹理像素之间的颜色。一个纹理像素的中心距离纹理坐标越近，那么这个纹理像素的颜色对最终的样本颜色的贡献越大。下图中你可以看到返回的颜色是邻近像素的混合色：</li></ol></li><li>多级渐远纹理 Mipmap （GL_TEXTURE_MIN_FILTER 渐近，渐远无用会产生错误码）多级渐远纹理背后的理念很简单：距观察者的距离超过一定的阈值，OpenGL会使用不同的多级渐远纹理，即最适合物体的距离的那个。&gt;一个常见的错误是，将放大过滤的选项设置为多级渐远纹理过滤选项之一。这样没有任何效果，因为多级渐远纹理主要是使用在纹理被缩小的情况下的：纹理放大不会使用多级渐远纹理，为放大过滤设置多级渐远纹&gt;理的选项会产生一个GL_INVALID_ENUM错误代码。 |过滤方式 | 描述||:--|:--| |GL_NEAREST_MIPMAP_NEAREST |使用最邻近的多级渐远纹理来匹配像素大小，并使用邻近插值进行纹理采样||GL_LINEAR_MIPMAP_NEAREST|使用最邻近的多级渐远纹理级别，并使用线性插值进行采样||GL_NEAREST_MIPMAP_LINEAR|在两个最匹配像素大小的多级渐远纹理之间进行线性插值，使用邻近插值进行采样||GL_LINEAR_MIPMAP_LINEAR|在两个邻近的多级渐远纹理之间使用线性插值，并使用线性插值进行采样|</li><li>加载图像 api<ol type="1"><li>stbi_load 加载</li><li>stbi_set_flip_vertically_on_load(true) 、设置为竖直翻转。</li></ol></li></ol></li><li>完整代码</li></ol><div class="sourceCode" id="cb13"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb13-1"><a href="#cb13-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb13-2"><a href="#cb13-2" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb13-3"><a href="#cb13-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-4"><a href="#cb13-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//图片库</span></span><span id="cb13-5"><a href="#cb13-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#define STB_IMAGE_IMPLEMENTATION</span></span><span id="cb13-6"><a href="#cb13-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"stb_image.h"</span></span><span id="cb13-7"><a href="#cb13-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-8"><a href="#cb13-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">//glm OpenGL Math库</span></span><span id="cb13-9"><a href="#cb13-9" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/glm.hpp"</span></span><span id="cb13-10"><a href="#cb13-10" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/gtc/matrix_transform.hpp"</span></span><span id="cb13-11"><a href="#cb13-11" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glm/gtc/type_ptr.hpp"</span></span><span id="cb13-12"><a href="#cb13-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-13"><a href="#cb13-13" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"shader.h"</span></span><span id="cb13-14"><a href="#cb13-14" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb13-15"><a href="#cb13-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-16"><a href="#cb13-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb13-17"><a href="#cb13-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-18"><a href="#cb13-18" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb13-19"><a href="#cb13-19" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb13-20"><a href="#cb13-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-21"><a href="#cb13-21" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb13-22"><a href="#cb13-22" aria-hidden="true" tabindex="-1"></a>        <span class="co">//位置                    // 基础颜色          // 题图uv</span></span><span id="cb13-23"><a href="#cb13-23" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// top right</span></span><span id="cb13-24"><a href="#cb13-24" aria-hidden="true" tabindex="-1"></a>            <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom right</span></span><span id="cb13-25"><a href="#cb13-25" aria-hidden="true" tabindex="-1"></a>           <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="co">// bottom left</span></span><span id="cb13-26"><a href="#cb13-26" aria-hidden="true" tabindex="-1"></a>           <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>   <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span>  <span class="co">// top left </span></span><span id="cb13-27"><a href="#cb13-27" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb13-28"><a href="#cb13-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-29"><a href="#cb13-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> indices<span class="op">[]</span> <span class="op">=</span> <span class="op">{</span></span><span id="cb13-30"><a href="#cb13-30" aria-hidden="true" tabindex="-1"></a>        <span class="dv">0</span><span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> <span class="co">//  第一个三角形</span></span><span id="cb13-31"><a href="#cb13-31" aria-hidden="true" tabindex="-1"></a>        <span class="dv">1</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> <span class="dv">3</span>  <span class="co">//  第二个三角形</span></span><span id="cb13-32"><a href="#cb13-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb13-33"><a href="#cb13-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-34"><a href="#cb13-34" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb13-35"><a href="#cb13-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb13-36"><a href="#cb13-36" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb13-37"><a href="#cb13-37" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb13-38"><a href="#cb13-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-39"><a href="#cb13-39" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb13-40"><a href="#cb13-40" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb13-41"><a href="#cb13-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb13-42"><a href="#cb13-42" aria-hidden="true" tabindex="-1"></a>            glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb13-43"><a href="#cb13-43" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb13-44"><a href="#cb13-44" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-45"><a href="#cb13-45" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">()</span></span><span id="cb13-46"><a href="#cb13-46" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb13-47"><a href="#cb13-47" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 初始化</span></span><span id="cb13-48"><a href="#cb13-48" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb13-49"><a href="#cb13-49" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-50"><a href="#cb13-50" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb13-51"><a href="#cb13-51" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb13-52"><a href="#cb13-52" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-53"><a href="#cb13-53" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-54"><a href="#cb13-54" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 基本设置</span></span><span id="cb13-55"><a href="#cb13-55" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb13-56"><a href="#cb13-56" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb13-57"><a href="#cb13-57" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb13-58"><a href="#cb13-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-59"><a href="#cb13-59" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if __APPLE__</span></span><span id="cb13-60"><a href="#cb13-60" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb13-61"><a href="#cb13-61" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb13-62"><a href="#cb13-62" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-63"><a href="#cb13-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 创建窗口</span></span><span id="cb13-64"><a href="#cb13-64" aria-hidden="true" tabindex="-1"></a>        GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb13-65"><a href="#cb13-65" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb13-66"><a href="#cb13-66" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-67"><a href="#cb13-67" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb13-68"><a href="#cb13-68" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb13-69"><a href="#cb13-69" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb13-70"><a href="#cb13-70" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-71"><a href="#cb13-71" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-72"><a href="#cb13-72" aria-hidden="true" tabindex="-1"></a>        <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb13-73"><a href="#cb13-73" aria-hidden="true" tabindex="-1"></a>        glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb13-74"><a href="#cb13-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-75"><a href="#cb13-75" aria-hidden="true" tabindex="-1"></a>        <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb13-76"><a href="#cb13-76" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb13-77"><a href="#cb13-77" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-78"><a href="#cb13-78" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb13-79"><a href="#cb13-79" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb13-80"><a href="#cb13-80" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb13-81"><a href="#cb13-81" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-82"><a href="#cb13-82" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-83"><a href="#cb13-83" aria-hidden="true" tabindex="-1"></a>        <span class="co">//6. 设置视口</span></span><span id="cb13-84"><a href="#cb13-84" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb13-85"><a href="#cb13-85" aria-hidden="true" tabindex="-1"></a>        <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb13-86"><a href="#cb13-86" aria-hidden="true" tabindex="-1"></a>        glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb13-87"><a href="#cb13-87" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-88"><a href="#cb13-88" aria-hidden="true" tabindex="-1"></a>        Shader shader<span class="op">(</span><span class="st">"res/shaders/sample_vertex_texture.shader"</span><span class="op">,</span> <span class="st">"res/shaders/sample_fragment_2texture.shader"</span><span class="op">);</span></span><span id="cb13-89"><a href="#cb13-89" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-90"><a href="#cb13-90" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-91"><a href="#cb13-91" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> VBO<span class="op">,</span> VAO<span class="op">,</span> EBO<span class="op">;</span></span><span id="cb13-92"><a href="#cb13-92" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb13-93"><a href="#cb13-93" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb13-94"><a href="#cb13-94" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-95"><a href="#cb13-95" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb13-96"><a href="#cb13-96" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb13-97"><a href="#cb13-97" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb13-98"><a href="#cb13-98" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-99"><a href="#cb13-99" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb13-100"><a href="#cb13-100" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> EBO<span class="op">);</span></span><span id="cb13-101"><a href="#cb13-101" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ELEMENT_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>indices<span class="op">),</span> indices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb13-102"><a href="#cb13-102" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-103"><a href="#cb13-103" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 指定顶点的顶点属性的结构，顶点 3个float，从0开始，整体每一组数据8个。</span></span><span id="cb13-104"><a href="#cb13-104" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb13-105"><a href="#cb13-105" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb13-106"><a href="#cb13-106" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 指定颜色的顶点属性的结构，三色 3个float，从3开始，整体每一组数据8个。</span></span><span id="cb13-107"><a href="#cb13-107" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb13-108"><a href="#cb13-108" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">1</span><span class="op">);</span></span><span id="cb13-109"><a href="#cb13-109" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 指定uv的顶点属性的结构，uv 2个float，从6开始，整体每一组数据8个。</span></span><span id="cb13-110"><a href="#cb13-110" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">2</span><span class="op">,</span> <span class="dv">2</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> GL_FALSE<span class="op">,</span> <span class="dv">8</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)(</span><span class="dv">6</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">)));</span></span><span id="cb13-111"><a href="#cb13-111" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">2</span><span class="op">);</span></span><span id="cb13-112"><a href="#cb13-112" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-113"><a href="#cb13-113" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb13-114"><a href="#cb13-114" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb13-115"><a href="#cb13-115" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-116"><a href="#cb13-116" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-117"><a href="#cb13-117" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> texture1<span class="op">,</span> texture2<span class="op">;</span></span><span id="cb13-118"><a href="#cb13-118" aria-hidden="true" tabindex="-1"></a>        <span class="co">//加载贴图1</span></span><span id="cb13-119"><a href="#cb13-119" aria-hidden="true" tabindex="-1"></a>        glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture1<span class="op">);</span></span><span id="cb13-120"><a href="#cb13-120" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb13-121"><a href="#cb13-121" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置 wrapping 参数</span></span><span id="cb13-122"><a href="#cb13-122" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb13-123"><a href="#cb13-123" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb13-124"><a href="#cb13-124" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置  filtering 参数</span></span><span id="cb13-125"><a href="#cb13-125" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb13-126"><a href="#cb13-126" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb13-127"><a href="#cb13-127" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 加载解析贴图文件</span></span><span id="cb13-128"><a href="#cb13-128" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> width<span class="op">,</span> height<span class="op">,</span> nrChannels<span class="op">;</span></span><span id="cb13-129"><a href="#cb13-129" aria-hidden="true" tabindex="-1"></a>        stbi_set_flip_vertically_on_load<span class="op">(</span><span class="kw">true</span><span class="op">);</span> <span class="co">// tell stb_image.h to flip loaded texture's on the y-axis.</span></span><span id="cb13-130"><a href="#cb13-130" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">char</span><span class="op">*</span> data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/container.jpg"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb13-131"><a href="#cb13-131" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb13-132"><a href="#cb13-132" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-133"><a href="#cb13-133" aria-hidden="true" tabindex="-1"></a>            <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb13-134"><a href="#cb13-134" aria-hidden="true" tabindex="-1"></a>            glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb13-135"><a href="#cb13-135" aria-hidden="true" tabindex="-1"></a>            glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb13-136"><a href="#cb13-136" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-137"><a href="#cb13-137" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb13-138"><a href="#cb13-138" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-139"><a href="#cb13-139" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb13-140"><a href="#cb13-140" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-141"><a href="#cb13-141" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb13-142"><a href="#cb13-142" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-143"><a href="#cb13-143" aria-hidden="true" tabindex="-1"></a>        <span class="co">//加载贴图2</span></span><span id="cb13-144"><a href="#cb13-144" aria-hidden="true" tabindex="-1"></a>        glGenTextures<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>texture2<span class="op">);</span></span><span id="cb13-145"><a href="#cb13-145" aria-hidden="true" tabindex="-1"></a>        glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb13-146"><a href="#cb13-146" aria-hidden="true" tabindex="-1"></a>        <span class="co">//  设置 wrapping 参数</span></span><span id="cb13-147"><a href="#cb13-147" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_S<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb13-148"><a href="#cb13-148" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_WRAP_T<span class="op">,</span> GL_REPEAT<span class="op">);</span></span><span id="cb13-149"><a href="#cb13-149" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 设置  filtering 参数</span></span><span id="cb13-150"><a href="#cb13-150" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MIN_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb13-151"><a href="#cb13-151" aria-hidden="true" tabindex="-1"></a>        glTexParameteri<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> GL_TEXTURE_MAG_FILTER<span class="op">,</span> GL_LINEAR<span class="op">);</span></span><span id="cb13-152"><a href="#cb13-152" aria-hidden="true" tabindex="-1"></a>        <span class="co">// l加载解析贴图文件</span></span><span id="cb13-153"><a href="#cb13-153" aria-hidden="true" tabindex="-1"></a>        data <span class="op">=</span> stbi_load<span class="op">(</span><span class="st">"./res/textures/awesomeface.png"</span><span class="op">,</span> <span class="op">&amp;</span>width<span class="op">,</span> <span class="op">&amp;</span>height<span class="op">,</span> <span class="op">&amp;</span>nrChannels<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb13-154"><a href="#cb13-154" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>data<span class="op">)</span></span><span id="cb13-155"><a href="#cb13-155" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-156"><a href="#cb13-156" aria-hidden="true" tabindex="-1"></a>            <span class="co">//第一个 GL_RGB 将被转换的格式， 第二个GL_RGB原始文件的格式， 格式不匹配会报错。</span></span><span id="cb13-157"><a href="#cb13-157" aria-hidden="true" tabindex="-1"></a>            glTexImage2D<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGB<span class="op">,</span> width<span class="op">,</span> height<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> GL_RGBA<span class="op">,</span> GL_UNSIGNED_BYTE<span class="op">,</span> data<span class="op">);</span></span><span id="cb13-158"><a href="#cb13-158" aria-hidden="true" tabindex="-1"></a>            glGenerateMipmap<span class="op">(</span>GL_TEXTURE_2D<span class="op">);</span></span><span id="cb13-159"><a href="#cb13-159" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-160"><a href="#cb13-160" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb13-161"><a href="#cb13-161" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-162"><a href="#cb13-162" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to load texture"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb13-163"><a href="#cb13-163" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-164"><a href="#cb13-164" aria-hidden="true" tabindex="-1"></a>        stbi_image_free<span class="op">(</span>data<span class="op">);</span></span><span id="cb13-165"><a href="#cb13-165" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-166"><a href="#cb13-166" aria-hidden="true" tabindex="-1"></a>        <span class="co">//指定采样器贴图储存的位置</span></span><span id="cb13-167"><a href="#cb13-167" aria-hidden="true" tabindex="-1"></a>        shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb13-168"><a href="#cb13-168" aria-hidden="true" tabindex="-1"></a>        shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture1"</span><span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb13-169"><a href="#cb13-169" aria-hidden="true" tabindex="-1"></a>        shader<span class="op">.</span>setInt<span class="op">(</span><span class="st">"texture2"</span><span class="op">,</span> <span class="dv">1</span><span class="op">);</span></span><span id="cb13-170"><a href="#cb13-170" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-171"><a href="#cb13-171" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb13-172"><a href="#cb13-172" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb13-173"><a href="#cb13-173" aria-hidden="true" tabindex="-1"></a>            processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb13-174"><a href="#cb13-174" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-175"><a href="#cb13-175" aria-hidden="true" tabindex="-1"></a>            glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb13-176"><a href="#cb13-176" aria-hidden="true" tabindex="-1"></a>            glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb13-177"><a href="#cb13-177" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-178"><a href="#cb13-178" aria-hidden="true" tabindex="-1"></a>            <span class="co">// bind Texture1</span></span><span id="cb13-179"><a href="#cb13-179" aria-hidden="true" tabindex="-1"></a>            glActiveTexture<span class="op">(</span>GL_TEXTURE0<span class="op">);</span></span><span id="cb13-180"><a href="#cb13-180" aria-hidden="true" tabindex="-1"></a>            glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture1<span class="op">);</span></span><span id="cb13-181"><a href="#cb13-181" aria-hidden="true" tabindex="-1"></a>            <span class="co">// bind Texture2</span></span><span id="cb13-182"><a href="#cb13-182" aria-hidden="true" tabindex="-1"></a>            glActiveTexture<span class="op">(</span>GL_TEXTURE1<span class="op">);</span></span><span id="cb13-183"><a href="#cb13-183" aria-hidden="true" tabindex="-1"></a>            glBindTexture<span class="op">(</span>GL_TEXTURE_2D<span class="op">,</span> texture2<span class="op">);</span></span><span id="cb13-184"><a href="#cb13-184" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-185"><a href="#cb13-185" aria-hidden="true" tabindex="-1"></a>            shader<span class="op">.</span>use<span class="op">();</span></span><span id="cb13-186"><a href="#cb13-186" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb13-187"><a href="#cb13-187" aria-hidden="true" tabindex="-1"></a>            glDrawElements<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">6</span><span class="op">,</span> GL_UNSIGNED_INT<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb13-188"><a href="#cb13-188" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-189"><a href="#cb13-189" aria-hidden="true" tabindex="-1"></a>            glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb13-190"><a href="#cb13-190" aria-hidden="true" tabindex="-1"></a>            glfwPollEvents<span class="op">();</span></span><span id="cb13-191"><a href="#cb13-191" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb13-192"><a href="#cb13-192" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-193"><a href="#cb13-193" aria-hidden="true" tabindex="-1"></a>        glDeleteVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb13-194"><a href="#cb13-194" aria-hidden="true" tabindex="-1"></a>        glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb13-195"><a href="#cb13-195" aria-hidden="true" tabindex="-1"></a>        glDeleteBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>EBO<span class="op">);</span></span><span id="cb13-196"><a href="#cb13-196" aria-hidden="true" tabindex="-1"></a></span><span id="cb13-197"><a href="#cb13-197" aria-hidden="true" tabindex="-1"></a>    TERMINATE<span class="op">:</span></span><span id="cb13-198"><a href="#cb13-198" aria-hidden="true" tabindex="-1"></a>        glfwTerminate<span class="op">();</span></span><span id="cb13-199"><a href="#cb13-199" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb13-200"><a href="#cb13-200" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/3.zhao-se-qi-glsl/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/3.zhao-se-qi-glsl/</url>
      
        <content type="html"><![CDATA[<h2 id="glsl">glsl</h2><blockquote><p>着色器是使用一种叫GLSL的类C语言写成的。GLSL是为图形计算量身定制的，它包含一些针对向量和矩阵操作的有用特性。着色器的开头总是要声明版本，接着是输入和输出变量、uniform和main函数。每个着色器的入口点都是main函数，在这个函数中我们处理所有的输入变量，并将结果输出到输出变量中。如果你不知道什么是uniform也不用担心，我们后面会进行讲解。</p><p>glfwGetTime()获取运行的秒数</p></blockquote><ol type="1"><li>基本结构</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version version_number</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>in type in_variable_name<span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>in type in_variable_name<span class="op">;</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>out type out_variable_name<span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>uniform type uniform_name<span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> main<span class="op">()</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 处理输入并进行一些图形操作</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>  <span class="op">...</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>  <span class="co">// 输出处理过的结果到输出变量</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>  out_variable_name <span class="op">=</span> weird_stuff_we_processed<span class="op">;</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>支持的基本数据类型</li></ol><table><thead><tr class="header"><th style="text-align: left;">类型</th><th style="text-align: left;">含义</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">vecn</td><td style="text-align: left;">包含n个float分量的默认向量</td></tr><tr class="even"><td style="text-align: left;">bvecn</td><td style="text-align: left;">包含n个bool分量的向量</td></tr><tr class="odd"><td style="text-align: left;">ivecn</td><td style="text-align: left;">包含n个int分量的向量</td></tr><tr class="even"><td style="text-align: left;">uvecn</td><td style="text-align: left;">包含n个unsigned int分量的向量</td></tr><tr class="odd"><td style="text-align: left;">dvecn</td><td style="text-align: left;">包含n个double分量的向量</td></tr></tbody></table><ol start="3" type="1"><li><p>Shader数据来源和输出 &gt;虽然着色器是各自独立的小程序，但是它们都是一个整体的一部分，出于这样的原因，&gt;我们希望每个着色器都有输入和输出，这样才能进行数据交流和传递。GLSL定义了in和out关键字专门来实现这个目的。</p><ul><li><p>Uniform &gt;Uniform是一种从CPU中的应用向GPU中的着色器发送数据的方式，但uniform和顶点属性有些不同。首先，uniform是全局的(Global)。&gt;全局意味着uniform变量必须在每个着色器程序对象中都是独一无二的，而且它可以被着色器程序的任意着色器在任意阶段访问。&gt;第二，无论你把uniform值设置成什么，uniform会一直保存它们的数据，直到它们被重置或更新。</p><ul><li>glGetUniformLocation查询uniform 位置值</li><li>glUniformxx 给位置的设置值</li></ul></li><li><p>OpenGL函数命名约定</p></li></ul></li></ol><table><thead><tr class="header"><th style="text-align: left;">f</th><th style="text-align: left;">函数需要一个float作为它的值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">i</td><td style="text-align: left;">函数需要一个int作为它的值</td></tr><tr class="even"><td style="text-align: left;">ui</td><td style="text-align: left;">函数需要一个unsigned int作为它的值</td></tr><tr class="odd"><td style="text-align: left;">3f</td><td style="text-align: left;">函数需要3个float作为它的值</td></tr><tr class="even"><td style="text-align: left;">fv</td><td style="text-align: left;">函数需要一个float向量/数组作为它的值</td></tr></tbody></table><ul><li>着色器类 &gt; 功能： 加载着色器，获取和设置属性值。辅助文件读写类</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="pp">#ifndef SHADER_H</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#define SHADER_H</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;glad/glad.h&gt;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;string&gt;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;fstream&gt;</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;sstream&gt;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Shader</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span><span class="op">:</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="dt">unsigned</span> <span class="dt">int</span> ID<span class="op">;</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">// constructor generates the shader on the fly</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>    Shader<span class="op">(</span><span class="at">const</span> <span class="dt">char</span><span class="op">*</span> vertexPath<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> fragmentPath<span class="op">)</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 1. retrieve the vertex/fragment source code from filePath</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>string<span class="op"> </span>vertexCode<span class="op">;</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>string<span class="op"> </span>fragmentCode<span class="op">;</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>ifstream<span class="op"> </span>vShaderFile<span class="op">;</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>ifstream<span class="op"> </span>fShaderFile<span class="op">;</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="co">// ensure ifstream objects can throw exceptions:</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>        vShaderFile<span class="op">.</span>exceptions<span class="op">(</span><span class="bu">std::</span>ifstream<span class="bu">::</span>failbit<span class="op"> |</span> <span class="bu">std::</span>ifstream<span class="bu">::</span>badbit<span class="op">);</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>        fShaderFile<span class="op">.</span>exceptions<span class="op">(</span><span class="bu">std::</span>ifstream<span class="bu">::</span>failbit<span class="op"> |</span> <span class="bu">std::</span>ifstream<span class="bu">::</span>badbit<span class="op">);</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>            <span class="co">// open files</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>            vShaderFile<span class="op">.</span>open<span class="op">(</span>vertexPath<span class="op">);</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>            fShaderFile<span class="op">.</span>open<span class="op">(</span>fragmentPath<span class="op">);</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>stringstream<span class="op"> </span>vShaderStream<span class="op">,</span> fShaderStream<span class="op">;</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>            <span class="co">// read file's buffer contents into streams</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>            vShaderStream <span class="op">&lt;&lt;</span> vShaderFile<span class="op">.</span>rdbuf<span class="op">();</span></span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>            fShaderStream <span class="op">&lt;&lt;</span> fShaderFile<span class="op">.</span>rdbuf<span class="op">();</span></span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>            <span class="co">// close file handlers</span></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>            vShaderFile<span class="op">.</span>close<span class="op">();</span></span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>            fShaderFile<span class="op">.</span>close<span class="op">();</span></span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>            <span class="co">// convert stream into string</span></span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>            vertexCode <span class="op">=</span> vShaderStream<span class="op">.</span>str<span class="op">();</span></span><span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>            fragmentCode <span class="op">=</span> fShaderStream<span class="op">.</span>str<span class="op">();</span></span><span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a>        <span class="cf">catch</span> <span class="op">(</span><span class="bu">std::</span>ifstream<span class="bu">::</span>failure<span class="op">&amp;</span> e<span class="op">)</span></span><span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER::FILE_NOT_SUCCESFULLY_READ"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> vShaderCode <span class="op">=</span> vertexCode<span class="op">.</span>c_str<span class="op">();</span></span><span id="cb2-45"><a href="#cb2-45" aria-hidden="true" tabindex="-1"></a>        <span class="at">const</span> <span class="dt">char</span> <span class="op">*</span> fShaderCode <span class="op">=</span> fragmentCode<span class="op">.</span>c_str<span class="op">();</span></span><span id="cb2-46"><a href="#cb2-46" aria-hidden="true" tabindex="-1"></a>        <span class="co">// 2. compile shaders</span></span><span id="cb2-47"><a href="#cb2-47" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> vertex<span class="op">,</span> fragment<span class="op">;</span></span><span id="cb2-48"><a href="#cb2-48" aria-hidden="true" tabindex="-1"></a>        <span class="co">// vertex shader</span></span><span id="cb2-49"><a href="#cb2-49" aria-hidden="true" tabindex="-1"></a>        vertex <span class="op">=</span> glCreateShader<span class="op">(</span>GL_VERTEX_SHADER<span class="op">);</span></span><span id="cb2-50"><a href="#cb2-50" aria-hidden="true" tabindex="-1"></a>        glShaderSource<span class="op">(</span>vertex<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>vShaderCode<span class="op">,</span> NULL<span class="op">);</span></span><span id="cb2-51"><a href="#cb2-51" aria-hidden="true" tabindex="-1"></a>        glCompileShader<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb2-52"><a href="#cb2-52" aria-hidden="true" tabindex="-1"></a>        checkCompileErrors<span class="op">(</span>vertex<span class="op">,</span> <span class="st">"VERTEX"</span><span class="op">);</span></span><span id="cb2-53"><a href="#cb2-53" aria-hidden="true" tabindex="-1"></a>        <span class="co">// fragment Shader</span></span><span id="cb2-54"><a href="#cb2-54" aria-hidden="true" tabindex="-1"></a>        fragment <span class="op">=</span> glCreateShader<span class="op">(</span>GL_FRAGMENT_SHADER<span class="op">);</span></span><span id="cb2-55"><a href="#cb2-55" aria-hidden="true" tabindex="-1"></a>        glShaderSource<span class="op">(</span>fragment<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>fShaderCode<span class="op">,</span> NULL<span class="op">);</span></span><span id="cb2-56"><a href="#cb2-56" aria-hidden="true" tabindex="-1"></a>        glCompileShader<span class="op">(</span>fragment<span class="op">);</span></span><span id="cb2-57"><a href="#cb2-57" aria-hidden="true" tabindex="-1"></a>        checkCompileErrors<span class="op">(</span>fragment<span class="op">,</span> <span class="st">"FRAGMENT"</span><span class="op">);</span></span><span id="cb2-58"><a href="#cb2-58" aria-hidden="true" tabindex="-1"></a>        <span class="co">// shader Program</span></span><span id="cb2-59"><a href="#cb2-59" aria-hidden="true" tabindex="-1"></a>        ID <span class="op">=</span> glCreateProgram<span class="op">();</span></span><span id="cb2-60"><a href="#cb2-60" aria-hidden="true" tabindex="-1"></a>        glAttachShader<span class="op">(</span>ID<span class="op">,</span> vertex<span class="op">);</span></span><span id="cb2-61"><a href="#cb2-61" aria-hidden="true" tabindex="-1"></a>        glAttachShader<span class="op">(</span>ID<span class="op">,</span> fragment<span class="op">);</span></span><span id="cb2-62"><a href="#cb2-62" aria-hidden="true" tabindex="-1"></a>        glLinkProgram<span class="op">(</span>ID<span class="op">);</span></span><span id="cb2-63"><a href="#cb2-63" aria-hidden="true" tabindex="-1"></a>        checkCompileErrors<span class="op">(</span>ID<span class="op">,</span> <span class="st">"PROGRAM"</span><span class="op">);</span></span><span id="cb2-64"><a href="#cb2-64" aria-hidden="true" tabindex="-1"></a>        <span class="co">// delete the shaders as they're linked into our program now and no longer necessary</span></span><span id="cb2-65"><a href="#cb2-65" aria-hidden="true" tabindex="-1"></a>        glDeleteShader<span class="op">(</span>vertex<span class="op">);</span></span><span id="cb2-66"><a href="#cb2-66" aria-hidden="true" tabindex="-1"></a>        glDeleteShader<span class="op">(</span>fragment<span class="op">);</span></span><span id="cb2-67"><a href="#cb2-67" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-68"><a href="#cb2-68" aria-hidden="true" tabindex="-1"></a>    <span class="co">// activate the shader</span></span><span id="cb2-69"><a href="#cb2-69" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb2-70"><a href="#cb2-70" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> use<span class="op">()</span></span><span id="cb2-71"><a href="#cb2-71" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-72"><a href="#cb2-72" aria-hidden="true" tabindex="-1"></a>        glUseProgram<span class="op">(</span>ID<span class="op">);</span></span><span id="cb2-73"><a href="#cb2-73" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-74"><a href="#cb2-74" aria-hidden="true" tabindex="-1"></a>    <span class="co">// utility uniform functions</span></span><span id="cb2-75"><a href="#cb2-75" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb2-76"><a href="#cb2-76" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setBool<span class="op">(</span><span class="at">const</span> <span class="bu">std::</span>string<span class="op"> &amp;</span>name<span class="op">,</span> <span class="dt">bool</span> value<span class="op">)</span> <span class="at">const</span></span><span id="cb2-77"><a href="#cb2-77" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-78"><a href="#cb2-78" aria-hidden="true" tabindex="-1"></a>        glUniform1i<span class="op">(</span>glGetUniformLocation<span class="op">(</span>ID<span class="op">,</span> name<span class="op">.</span>c_str<span class="op">()),</span> <span class="op">(</span><span class="dt">int</span><span class="op">)</span>value<span class="op">);</span></span><span id="cb2-79"><a href="#cb2-79" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-80"><a href="#cb2-80" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb2-81"><a href="#cb2-81" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setInt<span class="op">(</span><span class="at">const</span> <span class="bu">std::</span>string<span class="op"> &amp;</span>name<span class="op">,</span> <span class="dt">int</span> value<span class="op">)</span> <span class="at">const</span></span><span id="cb2-82"><a href="#cb2-82" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-83"><a href="#cb2-83" aria-hidden="true" tabindex="-1"></a>        glUniform1i<span class="op">(</span>glGetUniformLocation<span class="op">(</span>ID<span class="op">,</span> name<span class="op">.</span>c_str<span class="op">()),</span> value<span class="op">);</span></span><span id="cb2-84"><a href="#cb2-84" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-85"><a href="#cb2-85" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb2-86"><a href="#cb2-86" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> setFloat<span class="op">(</span><span class="at">const</span> <span class="bu">std::</span>string<span class="op"> &amp;</span>name<span class="op">,</span> <span class="dt">float</span> value<span class="op">)</span> <span class="at">const</span></span><span id="cb2-87"><a href="#cb2-87" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-88"><a href="#cb2-88" aria-hidden="true" tabindex="-1"></a>        glUniform1f<span class="op">(</span>glGetUniformLocation<span class="op">(</span>ID<span class="op">,</span> name<span class="op">.</span>c_str<span class="op">()),</span> value<span class="op">);</span></span><span id="cb2-89"><a href="#cb2-89" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-90"><a href="#cb2-90" aria-hidden="true" tabindex="-1"></a>    <span class="co">//void setMat4(const glm::mat4 mat)</span></span><span id="cb2-91"><a href="#cb2-91" aria-hidden="true" tabindex="-1"></a>    <span class="co">//{</span></span><span id="cb2-92"><a href="#cb2-92" aria-hidden="true" tabindex="-1"></a>    <span class="co">//</span></span><span id="cb2-93"><a href="#cb2-93" aria-hidden="true" tabindex="-1"></a>    <span class="co">//}</span></span><span id="cb2-94"><a href="#cb2-94" aria-hidden="true" tabindex="-1"></a><span class="kw">private</span><span class="op">:</span></span><span id="cb2-95"><a href="#cb2-95" aria-hidden="true" tabindex="-1"></a>    <span class="co">// utility function for checking shader compilation/linking errors.</span></span><span id="cb2-96"><a href="#cb2-96" aria-hidden="true" tabindex="-1"></a>    <span class="co">// ------------------------------------------------------------------------</span></span><span id="cb2-97"><a href="#cb2-97" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> checkCompileErrors<span class="op">(</span><span class="dt">unsigned</span> <span class="dt">int</span> shader<span class="op">,</span> <span class="bu">std::</span>string<span class="op"> </span>type<span class="op">)</span></span><span id="cb2-98"><a href="#cb2-98" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-99"><a href="#cb2-99" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> success<span class="op">;</span></span><span id="cb2-100"><a href="#cb2-100" aria-hidden="true" tabindex="-1"></a>        <span class="co">//char infoLog[1024];</span></span><span id="cb2-101"><a href="#cb2-101" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span><span class="op">*</span> infoLog <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb2-102"><a href="#cb2-102" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>type <span class="op">!=</span> <span class="st">"PROGRAM"</span><span class="op">)</span></span><span id="cb2-103"><a href="#cb2-103" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-104"><a href="#cb2-104" aria-hidden="true" tabindex="-1"></a>            glGetShaderiv<span class="op">(</span>shader<span class="op">,</span> GL_COMPILE_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb2-105"><a href="#cb2-105" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span></span><span id="cb2-106"><a href="#cb2-106" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb2-107"><a href="#cb2-107" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> logLength<span class="op">;</span></span><span id="cb2-108"><a href="#cb2-108" aria-hidden="true" tabindex="-1"></a>                glGetShaderiv<span class="op">(</span>shader<span class="op">,</span> GL_INFO_LOG_LENGTH<span class="op">,</span> <span class="op">&amp;</span>logLength<span class="op">);</span></span><span id="cb2-109"><a href="#cb2-109" aria-hidden="true" tabindex="-1"></a>                <span class="dt">char</span><span class="op">*</span> infoLog <span class="op">=</span> <span class="op">(</span><span class="dt">char</span><span class="op">*)</span>realloc<span class="op">(</span>infoLog<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">char</span><span class="op">)</span> <span class="op">*</span> logLength<span class="op">);</span></span><span id="cb2-110"><a href="#cb2-110" aria-hidden="true" tabindex="-1"></a>                glGetShaderInfoLog<span class="op">(</span>shader<span class="op">,</span> logLength<span class="op">,</span> NULL<span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb2-111"><a href="#cb2-111" aria-hidden="true" tabindex="-1"></a>                <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER_COMPILATION_ERROR of type: "</span> <span class="op">&lt;&lt;</span> type <span class="op">&lt;&lt;</span> <span class="st">"</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="st">"</span><span class="sc">\n</span><span class="st"> -- --------------------------------------------------- -- "</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-112"><a href="#cb2-112" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb2-113"><a href="#cb2-113" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-114"><a href="#cb2-114" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span></span><span id="cb2-115"><a href="#cb2-115" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-116"><a href="#cb2-116" aria-hidden="true" tabindex="-1"></a>            glGetProgramiv<span class="op">(</span>shader<span class="op">,</span> GL_LINK_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb2-117"><a href="#cb2-117" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span></span><span id="cb2-118"><a href="#cb2-118" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb2-119"><a href="#cb2-119" aria-hidden="true" tabindex="-1"></a>                <span class="dt">int</span> logLength<span class="op">;</span></span><span id="cb2-120"><a href="#cb2-120" aria-hidden="true" tabindex="-1"></a>                glGetShaderiv<span class="op">(</span>shader<span class="op">,</span> GL_INFO_LOG_LENGTH<span class="op">,</span> <span class="op">&amp;</span>logLength<span class="op">);</span></span><span id="cb2-121"><a href="#cb2-121" aria-hidden="true" tabindex="-1"></a>                <span class="dt">char</span><span class="op">*</span> infoLog <span class="op">=</span> <span class="op">(</span><span class="dt">char</span><span class="op">*)</span>realloc<span class="op">(</span>infoLog<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">char</span><span class="op">)</span> <span class="op">*</span> logLength<span class="op">);</span></span><span id="cb2-122"><a href="#cb2-122" aria-hidden="true" tabindex="-1"></a>                glGetProgramInfoLog<span class="op">(</span>shader<span class="op">,</span> <span class="dv">1024</span><span class="op">,</span> NULL<span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb2-123"><a href="#cb2-123" aria-hidden="true" tabindex="-1"></a>                <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::PROGRAM_LINKING_ERROR of type: "</span> <span class="op">&lt;&lt;</span> type <span class="op">&lt;&lt;</span> <span class="st">"</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="st">"</span><span class="sc">\n</span><span class="st"> -- --------------------------------------------------- -- "</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb2-124"><a href="#cb2-124" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb2-125"><a href="#cb2-125" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-126"><a href="#cb2-126" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>infoLog <span class="op">!=</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb2-127"><a href="#cb2-127" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-128"><a href="#cb2-128" aria-hidden="true" tabindex="-1"></a>            free<span class="op">(</span>infoLog<span class="op">);</span></span><span id="cb2-129"><a href="#cb2-129" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-130"><a href="#cb2-130" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-131"><a href="#cb2-131" aria-hidden="true" tabindex="-1"></a><span class="op">};</span></span><span id="cb2-132"><a href="#cb2-132" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/2.san-jiao-xing-hui-zhi/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/2.san-jiao-xing-hui-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="绘制基本图形">绘制基本图形</h2><blockquote><p>图形绘制流程 顶点数据--&gt;顶点着色器--&gt;图元装配--&gt;几何着色器--&gt;光栅化--&gt;--&gt;测试和混合glPolygonMode(GL_FRONT_AND_BACK, GL_LINE) 线框模式，GL_FILL 默认模式</p></blockquote><h3 id="重点解释">重点解释</h3><ul><li><p>VBO ,顶点缓冲对象：Vertex Buffer Object &gt; 顶点缓冲对象(VertexBuffer Objects,VBO)管理这个内存，它会在GPU内存（通常被称为显存）中储存大量顶点。 &gt;使用这些缓冲对象的好处是我们可以一次性的发送一大批数据到显卡上，而不是每个顶点发送一次。&gt;从CPU把数据发送到显卡相对较慢，所以只要可能我们都要尝试尽量一次性发送尽可能多的数据。&gt;当数据发送至显卡的内存中后，顶点着色器几乎能立即访问顶点，这是个非常快的过程。</p></li><li><p>VAO ,顶点数组对象：Vertex Array Object &gt; 顶点数组对象(VertexArray Object,VAO)可以像顶点缓冲对象那样被绑定，任何随后的顶点属性调用都会储存在这个VAO中。&gt;这样的好处就是，当配置顶点属性指针时，你只需要将那些调用执行一次，之后再绘制物体的时候只需要绑定相应的VAO就行了。&gt;这使在不同顶点数据和属性配置之间切换变得非常简单，只需要绑定不同的VAO就行了。刚刚设置的所有状态都将存储在VAO中</p></li><li><p>IBO ,索引缓冲对象：Element Buffer Object，EBO或Index BufferObject</p></li></ul><h3 id="vao-vbo-ibo">VAO &amp; VBO &amp;IBO</h3><p><img src="/Sources/imgs/vertex_array_objects_ebo.png"></p><p>OpenGL在画画的时候，要用到很多的信息，如顶点的坐标、纹理、颜色等等....假如一个顶点包含了坐标和颜色的信息，那么这个顶点处的数据格式可能如下：x,y, z, r, g, b这些值会被存储在一个叫VBO (vertex bufferobject)的地方。因而，可以把VBO理解成一个数据区域，这里面存放了渲染所需要的一切信息。但需要注意的是，数据在VBO里面的时候，OpenGL是并不知道这里面的每个数据所代表的具体含义的，只是一堆数值罢了。这时候，VAO(vertexarrayobject)就派上用场了。VAO指定了读取VBO的方式~~假如VBO里面现在存放了如下的内容：x0,y0, z0, r0, g0, b0x1, y1, z1, r1, g1, b1x2, y2, z2, r2, g2,b2VAO可以定义一种格式说，我每次只取VBO里面的x,y,z的值；也可以定义一种格式说，每次只取VBO里面的r,g,b的值。这样我们就可以在渲染的时候，绑定不同的VAO，实现按照不同的格式将VBO里面的东西渲染出来~通过定义VBO里面数据存放的方式、VAO的格式以及合适的GLSL语言，就能够灵活地画出我们所需要的各种图形。也就是说，VAO相当于数组地址,VBO、IBO相当于数据元素 1. 绑定VAOglBindVertexArray(VAO); 2. 绑定VBO glBindBuffer(GL_ARRAY_BUFFER, VBO);1. 复制数据到VBO glBufferData(GL_ARRAY_BUFFER, sizeof(vertices),vertices, GL_STATIC_DRAW); 2. 设置顶点属性的结构glVertexAttribPointer(0, 3, GL_FLOAT, /<em>单位步长</em>/GL_FALSE, 3 *sizeof(float), (void*)0); 3. 设置顶点属性在VAO中的位置glEnableVertexAttribArray(0); 3. 结束此当前顶点属性的绑定glBindBuffer(GL_ARRAY_BUFFER, 0); 4. 结束VAO绑定 glBindVertexArray(0);5.至此VAO包含了VBO顶点属性数据和顶点属性结构的数据。使用时只需要使用切换绑定VAO即可。如下</p><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>glUseProgram<span class="op">(</span>shaderProgram<span class="op">);</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span></code></pre></div><p>`</p><ol type="1"><li>顶点Shader</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co">//简单输出顶点位置 xyz,w =1</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version 330 core\n</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>layout <span class="op">(</span>location <span class="op">=</span> <span class="dv">0</span><span class="op">)</span> in vec3 aPos<span class="op">;</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>   gl_Position <span class="op">=</span> vec4<span class="op">(</span>aPos<span class="op">.</span>x<span class="op">,</span> aPos<span class="op">.</span>y<span class="op">,</span> aPos<span class="op">.</span>z<span class="op">,</span> <span class="fl">1.0</span><span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>片元Shader</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co">//简单输出 (1.0f, 0.5f, 0.2f, 1.0f)的颜色。</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="pp">#</span><span class="er">version 330 core</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>out vec4 FragColor<span class="op">;</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="dt">void</span> main<span class="op">()</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>   FragColor <span class="op">=</span> vec4<span class="op">(</span><span class="fl">1.0</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ol start="3" type="1"><li>编译链接ShaderProgram</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="co">//1顶点Shaderid，片元Shaderid。</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> vertexShader<span class="op">,</span> fragmentShader<span class="op">;</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a><span class="co">//1.1 创建一个顶点ShaderID</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>vertexShader <span class="op">=</span> glCreateShader<span class="op">(</span>GL_VERTEX_SHADER<span class="op">);</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a><span class="co">//1.1 加载并编译顶点Shader</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>glShaderSource<span class="op">(</span>vertexShader<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>vertexShaderSource<span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>glCompileShader<span class="op">(</span>vertexShader<span class="op">);</span></span><span id="cb4-8"><a href="#cb4-8" aria-hidden="true" tabindex="-1"></a><span class="co">//1.2 检查编译状态</span></span><span id="cb4-9"><a href="#cb4-9" aria-hidden="true" tabindex="-1"></a><span class="dt">int</span> success<span class="op">;</span></span><span id="cb4-10"><a href="#cb4-10" aria-hidden="true" tabindex="-1"></a><span class="dt">char</span> infoLog<span class="op">[</span><span class="dv">512</span><span class="op">];</span></span><span id="cb4-11"><a href="#cb4-11" aria-hidden="true" tabindex="-1"></a><span class="co">//1.3 检查顶点vertexShader的编译状态</span></span><span id="cb4-12"><a href="#cb4-12" aria-hidden="true" tabindex="-1"></a>glGetShaderiv<span class="op">(</span>vertexShader<span class="op">,</span> GL_COMPILE_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb4-13"><a href="#cb4-13" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span></span><span id="cb4-14"><a href="#cb4-14" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb4-15"><a href="#cb4-15" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1.4 编译失败，获取错误信息。</span></span><span id="cb4-16"><a href="#cb4-16" aria-hidden="true" tabindex="-1"></a>    glGetShaderInfoLog<span class="op">(</span>vertexShader<span class="op">,</span> <span class="dv">512</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb4-17"><a href="#cb4-17" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER::VERTEX::COMPILATION_FAILED</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb4-18"><a href="#cb4-18" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-19"><a href="#cb4-19" aria-hidden="true" tabindex="-1"></a><span class="co">//同理编译片元Shader .....</span></span><span id="cb4-20"><a href="#cb4-20" aria-hidden="true" tabindex="-1"></a><span class="co">// </span></span><span id="cb4-21"><a href="#cb4-21" aria-hidden="true" tabindex="-1"></a><span class="co">// Shader程序。。。 顶点 + 片元</span></span><span id="cb4-22"><a href="#cb4-22" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> shaderProgram<span class="op">;</span></span><span id="cb4-23"><a href="#cb4-23" aria-hidden="true" tabindex="-1"></a>shaderProgram <span class="op">=</span> glCreateProgram<span class="op">();</span></span><span id="cb4-24"><a href="#cb4-24" aria-hidden="true" tabindex="-1"></a>glAttachShader<span class="op">(</span>shaderProgram<span class="op">,</span> vertexShader<span class="op">);</span></span><span id="cb4-25"><a href="#cb4-25" aria-hidden="true" tabindex="-1"></a>glAttachShader<span class="op">(</span>shaderProgram<span class="op">,</span> fragmentShader<span class="op">);</span></span><span id="cb4-26"><a href="#cb4-26" aria-hidden="true" tabindex="-1"></a>glLinkProgram<span class="op">(</span>shaderProgram<span class="op">);</span></span><span id="cb4-27"><a href="#cb4-27" aria-hidden="true" tabindex="-1"></a><span class="co">//检查Link状态</span></span><span id="cb4-28"><a href="#cb4-28" aria-hidden="true" tabindex="-1"></a>glGetProgramiv<span class="op">(</span>shaderProgram<span class="op">,</span> GL_LINK_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb4-29"><a href="#cb4-29" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span> <span class="op">{</span></span><span id="cb4-30"><a href="#cb4-30" aria-hidden="true" tabindex="-1"></a>    glGetProgramInfoLog<span class="op">(</span>shaderProgram<span class="op">,</span> <span class="dv">512</span><span class="op">,</span> NULL<span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb4-31"><a href="#cb4-31" aria-hidden="true" tabindex="-1"></a>    <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER::PROGRAM::LINK_FAILED</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb4-32"><a href="#cb4-32" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span><span id="cb4-33"><a href="#cb4-33" aria-hidden="true" tabindex="-1"></a><span class="co">// Shader程序成功，使用Shader程序，此时顶点和片元Shader没用删除掉</span></span><span id="cb4-34"><a href="#cb4-34" aria-hidden="true" tabindex="-1"></a>glDeleteShader<span class="op">(</span>vertexShader<span class="op">);</span></span><span id="cb4-35"><a href="#cb4-35" aria-hidden="true" tabindex="-1"></a>glDeleteShader<span class="op">(</span>fragmentShader<span class="op">);</span></span></code></pre></div><ol start="4" type="1"><li>准备顶点数据</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">// id,</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="dt">unsigned</span> <span class="dt">int</span> VAO<span class="op">,</span> VBO<span class="op">;</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a>glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a>glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a>glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a><span class="co">//赋值buffer 数据</span></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a>glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> <span class="co">/*单位步长*/</span>GL_FALSE<span class="op">,</span> <span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a>glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="co">//解除绑定</span></span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span></code></pre></div><ol start="5" type="1"><li>绘制三角形</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a>    glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    glUseProgram<span class="op">(</span>shaderProgram<span class="op">);</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span></code></pre></div><ol start="6" type="1"><li>完整代码</li></ol><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>    <span class="co">//先后顺序</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb7-5"><a href="#cb7-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb7-6"><a href="#cb7-6" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb7-7"><a href="#cb7-7" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb7-8"><a href="#cb7-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">/***************</span></span><span id="cb7-9"><a href="#cb7-9" aria-hidden="true" tabindex="-1"></a><span class="co">          *</span></span><span id="cb7-10"><a href="#cb7-10" aria-hidden="true" tabindex="-1"></a><span class="co">    *           *</span></span><span id="cb7-11"><a href="#cb7-11" aria-hidden="true" tabindex="-1"></a><span class="co">    ****************/</span></span><span id="cb7-12"><a href="#cb7-12" aria-hidden="true" tabindex="-1"></a>    <span class="dt">float</span> vertices<span class="op">[]{</span></span><span id="cb7-13"><a href="#cb7-13" aria-hidden="true" tabindex="-1"></a>        <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-14"><a href="#cb7-14" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="op">-</span><span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span></span><span id="cb7-15"><a href="#cb7-15" aria-hidden="true" tabindex="-1"></a>         <span class="fl">0.0</span><span class="bu">f</span><span class="op">,</span>  <span class="fl">0.5</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.0</span><span class="bu">f</span></span><span id="cb7-16"><a href="#cb7-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">};</span></span><span id="cb7-17"><a href="#cb7-17" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> vertexShaderSource <span class="op">=</span>  <span class="st">"#version 330 core</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-18"><a href="#cb7-18" aria-hidden="true" tabindex="-1"></a>        <span class="st">"layout (location = 0) in vec3 aPos;</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-19"><a href="#cb7-19" aria-hidden="true" tabindex="-1"></a>        <span class="st">"void main()</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-20"><a href="#cb7-20" aria-hidden="true" tabindex="-1"></a>        <span class="st">"{</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-21"><a href="#cb7-21" aria-hidden="true" tabindex="-1"></a>        <span class="st">"   gl_Position = vec4(aPos.x, aPos.y, aPos.z, 1.0);</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-22"><a href="#cb7-22" aria-hidden="true" tabindex="-1"></a>        <span class="st">"}</span><span class="sc">\0</span><span class="st">"</span><span class="op">;</span></span><span id="cb7-23"><a href="#cb7-23" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> fragmentShaderSource <span class="op">=</span> <span class="st">"#version 330 core</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-24"><a href="#cb7-24" aria-hidden="true" tabindex="-1"></a>        <span class="st">"out vec4 FragColor;</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-25"><a href="#cb7-25" aria-hidden="true" tabindex="-1"></a>        <span class="st">"void main()</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-26"><a href="#cb7-26" aria-hidden="true" tabindex="-1"></a>        <span class="st">"{</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-27"><a href="#cb7-27" aria-hidden="true" tabindex="-1"></a>        <span class="st">"   FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);</span><span class="sc">\n</span><span class="st">"</span></span><span id="cb7-28"><a href="#cb7-28" aria-hidden="true" tabindex="-1"></a>        <span class="st">"}</span><span class="sc">\n\0</span><span class="st">"</span><span class="op">;</span></span><span id="cb7-29"><a href="#cb7-29" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb7-30"><a href="#cb7-30" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-31"><a href="#cb7-31" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb7-32"><a href="#cb7-32" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-33"><a href="#cb7-33" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb7-34"><a href="#cb7-34" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-35"><a href="#cb7-35" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb7-36"><a href="#cb7-36" aria-hidden="true" tabindex="-1"></a>            glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb7-37"><a href="#cb7-37" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb7-38"><a href="#cb7-38" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">(</span><span class="at">const</span> <span class="dt">int</span> argc<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span><span class="op">*</span>argv<span class="op">[])</span></span><span id="cb7-39"><a href="#cb7-39" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb7-40"><a href="#cb7-40" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 初始化</span></span><span id="cb7-41"><a href="#cb7-41" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb7-42"><a href="#cb7-42" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-43"><a href="#cb7-43" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb7-44"><a href="#cb7-44" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb7-45"><a href="#cb7-45" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-46"><a href="#cb7-46" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 基本设置</span></span><span id="cb7-47"><a href="#cb7-47" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb7-48"><a href="#cb7-48" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb7-49"><a href="#cb7-49" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb7-50"><a href="#cb7-50" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if __APPLE__</span></span><span id="cb7-51"><a href="#cb7-51" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb7-52"><a href="#cb7-52" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb7-53"><a href="#cb7-53" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 创建窗口</span></span><span id="cb7-54"><a href="#cb7-54" aria-hidden="true" tabindex="-1"></a>        GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb7-55"><a href="#cb7-55" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb7-56"><a href="#cb7-56" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-57"><a href="#cb7-57" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb7-58"><a href="#cb7-58" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb7-59"><a href="#cb7-59" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb7-60"><a href="#cb7-60" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-61"><a href="#cb7-61" aria-hidden="true" tabindex="-1"></a>        <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb7-62"><a href="#cb7-62" aria-hidden="true" tabindex="-1"></a>        glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-63"><a href="#cb7-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb7-64"><a href="#cb7-64" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb7-65"><a href="#cb7-65" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-66"><a href="#cb7-66" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb7-67"><a href="#cb7-67" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb7-68"><a href="#cb7-68" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb7-69"><a href="#cb7-69" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-70"><a href="#cb7-70" aria-hidden="true" tabindex="-1"></a>        <span class="co">//6. 设置视口</span></span><span id="cb7-71"><a href="#cb7-71" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb7-72"><a href="#cb7-72" aria-hidden="true" tabindex="-1"></a>        <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb7-73"><a href="#cb7-73" aria-hidden="true" tabindex="-1"></a>        glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb7-74"><a href="#cb7-74" aria-hidden="true" tabindex="-1"></a>        <span class="co">//**********************</span></span><span id="cb7-75"><a href="#cb7-75" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> vertexShader<span class="op">;</span></span><span id="cb7-76"><a href="#cb7-76" aria-hidden="true" tabindex="-1"></a>        vertexShader <span class="op">=</span> glCreateShader<span class="op">(</span>GL_VERTEX_SHADER<span class="op">);</span></span><span id="cb7-77"><a href="#cb7-77" aria-hidden="true" tabindex="-1"></a>        glShaderSource<span class="op">(</span>vertexShader<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>vertexShaderSource<span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb7-78"><a href="#cb7-78" aria-hidden="true" tabindex="-1"></a>        glCompileShader<span class="op">(</span>vertexShader<span class="op">);</span>          </span><span id="cb7-79"><a href="#cb7-79" aria-hidden="true" tabindex="-1"></a>        <span class="dt">int</span> success<span class="op">;</span></span><span id="cb7-80"><a href="#cb7-80" aria-hidden="true" tabindex="-1"></a>        <span class="dt">char</span> infoLog<span class="op">[</span><span class="dv">512</span><span class="op">];</span></span><span id="cb7-81"><a href="#cb7-81" aria-hidden="true" tabindex="-1"></a>        glGetShaderiv<span class="op">(</span>vertexShader<span class="op">,</span> GL_COMPILE_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb7-82"><a href="#cb7-82" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span></span><span id="cb7-83"><a href="#cb7-83" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-84"><a href="#cb7-84" aria-hidden="true" tabindex="-1"></a>            glGetShaderInfoLog<span class="op">(</span>vertexShader<span class="op">,</span> <span class="dv">512</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb7-85"><a href="#cb7-85" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER::VERTEX::COMPILATION_FAILED</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb7-86"><a href="#cb7-86" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-87"><a href="#cb7-87" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> fragmentShader<span class="op">;</span></span><span id="cb7-88"><a href="#cb7-88" aria-hidden="true" tabindex="-1"></a>        fragmentShader <span class="op">=</span> glCreateShader<span class="op">(</span>GL_FRAGMENT_SHADER<span class="op">);</span></span><span id="cb7-89"><a href="#cb7-89" aria-hidden="true" tabindex="-1"></a>        glShaderSource<span class="op">(</span>fragmentShader<span class="op">,</span> <span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>fragmentShaderSource<span class="op">,</span> NULL<span class="op">);</span></span><span id="cb7-90"><a href="#cb7-90" aria-hidden="true" tabindex="-1"></a>        glCompileShader<span class="op">(</span>fragmentShader<span class="op">);</span></span><span id="cb7-91"><a href="#cb7-91" aria-hidden="true" tabindex="-1"></a>        glGetShaderiv<span class="op">(</span>fragmentShader<span class="op">,</span> GL_COMPILE_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb7-92"><a href="#cb7-92" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span></span><span id="cb7-93"><a href="#cb7-93" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-94"><a href="#cb7-94" aria-hidden="true" tabindex="-1"></a>            glGetShaderInfoLog<span class="op">(</span>fragmentShader<span class="op">,</span> <span class="dv">512</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb7-95"><a href="#cb7-95" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER::VERTEX::COMPILATION_FAILED</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb7-96"><a href="#cb7-96" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-97"><a href="#cb7-97" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> shaderProgram<span class="op">;</span></span><span id="cb7-98"><a href="#cb7-98" aria-hidden="true" tabindex="-1"></a>        shaderProgram <span class="op">=</span> glCreateProgram<span class="op">();</span></span><span id="cb7-99"><a href="#cb7-99" aria-hidden="true" tabindex="-1"></a>        glAttachShader<span class="op">(</span>shaderProgram<span class="op">,</span> vertexShader<span class="op">);</span></span><span id="cb7-100"><a href="#cb7-100" aria-hidden="true" tabindex="-1"></a>        glAttachShader<span class="op">(</span>shaderProgram<span class="op">,</span> fragmentShader<span class="op">);</span></span><span id="cb7-101"><a href="#cb7-101" aria-hidden="true" tabindex="-1"></a>        glLinkProgram<span class="op">(</span>shaderProgram<span class="op">);</span></span><span id="cb7-102"><a href="#cb7-102" aria-hidden="true" tabindex="-1"></a>        glGetProgramiv<span class="op">(</span>shaderProgram<span class="op">,</span> GL_LINK_STATUS<span class="op">,</span> <span class="op">&amp;</span>success<span class="op">);</span></span><span id="cb7-103"><a href="#cb7-103" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>success<span class="op">)</span> <span class="op">{</span></span><span id="cb7-104"><a href="#cb7-104" aria-hidden="true" tabindex="-1"></a>            glGetProgramInfoLog<span class="op">(</span>shaderProgram<span class="op">,</span> <span class="dv">512</span><span class="op">,</span> NULL<span class="op">,</span> infoLog<span class="op">);</span></span><span id="cb7-105"><a href="#cb7-105" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"ERROR::SHADER::PROGRAM::LINK_FAILED</span><span class="sc">\n</span><span class="st">"</span> <span class="op">&lt;&lt;</span> infoLog <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb7-106"><a href="#cb7-106" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-107"><a href="#cb7-107" aria-hidden="true" tabindex="-1"></a>        glDeleteShader<span class="op">(</span>vertexShader<span class="op">);</span></span><span id="cb7-108"><a href="#cb7-108" aria-hidden="true" tabindex="-1"></a>        glDeleteShader<span class="op">(</span>fragmentShader<span class="op">);</span></span><span id="cb7-109"><a href="#cb7-109" aria-hidden="true" tabindex="-1"></a>        <span class="co">// id,</span></span><span id="cb7-110"><a href="#cb7-110" aria-hidden="true" tabindex="-1"></a>        <span class="dt">unsigned</span> <span class="dt">int</span> VAO<span class="op">,</span> VBO<span class="op">;</span></span><span id="cb7-111"><a href="#cb7-111" aria-hidden="true" tabindex="-1"></a>        glGenVertexArrays<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VAO<span class="op">);</span></span><span id="cb7-112"><a href="#cb7-112" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb7-113"><a href="#cb7-113" aria-hidden="true" tabindex="-1"></a>        glGenBuffers<span class="op">(</span><span class="dv">1</span><span class="op">,</span> <span class="op">&amp;</span>VBO<span class="op">);</span></span><span id="cb7-114"><a href="#cb7-114" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> VBO<span class="op">);</span></span><span id="cb7-115"><a href="#cb7-115" aria-hidden="true" tabindex="-1"></a>        <span class="co">//赋值buffer 数据</span></span><span id="cb7-116"><a href="#cb7-116" aria-hidden="true" tabindex="-1"></a>        glBufferData<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="kw">sizeof</span><span class="op">(</span>vertices<span class="op">),</span> vertices<span class="op">,</span> GL_STATIC_DRAW<span class="op">);</span></span><span id="cb7-117"><a href="#cb7-117" aria-hidden="true" tabindex="-1"></a>        glVertexAttribPointer<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">,</span> GL_FLOAT<span class="op">,</span> <span class="co">/*单位步长*/</span>GL_FALSE<span class="op">,</span> <span class="dv">3</span> <span class="op">*</span> <span class="kw">sizeof</span><span class="op">(</span><span class="dt">float</span><span class="op">),</span> <span class="op">(</span><span class="dt">void</span><span class="op">*)</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-118"><a href="#cb7-118" aria-hidden="true" tabindex="-1"></a>        glEnableVertexAttribArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-119"><a href="#cb7-119" aria-hidden="true" tabindex="-1"></a>        <span class="co">//解除绑定</span></span><span id="cb7-120"><a href="#cb7-120" aria-hidden="true" tabindex="-1"></a>        glBindBuffer<span class="op">(</span>GL_ARRAY_BUFFER<span class="op">,</span> <span class="dv">0</span><span class="op">);</span></span><span id="cb7-121"><a href="#cb7-121" aria-hidden="true" tabindex="-1"></a>        glBindVertexArray<span class="op">(</span><span class="dv">0</span><span class="op">);</span></span><span id="cb7-122"><a href="#cb7-122" aria-hidden="true" tabindex="-1"></a>        <span class="co">//**********************</span></span><span id="cb7-123"><a href="#cb7-123" aria-hidden="true" tabindex="-1"></a>        <span class="co">//8. 设置就绪，准备进入渲染的循环。</span></span><span id="cb7-124"><a href="#cb7-124" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb7-125"><a href="#cb7-125" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb7-126"><a href="#cb7-126" aria-hidden="true" tabindex="-1"></a>            <span class="co">//8.0 处理用户输入</span></span><span id="cb7-127"><a href="#cb7-127" aria-hidden="true" tabindex="-1"></a>            processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-128"><a href="#cb7-128" aria-hidden="true" tabindex="-1"></a>            <span class="co">//*************  render</span></span><span id="cb7-129"><a href="#cb7-129" aria-hidden="true" tabindex="-1"></a>            glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb7-130"><a href="#cb7-130" aria-hidden="true" tabindex="-1"></a>            glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb7-131"><a href="#cb7-131" aria-hidden="true" tabindex="-1"></a>            glUseProgram<span class="op">(</span>shaderProgram<span class="op">);</span></span><span id="cb7-132"><a href="#cb7-132" aria-hidden="true" tabindex="-1"></a>            glBindVertexArray<span class="op">(</span>VAO<span class="op">);</span></span><span id="cb7-133"><a href="#cb7-133" aria-hidden="true" tabindex="-1"></a>            glDrawArrays<span class="op">(</span>GL_TRIANGLES<span class="op">,</span> <span class="dv">0</span><span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb7-134"><a href="#cb7-134" aria-hidden="true" tabindex="-1"></a>            <span class="co">//*************</span></span><span id="cb7-135"><a href="#cb7-135" aria-hidden="true" tabindex="-1"></a>            <span class="co">//8.1 交换颜色缓冲,（OpenGL双缓冲）</span></span><span id="cb7-136"><a href="#cb7-136" aria-hidden="true" tabindex="-1"></a>            glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb7-137"><a href="#cb7-137" aria-hidden="true" tabindex="-1"></a>            <span class="co">//8.2 事件派发</span></span><span id="cb7-138"><a href="#cb7-138" aria-hidden="true" tabindex="-1"></a>            glfwPollEvents<span class="op">();</span></span><span id="cb7-139"><a href="#cb7-139" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb7-140"><a href="#cb7-140" aria-hidden="true" tabindex="-1"></a>    TERMINATE<span class="op">:</span></span><span id="cb7-141"><a href="#cb7-141" aria-hidden="true" tabindex="-1"></a>        glfwTerminate<span class="op">();</span></span><span id="cb7-142"><a href="#cb7-142" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb7-143"><a href="#cb7-143" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/01-ji-chu-bu-fen/1.glfw-chuang-kou/"/>
      <url>/2022/08/10/opengl/01-ji-chu-bu-fen/1.glfw-chuang-kou/</url>
      
        <content type="html"><![CDATA[<h2 id="glfw窗口">GLFW窗口</h2><ul><li>头文件<code>glad.h,glfw3.h</code>, 包含顺序 glad，glfw3</li></ul><ol type="1"><li>初始化</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//1. 初始化</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="2" type="1"><li>设置OpenGL配置</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//2. 基本设置, 版本号，和 core_profile</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="pp">#if __APPLE__</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a><span class="pp">#endif</span></span></code></pre></div><ol start="3" type="1"><li>创建窗口</li></ol><div class="sourceCode" id="cb3"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//3. 创建窗口</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a>    GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>        cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span></code></pre></div><ol start="4" type="1"><li>使用glad管理OpenGL指针</li></ol><div class="sourceCode" id="cb4"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>        <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>        <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a>        <span class="co">//return 1;</span></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div><ol start="5" type="1"><li>设置视口和resize回调</li></ol><div class="sourceCode" id="cb5"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="co">//6. 设置视口</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a>glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a>glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span></code></pre></div><ol start="6" type="1"><li>至此基本设置已经完成，进入渲染Loop</li></ol><div class="sourceCode" id="cb6"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="co">//8. 设置就绪，准备进入渲染的循环。</span></span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//8.0 处理用户输入</span></span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">//************渲染纯色背景</span></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>    glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>    glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb6-9"><a href="#cb6-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">//*************</span></span><span id="cb6-10"><a href="#cb6-10" aria-hidden="true" tabindex="-1"></a>    <span class="co">//8.1 交换颜色缓冲,（OpenGL双缓冲）</span></span><span id="cb6-11"><a href="#cb6-11" aria-hidden="true" tabindex="-1"></a>    glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb6-12"><a href="#cb6-12" aria-hidden="true" tabindex="-1"></a>    <span class="co">//8.2 事件派发</span></span><span id="cb6-13"><a href="#cb6-13" aria-hidden="true" tabindex="-1"></a>    glfwPollEvents<span class="op">();</span></span><span id="cb6-14"><a href="#cb6-14" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><ol start="7" type="1"><li>最后在退出时清理window</li></ol><div class="sourceCode" id="cb7"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a>TERMINATE<span class="op">:</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a>glfwTerminate<span class="op">();</span></span></code></pre></div><ol start="8" type="1"><li>完整代码</li></ol><div class="sourceCode" id="cb8"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">&lt;iostream&gt;</span></span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//先后顺序</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"glad/glad.h"</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#include </span><span class="im">"GLFW/glfw3.h"</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>    <span class="kw">using</span> <span class="kw">namespace</span> std<span class="op">;</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">int</span> wWidth <span class="op">=</span> <span class="dv">800</span><span class="op">,</span> wHeight <span class="op">=</span> <span class="dv">600</span><span class="op">;</span></span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>    <span class="at">const</span> <span class="dt">char</span><span class="op">*</span> wName <span class="op">=</span> <span class="st">"LearnOpenGL"</span><span class="op">;</span></span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> framebuffer_size_callback<span class="op">(</span>GLFWwindow<span class="op">*</span> window<span class="op">,</span> <span class="dt">int</span> width<span class="op">,</span> <span class="dt">int</span> height<span class="op">)</span></span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> width<span class="op">,</span> height<span class="op">);</span></span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> processInput<span class="op">(</span>GLFWwindow <span class="op">*</span>window<span class="op">)</span></span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwGetKey<span class="op">(</span>window<span class="op">,</span> GLFW_KEY_ESCAPE<span class="op">)</span> <span class="op">==</span> GLFW_PRESS<span class="op">)</span></span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>            glfwSetWindowShouldClose<span class="op">(</span>window<span class="op">,</span> <span class="kw">true</span><span class="op">);</span></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>    <span class="dt">int</span> main<span class="op">(</span><span class="at">const</span> <span class="dt">int</span> argc<span class="op">,</span> <span class="at">const</span> <span class="dt">char</span><span class="op">*</span>argv<span class="op">[])</span></span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>        <span class="co">//1. 初始化</span></span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>glfwInit<span class="op">()</span> <span class="op">==</span> GLFW_FALSE<span class="op">)</span></span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"init glfw fail"</span><span class="op">;</span></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span><span class="op">;</span></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>        <span class="co">//2. 基本设置</span></span><span id="cb8-35"><a href="#cb8-35" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MAJOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb8-36"><a href="#cb8-36" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_CONTEXT_VERSION_MINOR<span class="op">,</span> <span class="dv">3</span><span class="op">);</span></span><span id="cb8-37"><a href="#cb8-37" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_PROFILE<span class="op">,</span> GLFW_OPENGL_CORE_PROFILE<span class="op">);</span></span><span id="cb8-38"><a href="#cb8-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-39"><a href="#cb8-39" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#if __APPLE__</span></span><span id="cb8-40"><a href="#cb8-40" aria-hidden="true" tabindex="-1"></a>        glfwWindowHint<span class="op">(</span>GLFW_OPENGL_FORWARD_COMPAT<span class="op">,</span> GLFW_TRUE<span class="op">);</span></span><span id="cb8-41"><a href="#cb8-41" aria-hidden="true" tabindex="-1"></a>    <span class="pp">#endif</span></span><span id="cb8-42"><a href="#cb8-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-43"><a href="#cb8-43" aria-hidden="true" tabindex="-1"></a>        <span class="co">//3. 创建窗口</span></span><span id="cb8-44"><a href="#cb8-44" aria-hidden="true" tabindex="-1"></a>        GLFWwindow <span class="op">*</span>window <span class="op">=</span> glfwCreateWindow<span class="op">(</span>wWidth<span class="op">,</span> wHeight<span class="op">,</span> wName<span class="op">,</span> <span class="kw">nullptr</span><span class="op">,</span> <span class="kw">nullptr</span><span class="op">);</span></span><span id="cb8-45"><a href="#cb8-45" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(</span>window <span class="op">==</span> <span class="kw">nullptr</span><span class="op">)</span></span><span id="cb8-46"><a href="#cb8-46" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-47"><a href="#cb8-47" aria-hidden="true" tabindex="-1"></a>            cout <span class="op">&lt;&lt;</span> <span class="st">"Failed to create GLFW window"</span><span class="op">;</span></span><span id="cb8-48"><a href="#cb8-48" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb8-49"><a href="#cb8-49" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb8-50"><a href="#cb8-50" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb8-51"><a href="#cb8-51" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-52"><a href="#cb8-52" aria-hidden="true" tabindex="-1"></a>        <span class="co">//4. 当前主线程上下文窗口</span></span><span id="cb8-53"><a href="#cb8-53" aria-hidden="true" tabindex="-1"></a>        glfwMakeContextCurrent<span class="op">(</span>window<span class="op">);</span></span><span id="cb8-54"><a href="#cb8-54" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-55"><a href="#cb8-55" aria-hidden="true" tabindex="-1"></a>        <span class="co">//5. 使用glad管理OpenGL指针。</span></span><span id="cb8-56"><a href="#cb8-56" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="op">(!</span>gladLoadGLLoader<span class="op">((</span>GLADloadproc<span class="op">)</span>glfwGetProcAddress<span class="op">))</span></span><span id="cb8-57"><a href="#cb8-57" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-58"><a href="#cb8-58" aria-hidden="true" tabindex="-1"></a>            <span class="bu">std::</span>cout<span class="op"> &lt;&lt;</span> <span class="st">"Failed to initialize GLAD"</span> <span class="op">&lt;&lt;</span> <span class="bu">std::</span>endl<span class="op">;</span></span><span id="cb8-59"><a href="#cb8-59" aria-hidden="true" tabindex="-1"></a>            <span class="cf">goto</span> TERMINATE<span class="op">;</span></span><span id="cb8-60"><a href="#cb8-60" aria-hidden="true" tabindex="-1"></a>            <span class="co">//return 1;</span></span><span id="cb8-61"><a href="#cb8-61" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb8-62"><a href="#cb8-62" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-63"><a href="#cb8-63" aria-hidden="true" tabindex="-1"></a>        <span class="co">//6. 设置视口</span></span><span id="cb8-64"><a href="#cb8-64" aria-hidden="true" tabindex="-1"></a>        glViewport<span class="op">(</span><span class="dv">0</span><span class="op">,</span> <span class="dv">0</span><span class="op">,</span> wWidth<span class="op">,</span> wHeight<span class="op">);</span></span><span id="cb8-65"><a href="#cb8-65" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-66"><a href="#cb8-66" aria-hidden="true" tabindex="-1"></a>        <span class="co">//7. 设置resize回调，对应刷新视口</span></span><span id="cb8-67"><a href="#cb8-67" aria-hidden="true" tabindex="-1"></a>        glfwSetFramebufferSizeCallback<span class="op">(</span>window<span class="op">,</span> framebuffer_size_callback<span class="op">);</span></span><span id="cb8-68"><a href="#cb8-68" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-69"><a href="#cb8-69" aria-hidden="true" tabindex="-1"></a>        <span class="co">//8. 设置就绪，准备进入渲染的循环。</span></span><span id="cb8-70"><a href="#cb8-70" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="op">(!</span>glfwWindowShouldClose<span class="op">(</span>window<span class="op">))</span></span><span id="cb8-71"><a href="#cb8-71" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb8-72"><a href="#cb8-72" aria-hidden="true" tabindex="-1"></a>            <span class="co">//8.0 处理用户输入</span></span><span id="cb8-73"><a href="#cb8-73" aria-hidden="true" tabindex="-1"></a>            processInput<span class="op">(</span>window<span class="op">);</span></span><span id="cb8-74"><a href="#cb8-74" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-75"><a href="#cb8-75" aria-hidden="true" tabindex="-1"></a>            <span class="co">//*************  render</span></span><span id="cb8-76"><a href="#cb8-76" aria-hidden="true" tabindex="-1"></a>            glClearColor<span class="op">(</span><span class="fl">0.2</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">0.3</span><span class="bu">f</span><span class="op">,</span> <span class="fl">1.0</span><span class="bu">f</span><span class="op">);</span></span><span id="cb8-77"><a href="#cb8-77" aria-hidden="true" tabindex="-1"></a>            glClear<span class="op">(</span>GL_COLOR_BUFFER_BIT<span class="op">);</span></span><span id="cb8-78"><a href="#cb8-78" aria-hidden="true" tabindex="-1"></a>            <span class="co">//*************</span></span><span id="cb8-79"><a href="#cb8-79" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-80"><a href="#cb8-80" aria-hidden="true" tabindex="-1"></a>            <span class="co">//8.1 交换颜色缓冲,（OpenGL双缓冲）</span></span><span id="cb8-81"><a href="#cb8-81" aria-hidden="true" tabindex="-1"></a>            glfwSwapBuffers<span class="op">(</span>window<span class="op">);</span></span><span id="cb8-82"><a href="#cb8-82" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-83"><a href="#cb8-83" aria-hidden="true" tabindex="-1"></a>            <span class="co">//8.2 事件派发</span></span><span id="cb8-84"><a href="#cb8-84" aria-hidden="true" tabindex="-1"></a>            glfwPollEvents<span class="op">();</span></span><span id="cb8-85"><a href="#cb8-85" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb8-86"><a href="#cb8-86" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-87"><a href="#cb8-87" aria-hidden="true" tabindex="-1"></a>    TERMINATE<span class="op">:</span></span><span id="cb8-88"><a href="#cb8-88" aria-hidden="true" tabindex="-1"></a>        glfwTerminate<span class="op">();</span></span><span id="cb8-89"><a href="#cb8-89" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb8-90"><a href="#cb8-90" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span></code></pre></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/opengl/readme/"/>
      <url>/2022/08/10/opengl/readme/</url>
      
        <content type="html"><![CDATA[<h2 id="参考学习资料">参考学习资料</h2><ul><li><a href="https://learnopengl.com/">LearnOpenGL英文版</a></li><li><a href="https://learnopengl-cn.github.io/">LearnOpenGL中文版</a></li><li><a href="http://www.opengl-tutorial.org/cn/beginners-tutorials/">OpenGL-Tutorial</a></li><li><a href="http://ogldev.atspace.co.uk/www/tutorial01/tutorial01.html">ogl</a></li><li><a href="http://wiki.jikexueyuan.com/project/modern-opengl-tutorial/tutorial1.html">极客学院ogl翻译</a></li><li><a href="https://www.bilibili.com/video/av28667650">b站OpenGL</a></li><li><a href="https://download.csdn.net/download/lady_killer9/11149754">OpenGL编程指南</a></li><li><a href="https://download.csdn.net/download/lady_killer9/10926222">OpenGL超级宝典</a></li><li><a href="https://download.csdn.net/download/lady_killer9/10926222">OpenGL超级宝典</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/lua/1.lua-nei-cun-xie-lou-jian-ce/"/>
      <url>/2022/08/10/lua/1.lua-nei-cun-xie-lou-jian-ce/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><a href="https://www.cnblogs.com/yaukey/p/unity_lua_memory_leak_trace.html">Lua内存检测统计</a></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/08/10/linux-ji-chu/1.linux-ji-chu-ming-ling-xiang-jie/"/>
      <url>/2022/08/10/linux-ji-chu/1.linux-ji-chu-ming-ling-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="linux基础命令详解">Linux基础命令详解</h2><blockquote><p><a href="http://c.biancheng.net/view/723.html">linux 学习</a></p></blockquote><ol type="1"><li><p>scp<code>远程传输文件夹以及文件夹下所有文件，进行远程拷贝并重命名命令</code></p><div class="sourceCode" id="cb1"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="ex">上传目录</span> scp  [-r]   ./util   用户名@ip:/home/wwwroot/limesurvey_back/scp</span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="ex">上传文件</span> scp   ./util   用户名@ip:/home/wwwroot/limesurvey_back/scp </span></code></pre></div><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="ex">远程下载</span> scp  [-r]   jiangzhaowei@211.154.xxx.xxx:/kk/jiangzhaowei/share/webCompileOut.sql     ./</span></code></pre></div><div class="sourceCode" id="cb4"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="ex">添加秘钥</span> scp .ssh/id_rsa.pub xxx@192.168.0.2:~/.ssh/authorized_keys</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="ex">如果多个秘钥，则需要追加</span> “cat id_dsa.pub <span class="op">&gt;&gt;</span> ~/.ssh/authorized_keys ”</span></code></pre></div></li><li><p>查找文件所在路径</p><ol type="1"><li><p>查找文件</p><div class="sourceCode" id="cb5"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="fu">whereis</span> 文件名</span></code></pre></div></li><li><p>查找可执行程序</p><div class="sourceCode" id="cb6"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="fu">which</span> 程序名</span></code></pre></div></li><li><p><a href="https://www.cnblogs.com/lnlvinso/p/9955074.html">find命令</a></p></li></ol></li><li><p>创建连接</p><ol type="1"><li>软连接</li><li>硬链接</li></ol></li><li><p><a href="https://www.cnblogs.com/wangcp-2014/p/9922845.html">nginx</a></p></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>1.基础之坐标系</title>
      <link href="/2020/09/25/3d-shu-xue/1.zuo-biao-xi/"/>
      <url>/2020/09/25/3d-shu-xue/1.zuo-biao-xi/</url>
      
        <content type="html"><![CDATA[<blockquote><p>研究的都是离散数学， 非离散也是依赖精确度， 所以<code>计算机图形学第一准则：近似原则，如果看起来是对的，它就是对的。</code></p></blockquote><ul><li><p>笛卡尔坐标系</p><ul><li>2d 坐标系 和 3d坐标系</li></ul><p><img src="/imgs/dikaer2d.png" style="zoom:80%;"><img src="/imgs\dikaer3d.png" style="zoom:120%;"></p><p>​</p><ul><li>左手坐标系和右手坐标系，<code>不太明确的时候,使用 +x向东， +z向北来对应，比较有效。</code> <img src="/imgs\hand.png"></li></ul></li><li><p>游戏常用坐标系</p><ul><li>世界坐标系</li><li>物体坐标系（本地坐标系）</li><li>摄像机坐标系 (以摄像机为原点，使用左手坐标系)</li><li>惯性坐标系（temp）</li><li>嵌套式坐标系（父空间坐标系）</li></ul></li><li><p>描述坐标系和坐标系转换</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.向量</title>
      <link href="/2020/09/25/3d-shu-xue/2.xiang-liang/"/>
      <url>/2020/09/25/3d-shu-xue/2.xiang-liang/</url>
      
        <content type="html"><![CDATA[<blockquote><p>描述空间的点，方向，变换，相对位置等。</p></blockquote><ul><li><p>数学向量</p><ul><li><p>行向量 <span class="math display">\[\begin{matrix} 1&amp;2&amp;3 \end{matrix}\]</span></p></li><li><p>列向量 <span class="math display">\[\begin{bmatrix}1\\2\\3\end{bmatrix}\]</span></p></li></ul></li><li><p>0 向量，大小为0的向量。 <span class="math display">\[\begin{bmatrix}0&amp;0&amp;0\end{bmatrix} 或者\begin{bmatrix}0\\0\\0\end{bmatrix}\]</span></p></li><li><p>向量和点</p><ul><li>点 只有位置</li><li>向量，位置大小方向</li></ul></li><li><p>向量运算</p><ul><li><p>与标量的<code>+</code>、<code>-</code>、<code>*</code>、<code>/</code>运算，对每个分量单独运算. <code>/</code>运算需要 非0除数。 <span class="math display">\[k * \begin{bmatrix}1&amp;2&amp;3\end{bmatrix}=\begin{bmatrix}1&amp;2&amp;3\end{bmatrix} * k =\begin{bmatrix}1*k&amp;2*k&amp;3*k\end{bmatrix}\]</span></p></li><li><p>长度/模，二维和三维的笛卡尔坐标系，分量方向分别垂直，所以符合<code>勾股定理</code>.<span class="math display">\[\begin{Vmatrix}v\end{Vmatrix} = \sqrt{v_1^2 +v_2^2+ .. + v_n^2},n代表v向量的维数。\]</span></p></li><li><p>标准化向量<del>normalize</del>， <span class="math display">\[v_{normal} = \frac{v}{\begin{Vmatrix}v\end{Vmatrix}}, v为非0向量。\]</span></p></li><li><p>向量和向量<code>+</code>、<code>-</code>运算，<strong><code>需要同维度</code></strong>,对应维度向量相<code>+</code>、<code>-</code>，<strong><code>a-b</code>相减几何意义，<code>b</code>的尾直接连接<code>a</code>的头形成的向量.</strong><span class="math display">\[\begin{bmatrix}1&amp;2&amp;3\end{bmatrix} +\begin{bmatrix}4&amp;5&amp;6\end{bmatrix}=\begin{bmatrix}4&amp;5&amp;6\end{bmatrix}+\begin{bmatrix}1&amp;2&amp;3\end{bmatrix} =\begin{bmatrix}1+4&amp;2+5&amp;3+6\end{bmatrix}, 行向量相加\]</span></p><p><span class="math display">\[\begin{bmatrix}1\\2\\3\end{bmatrix} +\begin{bmatrix}4\\5\\6\end{bmatrix} =\begin{bmatrix}4\\5\\6\end{bmatrix}+\begin{bmatrix}1\\2\\3\end{bmatrix} =\begin{bmatrix}1+4\\2+5\\3+6\end{bmatrix} , 列向量相加\]</span></p><p><span class="math display">\[\begin{bmatrix}1&amp;2&amp;3\end{bmatrix} -\begin{bmatrix}4&amp;5&amp;6\end{bmatrix} =\begin{bmatrix}1-4&amp;2-5&amp;3-6\end{bmatrix}, 行向量相减\]</span></p><p><span class="math display">\[\begin{bmatrix}1\\2\\3\end{bmatrix} -\begin{bmatrix}4\\5\\6\end{bmatrix} =\begin{bmatrix}1-4\\2-5\\3-6\end{bmatrix} , 列向量相减\]</span></p></li><li><p>向量点乘<code>*</code>（内积），对应分量相乘，结果相加，得到一个标量。<code>因此需要维数相同</code><span class="math display">\[a_n * b_n \sum_{i=1}^{n}v_i*k_i, 对应项相乘，并累加。\]</span></p><p><span class="math display">\[\begin{bmatrix}1\\2\\3\end{bmatrix} *\begin{bmatrix}4\\5\\6\end{bmatrix} =\begin{bmatrix}4\\5\\6\end{bmatrix}*\begin{bmatrix}1\\2\\3\end{bmatrix} = 1*4 + 2*5 + 3*6 = 32\]</span></p><ul><li><p>几何解释 <span class="math display">\[a * b=\begin{Vmatrix}a\end{Vmatrix}*\begin{Vmatrix}b\end{Vmatrix}*\cos\theta_{a,b}\]</span></p></li><li><p>几何用途</p><ul><li><p>利用 <code>正</code>、<code>负</code>、<code>0</code>， 判断锐角，直角和钝角。</p></li><li><p><span class="math display">\[a * b_{normal} = a * \frac{b}{\begin{Vmatrix}b\end{Vmatrix}} =\frac{\begin{Vmatrix}a\end{Vmatrix}*\begin{Vmatrix}b\end{Vmatrix}*\cos\theta_{a,b}}{\begin{Vmatrix}b\end{Vmatrix}}=\begin{Vmatrix}a\end{Vmatrix}*\cos\theta_{a,b}， 表示 a在b上的投影。\]</span></p></li></ul></li></ul></li><li><p>向量叉乘 <code>x</code>, 第二位开始循环相乘减去反对称相乘作为上一项元素。 <span class="math display">\[\begin{bmatrix}x_1\\y_1\\z_1\end{bmatrix} \times\begin{bmatrix}x_2\\y_2\\z_2\end{bmatrix} =\begin{bmatrix}y_1*z_2 -z_1*y_2\\z_1*x_2 - x_1*z_2\\x_1*y_2 - x_2*y_1\end{bmatrix}\]</span></p><p><span class="math display">\[\begin{bmatrix}1\\2\\3\end{bmatrix} \times\begin{bmatrix}4\\5\\6\end{bmatrix} =\begin{bmatrix}2*6 - 3*5\\3*4 -1*6\\1*5 - 2*4\end{bmatrix} = \begin{bmatrix}-3\\6\\-3\end{bmatrix}\]</span></p><ul><li>几何解释,叉乘的模等于'a'、<code>b</code>连接的平行四边形面积，方向满足左手法则，由<code>a</code>的头指向，<code>b</code>的尾。axa = 0，ax(axb) = 0 <span class="math display">\[\begin{Vmatrix}a \times b\end{Vmatrix}=\begin{Vmatrix}a\end{Vmatrix}*\begin{Vmatrix}b\end{Vmatrix}*\sin\theta_{a,b}\]</span><img src="D:\gitworkspace\WebSource\imgs\cross.png" style="zoom:80%;"></li></ul></li><li><p>c++ vector 练习。</p><p><a href="../codes/vector.h">vector.h</a></p><ol type="1"><li>类型精度决策</li><li>运算符重载，不要重载过多的运算符，只有操作符意义特别明确。</li><li>仅提供重要的操作</li><li>使用 <code>const</code>,对调用者承诺<strong>不修改对象</strong></li><li>成员方法与非成员方法。</li><li><strong>不要使用虚函数</strong>，总之虚函数并不适合向量类。<ol type="1"><li><code>自定义</code>的向量操作通常没有太大意义。</li><li><code>vector3</code>严格要求速度，如果使用了虚函数，优化器通常不能产生成员函数的内联代码。</li><li>虚函数需要指向虚函数表的指针。向量定义时该指针必须被初始化，并使对象的大小增加<code>25%</code>。存储包含向量的大数组是一种普遍需求。这种情况下，虚函数表指针占用的空间大部分被浪费掉。</li></ol></li><li>向量不适合信息屏蔽（使用公开方法，限制直接访问数据），</li><li>全局常量 0.</li><li>点和向量使用同一个类，怎么使用交给使用者起变量名。</li><li>暂时不做优化。</li></ol></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多线程Thread篇</title>
      <link href="/2020/09/25/godot-yin-qing/3.yuan-ma-fen-xi-os-zhi-duo-xian-cheng/"/>
      <url>/2020/09/25/godot-yin-qing/3.yuan-ma-fen-xi-os-zhi-duo-xian-cheng/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要文件 <a href="">core/os/thread.h</a> 、<a href="">core/os/thread.cpp</a></p></blockquote><ol type="1"><li>线程类 thread 声明原型</li></ol><div class="sourceCode" id="cb1"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>   <span class="kw">typedef</span> <span class="dt">void</span> <span class="op">(*</span>ThreadCreateCallback<span class="op">)(</span><span class="dt">void</span> <span class="op">*</span>p_userdata<span class="op">);</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>   <span class="kw">class</span> Thread <span class="op">{</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>   <span class="kw">public</span><span class="op">:</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 优先权声明</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>   <span class="kw">enum</span> Priority <span class="op">{</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    PRIORITY_LOW<span class="op">,</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    PRIORITY_NORMAL<span class="op">,</span></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    PRIORITY_HIGH</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>   <span class="op">};</span></span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="co">//默认 normal优先级</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>   <span class="kw">struct</span> Settings <span class="op">{</span></span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    Priority priority<span class="op">;</span></span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a>    Settings<span class="op">()</span> <span class="op">{</span> priority <span class="op">=</span> PRIORITY_NORMAL<span class="op">;</span> <span class="op">}</span></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>   <span class="op">};</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>   <span class="kw">typedef</span> <span class="dt">uint64_t</span> ID<span class="op">;</span></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>   <span class="kw">protected</span><span class="op">:</span></span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> Thread <span class="op">*(*</span>create_func<span class="op">)(</span>ThreadCreateCallback p_callback<span class="op">,</span> <span class="dt">void</span> <span class="op">*,</span> <span class="at">const</span> Settings <span class="op">&amp;);</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> ID <span class="op">(*</span>get_thread_id_func<span class="op">)();</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> <span class="dt">void</span> <span class="op">(*</span>wait_to_finish_func<span class="op">)(</span>Thread <span class="op">*);</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> Error <span class="op">(*</span>set_name_func<span class="op">)(</span><span class="at">const</span> String <span class="op">&amp;);</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>   <span class="kw">friend</span> <span class="kw">class</span> Main<span class="op">;</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> ID _main_thread_id<span class="op">;</span></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>   Thread<span class="op">()</span> <span class="op">{}</span></span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>   <span class="kw">public</span><span class="op">:</span></span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>   <span class="kw">virtual</span> ID get_id<span class="op">()</span> <span class="at">const</span> <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> Error set_name<span class="op">(</span><span class="at">const</span> String <span class="op">&amp;</span>p_name<span class="op">);</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a>   _FORCE_INLINE_ <span class="at">static</span> ID get_main_id<span class="op">()</span> <span class="op">{</span> <span class="cf">return</span> _main_thread_id<span class="op">;</span> <span class="op">}</span> <span class="co">///&lt; get the ID of the main thread</span></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> ID get_caller_id<span class="op">();</span> <span class="co">///&lt; get the ID of the caller function ID</span></span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> <span class="dt">void</span> wait_to_finish<span class="op">(</span>Thread <span class="op">*</span>p_thread<span class="op">);</span> <span class="co">///&lt; waits until thread is finished, and deallocates it.</span></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a>   <span class="at">static</span> Thread <span class="op">*</span>create<span class="op">(</span>ThreadCreateCallback p_callback<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>p_user<span class="op">,</span> <span class="at">const</span> Settings <span class="op">&amp;</span>p_settings <span class="op">=</span> Settings<span class="op">());</span> <span class="co">///&lt; Static function to create a thread, will call p_callback</span></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>   <span class="kw">virtual</span> <span class="op">~</span>Thread<span class="op">()</span> <span class="op">{}</span></span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a>   <span class="op">};</span></span></code></pre></div><ol start="2" type="1"><li>Thread实现</li></ol><div class="sourceCode" id="cb2"><pre class="sourceCode cpp"><code class="sourceCode cpp"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a>   <span class="co">// 初始化静态 createcallback = null</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>   Thread <span class="op">*(*</span>Thread<span class="op">::</span>create_func<span class="op">)(</span>ThreadCreateCallback<span class="op">,</span> <span class="dt">void</span> <span class="op">*,</span> <span class="at">const</span> Settings <span class="op">&amp;)</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>   <span class="co">//初始化 getthreadidcallback = null</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>   Thread<span class="op">::</span>ID <span class="op">(*</span>Thread<span class="op">::</span>get_thread_id_func<span class="op">)()</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>   <span class="co">//初始化 waitfinishcallback = null</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>   <span class="dt">void</span> <span class="op">(*</span>Thread<span class="op">::</span>wait_to_finish_func<span class="op">)(</span>Thread <span class="op">*)</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>   <span class="co">//初始化 setnamecallback = null</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>   Error <span class="op">(*</span>Thread<span class="op">::</span>set_name_func<span class="op">)(</span><span class="at">const</span> String <span class="op">&amp;)</span> <span class="op">=</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>   <span class="co">//初始化 mainthread = 0</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>   Thread<span class="op">::</span>ID Thread<span class="op">::</span>_main_thread_id <span class="op">=</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>   </span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>   Thread<span class="op">::</span>ID Thread<span class="op">::</span>get_caller_id<span class="op">()</span> <span class="op">{</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>get_thread_id_func<span class="op">)</span> <span class="op">{</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> get_thread_id_func<span class="op">();</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="dv">0</span><span class="op">;</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>   </span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>   Thread <span class="op">*</span>Thread<span class="op">::</span>create<span class="op">(</span>ThreadCreateCallback p_callback<span class="op">,</span> <span class="dt">void</span> <span class="op">*</span>p_user<span class="op">,</span> <span class="at">const</span> Settings <span class="op">&amp;</span>p_settings<span class="op">)</span> <span class="op">{</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>create_func<span class="op">)</span> <span class="op">{</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> create_func<span class="op">(</span>p_callback<span class="op">,</span> p_user<span class="op">,</span> p_settings<span class="op">);</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="kw">nullptr</span><span class="op">;</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>   </span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>   <span class="dt">void</span> Thread<span class="op">::</span>wait_to_finish<span class="op">(</span>Thread <span class="op">*</span>p_thread<span class="op">)</span> <span class="op">{</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>wait_to_finish_func<span class="op">)</span> <span class="op">{</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>        wait_to_finish_func<span class="op">(</span>p_thread<span class="op">);</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>   </span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>   Error Thread<span class="op">::</span>set_name<span class="op">(</span><span class="at">const</span> String <span class="op">&amp;</span>p_name<span class="op">)</span> <span class="op">{</span></span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="op">(</span>set_name_func<span class="op">)</span> <span class="op">{</span></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> set_name_func<span class="op">(</span>p_name<span class="op">);</span></span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>   </span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> ERR_UNAVAILABLE<span class="op">;</span></span><span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>   <span class="op">}</span></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 3d引擎 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> OS </tag>
            
            <tag> Thread </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.博客网站</title>
      <link href="/2020/09/25/bo-ke-wang-zhan/0.huan-jing/"/>
      <url>/2020/09/25/bo-ke-wang-zhan/0.huan-jing/</url>
      
        <content type="html"><![CDATA[<p>主要设计两款免费切较为简单的网站系统 <a href="1.gitbook.md">gitbook</a>、<a href="2.hexo.md">hexo</a> *hexo针对搭建个人优美博客比较好。 *gitbook针对比较正式的书籍网站或者导出电子书比较有优势。 *hexo和gitbook都使用了nodejs作为构建系统，所系都需要安装nodejs</p><p>共同需要的环境 1. 安装<a href="">nodejs</a>,并设置系统环境变量。 1.下载安装 <img src="/Sources/imgs/nodejs.jpg"> 2. 验证安装版本<code>$ node -v        vx.x.x #版本号</code> 2. 安装<a href="">Git</a>,并设置系统环境变量。 1. 下载安装 <img src="/Sources/imgs/nodejs.jpg"> 2. 验证安装版本<code>$ node -v        vx.x.x #版本号</code> 3. 国内可设置淘宝镜像地址<code>$npm config set registry=http://registry.npm.taobao.org</code></p><p><img src="/Sources/imgs/gitbook.jpg"> <strong>Gitbook</strong> <img src="/Sources/imgs/hexo.jpg"> <strong>Hexo</strong></p>]]></content>
      
      
      <categories>
          
          <category> 博客网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客网站 </tag>
            
            <tag> gitbook </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.gitbook</title>
      <link href="/2020/09/25/bo-ke-wang-zhan/1.gitbook/"/>
      <url>/2020/09/25/bo-ke-wang-zhan/1.gitbook/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li>安装gitbook<ol type="1"><li><p>安装gitbook</p><pre><code> $ npm install gitbook-cli -g</code></pre></li><li><p>验证安装版本</p><pre><code> $ gitbook -V CLI version: 2.3.2 GitBook version: 3.2.3</code></pre></li></ol></li><li>使用('markdown语法')<ol type="1"><li><p>创建文件夹工作区并初始化</p><pre><code>  $ mkdir 文件夹名 &amp; cd 文件夹名   #默认文件夹名作为书名  $ gitbook init                  #在文件夹目录下执行初始化命令</code></pre></li><li><p>完成后自动生成的目录结构<br><code>SUMMARY.md</code> 书目录结构，默认的介绍连接为<code>README.md</code>，网站侧栏的目录。<br><code>README.md</code> 介绍文章</p></li><li><p>编写文章，并在<code>SUMMARY.md</code>添加连接</p></li><li><p>构建</p><pre><code> $gitbook build # 可选参数： 书路径 输出路径,</code></pre></li><li><p>生成, 生成电子书需要安装 <a href="https://calibre-ebook.com/download">转换软件</a>,并添加环境变量。</p><ol type="1"><li><p>网页本地预览,启动成功后使用浏览器访问 ``</p><pre><code>     $ gitbook serve # 可选参数： --port 本机电脑端口</code></pre></li><li><p>生成pdf电子书</p><pre><code>     $ gitbook pdf  # 可选参数 书路径 输出文件路径</code></pre></li><li><p>生成epub电子书</p><pre><code>     $ gitbook epub   # 可选参数 书路径 输出文件路径</code></pre></li><li><p>生成mobi电子书</p><pre><code>     $ gitbook mobi   # 可选参数 书路径 输出文件路径</code></pre></li></ol></li></ol></li><li>插件安装方法<ol type="1"><li>方法一 (速度慢)<ol type="1"><li>在书目录新建 book.json, 添加需要安装的插件<code>{          "plugins":[              "-lunr", "-search", "search-pro",              "expandable-chapters",              "chapter-fold",              "splitter",              "anchor-navigation-ex",              "back-to-top-button",              "prism","-highlight",              "tbfed-pagefooter"          ],          "pluginsConfig": {              "prism": {                            }          }      }</code></li><li>执行 <code>gitbook install</code></li></ol></li><li>方法二 <code>$ npm install gitbook-plugin-插件名</code></li><li>方法三<ol type="1"><li><code>npm init</code> 初始化一个package.json</li><li>在package.json中<code>dependencies</code>添加插件</li><li>使用<code>npm install</code>安装插件</li></ol></li></ol></li><li>常用插件<ol type="1"><li>搜索<a href="https://www.npmjs.com/package/gitbook-plugin-search-pro">search-pro</a>，<ol type="1"><li>兼容性，需要<code>gitbook &gt;= 3.0.0 support</code>,</li><li>插件安装排除冲突<code>"-lunr", "-search", "search-pro"</code></li></ol></li><li>左侧可折叠菜单栏<a href="https://www.npmjs.com/package/gitbook-plugin-chapter-fold">chapter-fold</a><ol type="1"><li>插件安装 <code>"chapter-fold"</code></li><li>插件配置 <code>"chapter-fold":{}</code></li></ol></li><li>左侧可折叠菜单栏2<a href="https://www.npmjs.com/package/gitbook-plugin-chapter-fold">expandable-chapters</a><ol type="1"><li>插件安装 <code>"expandable-chapters"</code></li><li>插件配置 <code>"expandable-chapters":{}</code></li></ol></li><li>可调节侧栏宽度<a href="https://www.npmjs.com/package/gitbook-plugin-splitter">splitter</a><ol type="1"><li>插件安装 <code>"splitter"</code></li></ol></li><li>页面内目录<a href="">page-treeview</a><ol type="1"><li>插件安装 <code>"page-treeview"</code></li><li>插件配置<code>"page-treeview": {          "copyright": "Copyright &amp;#169; aleen42",          "minHeaderCount": "2",          "minHeaderDeep": "2"      }</code></li></ol></li><li>悬浮按钮目录<a href="https://www.npmjs.com/package/gitbook-plugin-anchor-navigation-ex">anchor-navigation-ex</a><ol type="1"><li>插件安装 <code>"anchor-navigation-ex"</code></li></ol></li><li>回到顶部<a href="https://www.npmjs.com/package/gitbook-plugin-back-to-top-button">back-to-top-button</a><ol type="1"><li>插件安装 <code>"back-to-top-button"</code></li></ol></li><li>数学公式支持<a href="https://www.npmjs.com/package/gitbook-plugin-mathjax-pro">mathjax-pro</a><ol type="1"><li>插件安装 <code>"mathjax-pro"</code></li><li>插件配置<code>"mathjax-pro":{          "version": "2.7.5"      }</code></li></ol></li><li>流程图<a href="https://www.npmjs.com/package/gitbook-plugin-flowchart">flowchart</a><ol type="1"><li>插件安装 <code>"flowchart"</code></li><li>插件配置<code>"flowchart": {          "line-color": "red"       }</code></li></ol></li></ol></li><li>其他内容<ul><li>更多插件<a href="https://www.npmjs.com/search?q=gitbook-plugin&amp;ranking=popularity&amp;page=1&amp;perPage=20">https://www.npmjs.com/search?q=gitbook-plugin&amp;ranking=popularity&amp;page=1&amp;perPage=20</a></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 博客网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客网站 </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Hexo</title>
      <link href="/2020/09/25/bo-ke-wang-zhan/2.hexo/"/>
      <url>/2020/09/25/bo-ke-wang-zhan/2.hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo 参考<a href="https://hexo.io/zh-cn/docs/configuration">官网</a></p>]]></content>
      
      
      <categories>
          
          <category> 博客网站 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客网站 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.git</title>
      <link href="/2020/09/25/ban-ben-kong-zhi/1.git/"/>
      <url>/2020/09/25/ban-ben-kong-zhi/1.git/</url>
      
        <content type="html"><![CDATA[<h1 id="git-gitee">git &amp; gitee</h1><h2 id="git-gitee-1">git &amp; gitee</h2><p>国内环境gitee速度较快可作为Clone &amp; poll中转。</p><h2 id="push提交">push提交</h2><div class="sourceCode" id="cb1"><pre class="sourceCode sh"><code class="sourceCode bash"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> push <span class="at">-f</span> git@github.com:<span class="kw">`</span><span class="ex">USERNAME</span><span class="kw">`</span>/<span class="kw">`</span><span class="ex">REPO</span><span class="kw">`</span>.git master:gh-pages</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="fu">git</span> push <span class="at">-f</span> git@gitee.com:<span class="kw">`</span><span class="ex">USERNAME</span><span class="kw">`</span>/<span class="kw">`</span><span class="ex">REPO</span><span class="kw">`</span>.git master:gh-pages</span></code></pre></div><h2 id="同步操作">同步操作</h2><p><a href="https://www.cnblogs.com/einstein-2014731/p/11492637.html"></a></p>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0.概论</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/0.gai-lun/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/0.gai-lun/</url>
      
        <content type="html"><![CDATA[<p>完整流程图</p><pre class="mermaid">graph TD;    0(开始)--&gt;A;    subgraph 人工参与        A[性能指标1]--&gt;分析--&gt;conditionA{问题?}        conditionA--&gt;|是|B;        conditionA--&gt;|否|F;         F[存指标结束]--&gt;合入主干        subgraph 一轮优化            B(确定改进方案)--&gt;优化修改;            优化修改--&gt;性能指标2            性能指标2--&gt;分析diff        end        分析diff--&gt;A    end</pre><p>重新规划</p><pre class="mermaid">graph TD;    0(开始)--&gt;A    subgraph 自动化        A[图表数据指标1]--&gt;B--&gt;conditionA{问题?}        conditionA--&gt;|是|C;        conditionA--&gt;|否|F;         F[存指标结束]--&gt;合入主干                 C(确定改进方案)--&gt;优化修改;        优化修改--&gt;性能指标2        性能指标2--&gt;分析diff        分析diff--&gt;A        subgraph 人工参与            B[分析]        end    end</pre>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.性能调试</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/1.xing-neng-diao-shi/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/1.xing-neng-diao-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="unity-profiler">Unity Profiler</h2><ol type="1"><li>打包需要勾选<ul><li>手动勾选<ol type="1"><li><code>Development Build</code>、</li><li><code>Autoconnect to Profiler</code> (可选)</li><li><code>Deep Profiling Support</code> （deep 支持）</li></ol></li><li>代码勾选<ol type="1"><li>UnityEditor.EditorUserBuildSettings.development/<code>csharp       BuildOptions.Development = true;</code></li><li>UnityEditor.EditorUserBuildSettings.connectProfiler/<code>csharp       BuildOptions.ConnectWithProfiler = true;</code></li><li>UnityEditor.EditorUserBuildSettings.buildWithDeepProfilingSupport/<code>csharp       BuildOptions.EnableDeepProfilingSupport  = true;</code></li></ol></li></ul></li></ol><blockquote><p>--代码调试 Script Debugging:EditorUserBuildSettings.allowDebugging/</p></blockquote><div class="sourceCode" id="cb1"><pre class="sourceCode csharp"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    BuildOptions<span class="op">.</span><span class="fu">AllowDebugging</span>  <span class="op">=</span> <span class="kw">true</span><span class="op">;</span> </span></code></pre></div><ol start="2" type="1"><li><p>ios &gt; build &amp; run 就可以了</p></li><li><p>Android 连接配置<br>&gt; Unity使用的默认端口<code>AndroidProfiler(ADB@127.0.0.1:34999).</code></p><ul><li>配置数据通信传输 &gt; 新版本支持的端口为55000开始，所以34999,改为55002等支持的范围。</li></ul><div class="sourceCode" id="cb2"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a> <span class="ex">$</span> adb forward tcp:34999 localabstract:Unity-包名</span></code></pre></div><ul><li>开启 deep模式</li></ul><div class="sourceCode" id="cb3"><pre class="sourceCode bash"><code class="sourceCode bash"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a> <span class="ex">adb</span> shell am start <span class="at">-n</span> 包名/Activity名 <span class="at">-e</span> <span class="st">'unity'</span> <span class="st">'-deepprofiling'</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a> <span class="co"># adb shell am start -S -n 包名/Activity名 -e 'unity' '-deepprofiling' #停止之前的进程</span></span></code></pre></div></li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.Unity Profiler</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/2.unityprofiler/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/2.unityprofiler/</url>
      
        <content type="html"><![CDATA[<h2 id="cpu">1. CPU</h2><ul><li><ol type="1"><li>渲染图形</li></ol></li><li><ol start="2" type="1"><li>脚本执行</li></ol></li><li><ol start="3" type="1"><li>物理</li></ol></li><li><ol start="4" type="1"><li>动画</li></ol></li><li><ol start="5" type="1"><li>垃圾回收</li></ol></li><li><ol start="6" type="1"><li>光照</li></ol></li><li><ol start="7" type="1"><li>UI</li></ol></li><li><ol start="8" type="1"><li>垂直同步VSync</li></ol></li><li><ol start="9" type="1"><li>其他</li></ol></li></ul><h2 id="memory">2. Memory</h2><ul><li><ol type="1"><li>Scene Memory，场景对象组件。</li></ol></li><li><ol start="2" type="1"><li>Assets 资源</li></ol></li><li><ol start="3" type="1"><li>Builtin Resources 内置资源</li></ol></li><li><ol start="4" type="1"><li>Not Saved标记为DontSave的对象(该对象不保存到场景。加载新场景时，也不会销毁它。它是HideFlags.DontSaveInBuild | HideFlags.DontSaveInEditor |HideFlags.DontUnloadUnusedAsset 的快捷方式)</li></ol></li><li><ol start="5" type="1"><li>其他</li></ol></li></ul><h2 id="rendering">3. Rendering</h2><ul><li><ol type="1"><li>Draw Calls Count, Unity 在一帧内发出的绘制调用总数。Unity在将游戏对象渲染到屏幕时发出绘制调用。这个数字包括非批量绘制调用以及动态和静态批量绘制调用。</li></ol></li><li><ol start="2" type="1"><li>SetPass Calls Count， Unity在一帧中切换用于渲染游戏对象的着色器通道的次数。一个着色器可能包含多个着色器通道，每个通道以不同的方式渲染场景中的游戏对象。</li></ol></li><li><ol start="3" type="1"><li>Total Batches Count。 Unity在一帧内处理的批次总数。这个数字包括静态和动态批次。</li></ol></li><li><ol start="4" type="1"><li>Triangles Count。Unity 在一帧内处理的三角形数。</li></ol></li><li><ol start="5" type="1"><li>Vertices Count Unity 在帧期间处理的顶点数。</li></ol></li><li><ol start="6" type="1"><li>Dynamic Batching、Static Batching、Instancing</li></ol></li><li><ol start="7" type="1"><li>Used Textures Count。 Unity 在帧期间使用的纹理数</li></ol></li><li><ol start="8" type="1"><li>Used Textures Bytes。 纹理使用的内存量。</li></ol></li><li><ol start="9" type="1"><li>Render Textures Count。 Unity 在帧期间使用的 RenderTextures 数</li></ol></li><li><ol start="10" type="1"><li>Render Textures Changes Count。 Unity 在帧期间将一个或多个RenderTextures 设置为渲染目标的次数。</li></ol></li><li><ol start="11" type="1"><li>Used Buffers Count。 所使用的 GPU缓冲区和内存的总数。这包括顶点、索引和计算缓冲区以及渲染所需的所有内部缓冲区。</li></ol></li><li><ol start="12" type="1"><li>Used Buffers Bytes。 RenderTextures 使用的内存量。</li></ol></li><li><ol start="13" type="1"><li>Vertex Buffer Upload In Frame Count。 CPU 在帧中上传到 GPU的几何体数量。这代表顶点/法线/ texcoord 数据。GPU上可能已经有一些几何体。此统计信息仅包括 Unity 在帧中传输的几何体。</li></ol></li><li><ol start="14" type="1"><li>Index Buffer Upload In Frame Count。 PU 在帧中上传到 GPU的几何体数量。这表示三角形索引数据。GPU上可能已经有一些几何体。此统计信息仅包括 Unity 在帧中传输的几何体。</li></ol></li><li><ol start="15" type="1"><li>Index Buffer Upload In Frame Bytes。</li></ol></li><li><ol start="16" type="1"><li>Shadow Casters Count。在一帧中投射阴影的游戏对象的数量。如果一个游戏对象投射多个阴影（因为多个光源照亮它），该对象投射的每个阴影都有一个条目。</li></ol></li></ul><h2 id="ui">4. UI</h2><ul><li><ol type="1"><li>Layout。 布局消耗, 布局组件重点。</li></ol></li><li><ol start="2" type="1"><li>Render。 UI 在完成渲染部分中花费的时间。</li></ol></li><li><ol start="3" type="1"><li>Batches。 显示一起批处理的绘制调用的总数。</li></ol></li><li><ol start="4" type="1"><li>Rebuild。 顶点重建。</li></ol></li><li><ol start="5" type="1"><li>Vertices。用于渲染 UI 某个部分的顶点总数。</li></ol></li></ul><blockquote><p>常见原因： 1. 不与画布共面 (Not Coplanar WithCanvas)：批处理需要对象的矩形变换与画布共面（未旋转）。 2. 画布注入索引(CanvasInjectionIndex)：CanvasGroup组件存在并强制新建批次，例如在其余部分上显示一个组合框的下拉列表时。 3.不同的材质实例、矩形裁剪、纹理、A8 纹理用法 (Different MaterialInstance, Rect clipping, Texture, or A8TextureUsage)：Unity只能将具有相同材质、遮罩、纹理和纹理 Alpha通道用法的对象一起进行处理。</p></blockquote><h2 id="global-illumination">5. Global Illumination</h2><ul><li><ol type="1"><li>Total CPU。消耗的时间。</li></ol></li></ul><h2 id="物理">6. 物理</h2><ul><li><ol type="1"><li>Physics.Processing 或 Physics.Simulate。 消耗时间、调用次数</li></ol></li><li><ol start="2" type="1"><li>物理组件统计。</li></ol></li></ul><h2 id="可用代码">7. 可用代码</h2><ul><li><ol type="1"><li>CustomSampler. 使用 CustomSampler测量脚本代码块的执行时间。生成的信息将显示在 CPU性能分析器中，并且可以通过 Recorder 捕获。&nbsp;使用 CustomSampler来分析代码比使用 Profiler.BeginSample 更高效。这是因为与Profiler.BeginSample 相比，预先创建的 CustomSamplers 具有非常低的 Begin调用开销。</li></ol></li><li><ol start="2" type="1"><li>Profiler</li></ol></li><li><ol start="3" type="1"><li>Recorder</li></ol></li><li><ol start="4" type="1"><li>Sampler</li></ol></li></ul><div class="sourceCode" id="cb1"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// debug 模式</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">development</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//下面为 Unity Profiler 调试选项</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">connectProfiler</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">buildWithDeepProfilingSupport</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    <span class="co">// deep 模式支持</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">buildWithDeepProfilingSupport</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span></code></pre></div><div class="sourceCode" id="cb2"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">;</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="kw">using</span> UnityEngine<span class="op">.</span><span class="fu">Profiling</span><span class="op">;</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a><span class="kw">public</span> <span class="kw">class</span> ProfilerAPITest <span class="op">:</span> MonoBehaviour</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a><span class="op">{</span></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>    CustomSampler sampler<span class="op">;</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    Recorder behaviourUpdateRecorder<span class="op">;</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="fu">Start</span><span class="op">()</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>        sampler <span class="op">=</span> CustomSampler<span class="op">.</span><span class="fu">Create</span><span class="op">(</span><span class="st">"ProfilerAPITest"</span><span class="op">);</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        behaviourUpdateRecorder <span class="op">=</span> Recorder<span class="op">.</span><span class="fu">Get</span><span class="op">(</span><span class="st">"BehaviourUpdate"</span><span class="op">);</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        behaviourUpdateRecorder<span class="op">.</span><span class="fu">enabled</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>    <span class="dt">void</span> <span class="fu">Update</span><span class="op">()</span></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="op">{</span></span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        sampler<span class="op">.</span><span class="fu">Begin</span><span class="op">();</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            GameObject<span class="op">[]</span> gos <span class="op">=</span> <span class="kw">new</span> GameObject<span class="op">[</span><span class="dv">10</span><span class="op">];</span></span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> gos<span class="op">.</span><span class="fu">Length</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>                gos<span class="op">[</span>i<span class="op">]</span> <span class="op">=</span> GameObject<span class="op">.</span><span class="fu">CreatePrimitive</span><span class="op">(</span>PrimitiveType<span class="op">.</span><span class="fu">Cube</span><span class="op">);</span></span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>            <span class="kw">for</span> <span class="op">(</span><span class="dt">int</span> i <span class="op">=</span> <span class="dv">0</span><span class="op">;</span> i <span class="op">&lt;</span> gos<span class="op">.</span><span class="fu">Length</span><span class="op">;</span> i<span class="op">++)</span></span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>            <span class="op">{</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>                GameObject<span class="op">.</span><span class="fu">Destroy</span><span class="op">(</span>gos<span class="op">[</span>i<span class="op">]);</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>            <span class="op">}</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>        sampler<span class="op">.</span><span class="fu">End</span><span class="op">();</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a>        <span class="kw">if</span> <span class="op">(</span>behaviourUpdateRecorder<span class="op">.</span><span class="fu">isValid</span><span class="op">)</span></span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>        <span class="op">{</span></span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>            Debug<span class="op">.</span><span class="fu">Log</span><span class="op">(</span>$<span class="st">"BehaviourUpdate time { behaviourUpdateRecorder.elapsedNanoseconds}"</span><span class="op">);</span></span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>        <span class="op">}</span></span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>    <span class="op">}</span></span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a><span class="op">}</span></span></code></pre></div><p><a href="https://docs.unity3d.com/cn/2022.1/Manual/ProfilerWindow.html">https://docs.unity3d.com/cn/2022.1/Manual/ProfilerWindow.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.Unity Memory Profiler</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/3.unitymemoryprofiler/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/3.unitymemoryprofiler/</url>
      
        <content type="html"><![CDATA[<p>Unity Profiler - Memory 的详细独立工具。</p><div class="sourceCode" id="cb1"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">// debug 模式</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">development</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">//下面为 Unity Profiler 调试选项</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">connectProfiler</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">buildWithDeepProfilingSupport</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    <span class="co">// deep 模式支持</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">buildWithDeepProfilingSupport</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span></code></pre></div><p>Unity App 性能主要分三部分部分：</p><ol type="1"><li>引擎的Native部分</li><li>原生库的Native部分 (lualib、jni、其他c/c++部分)</li><li>非原生游戏部分 (这部分主要使用 Unity Profiler工具检测)</li></ol><p><a href="https://docs.unity3d.com/Packages/com.unity.memoryprofiler@0.2/manual/index.html">https://docs.unity3d.com/Packages/com.unity.memoryprofiler@0.2/manual/index.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.Android Profiler</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/4.androidprofiler/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/4.androidprofiler/</url>
      
        <content type="html"><![CDATA[<p>Android 调试Unity程序，需要使用<code>PlayerSettings.SetIl2CppCompilerConfiguration</code>设置为 Debug 可调式il2cpp。</p><div class="sourceCode" id="cb1"><pre class="sourceCode c#"><code class="sourceCode cs"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a>    <span class="co">//调试 il2cpp</span></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    PlayerSettings<span class="op">.</span><span class="fu">SetIl2CppCompilerConfiguration</span><span class="op">(</span>BuildTargetGroup<span class="op">.</span><span class="fu">Android</span><span class="op">,</span> Il2CppCompilerConfiguration<span class="op">.</span><span class="fu">Debug</span><span class="op">)</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>    <span class="co">// debug 模式</span></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">development</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>    <span class="co">//下面为 Unity Profiler 调试选项</span></span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">connectProfiler</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">buildWithDeepProfilingSupport</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="co">// 代码断点调试</span></span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    EditorUserBuildSettings<span class="op">.</span><span class="fu">allowDebugging</span> <span class="op">=</span> <span class="kw">true</span><span class="op">;</span></span></code></pre></div><p><a href="https://source.android.com/devices/tech/debug/native-memory">https://source.android.com/devices/tech/debug/native-memory</a><a href="https://perfetto.dev/#/heapprofd">Heapprofd</a></p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.RDC Profiler</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/5.renderdoc-python-zi-dong-hua-gong-ju/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/5.renderdoc-python-zi-dong-hua-gong-ju/</url>
      
        <content type="html"><![CDATA[<blockquote><p>自动化截帧/自动化回放分析</p></blockquote><h2 id="截帧-capure.py">截帧 (capure.py)</h2><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="co"># _*_ encoding:utf-8 _*_</span></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> rdc_mudule <span class="im">import</span> <span class="op">*</span></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>rd <span class="op">=</span> IfImportRdcPackage()</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>    status, protocol_to_use <span class="op">=</span> SelectSupportedDeviceProtocols()</span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>    status, protocol_controller, URL <span class="op">=</span> GetDeviceProtocolController(protocol_to_use)</span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    CheckRdcRemoteEnv(protocol_controller, URL)</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>    status,remote_server <span class="op">=</span> ConnectRemoteServer(URL, protocol_controller)</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 填写自己的</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>    executeResult <span class="op">=</span> ExecuteAndInjectPackage(remote_server,<span class="st">'包名'</span>, <span class="st">'启动的Activity名'</span>)</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>    killEvt, th <span class="op">=</span> PingRemoteServer(remote_server)</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a>    <span class="co"># URL, ident, ClientName, ForceConnect</span></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a>    captureController <span class="op">=</span> rd.CreateTargetControl(URL, result.ident, <span class="st">'auto py script'</span>, <span class="va">True</span>)</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> captureController:</span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        KillPingRemoteServer(killEvt, th)</span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>        ShutdownServerAndConnection(remote_server)</span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">RuntimeError</span>(<span class="ss">f"无法连接调试 app"</span>)</span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    logger.info(<span class="ss">f"-------------- 启动调试 成功 --------------"</span>)  </span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 开始截帧率</span></span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    msg <span class="op">=</span> TriggerCapture(captureController, <span class="dv">1</span>)</span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    cap_path <span class="op">=</span> msg.newCapture.path</span><span id="cb1-32"><a href="#cb1-32" aria-hidden="true" tabindex="-1"></a>    cap_id <span class="op">=</span> msg.newCapture.captureId</span><span id="cb1-33"><a href="#cb1-33" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="ss">f"Got new capture at </span><span class="sc">{</span>cap_path<span class="sc">}</span><span class="ss"> which is frame </span><span class="sc">{</span>msg<span class="sc">.</span>newCapture<span class="sc">.</span>frameNumber<span class="sc">}</span><span class="ss"> with </span><span class="sc">{</span>msg<span class="sc">.</span>newCapture<span class="sc">.</span>api<span class="sc">}</span><span class="ss">"</span>)</span><span id="cb1-34"><a href="#cb1-34" aria-hidden="true" tabindex="-1"></a>    </span><span id="cb1-35"><a href="#cb1-35" aria-hidden="true" tabindex="-1"></a>    <span class="co">#结束截帧</span></span><span id="cb1-36"><a href="#cb1-36" aria-hidden="true" tabindex="-1"></a>    captureController.Shutdown()</span><span id="cb1-37"><a href="#cb1-37" aria-hidden="true" tabindex="-1"></a>    captureController <span class="op">=</span> <span class="va">None</span></span><span id="cb1-38"><a href="#cb1-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-39"><a href="#cb1-39" aria-hidden="true" tabindex="-1"></a>    KillPingRemoteServer(killEvt, th)</span><span id="cb1-40"><a href="#cb1-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-41"><a href="#cb1-41" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-42"><a href="#cb1-42" aria-hidden="true" tabindex="-1"></a>    ShutdownServerAndConnection(remote_server)</span><span id="cb1-43"><a href="#cb1-43" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb1-44"><a href="#cb1-44" aria-hidden="true" tabindex="-1"></a></span></code></pre></div><h2 id="回放replay.py">回放(replay.py)</h2><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="co"># _*_ encoding:utf-8 _*_</span></span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> rdc_mudule <span class="im">import</span> <span class="op">*</span></span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>rd <span class="op">=</span> IfImportRdcPackage()</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> ReplayContext(<span class="bu">object</span>):</span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, replayController):</span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>.controller <span class="op">=</span> replayController</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>        <span class="va">self</span>._drawcalls <span class="op">=</span> <span class="va">None</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> GetDrawcalls(<span class="va">self</span>):</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="va">self</span>._drawcalls <span class="op">==</span> <span class="va">None</span>:</span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>._drawcalls <span class="op">=</span> <span class="va">self</span>.controller.GetDrawcalls()</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>._drawcalls</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> GetDrawcalls(<span class="va">self</span>):</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="va">self</span>._drawcalls <span class="op">==</span> <span class="va">None</span>:</span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            <span class="va">self</span>._drawcalls <span class="op">=</span> <span class="va">self</span>.controller.GetDrawcalls()</span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">self</span>._drawcalls</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>    rd.InitialiseReplay(rd.GlobalEnvironment(), [])</span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>    status, protocol_to_use <span class="op">=</span> SelectSupportedDeviceProtocols()</span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    status, protocol_controller, URL <span class="op">=</span> GetDeviceProtocolController(protocol_to_use)</span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>    CheckRdcRemoteEnv(protocol_controller, URL)</span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>    status, remote_server <span class="op">=</span> ConnectRemoteServer(URL, protocol_controller)</span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    <span class="co"># cap_path</span></span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>    status, replayController <span class="op">=</span> remote_server.OpenCapture(rd.RemoteServer.NoPreference, cap_path, rd.ReplayOptions(), <span class="va">None</span>)</span><span id="cb2-32"><a href="#cb2-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-33"><a href="#cb2-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> status <span class="op">!=</span> rd.ReplayStatus.Succeeded:</span><span id="cb2-34"><a href="#cb2-34" aria-hidden="true" tabindex="-1"></a>        <span class="cf">raise</span> <span class="pp">RuntimeError</span>(<span class="ss">f"Couldn't open </span><span class="sc">{</span>cap_path<span class="sc">}</span><span class="ss">, got error </span><span class="sc">{</span><span class="bu">str</span>(result.status)<span class="sc">}</span><span class="ss">"</span>)</span><span id="cb2-35"><a href="#cb2-35" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb2-36"><a href="#cb2-36" aria-hidden="true" tabindex="-1"></a>        sampleCode(replayController)</span><span id="cb2-37"><a href="#cb2-37" aria-hidden="true" tabindex="-1"></a>        <span class="co"># replayController.Shutdown()</span></span><span id="cb2-38"><a href="#cb2-38" aria-hidden="true" tabindex="-1"></a>        <span class="co"># replayController = None</span></span><span id="cb2-39"><a href="#cb2-39" aria-hidden="true" tabindex="-1"></a>        remote_server.CloseCapture(replayController)</span><span id="cb2-40"><a href="#cb2-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-41"><a href="#cb2-41" aria-hidden="true" tabindex="-1"></a>    KillPingRemoteServer(killEvt, th)</span><span id="cb2-42"><a href="#cb2-42" aria-hidden="true" tabindex="-1"></a>    ShutdownServerAndConnection(remote_server)</span><span id="cb2-43"><a href="#cb2-43" aria-hidden="true" tabindex="-1"></a>    rd.ShutdownReplay()</span><span id="cb2-44"><a href="#cb2-44" aria-hidden="true" tabindex="-1"></a>        </span></code></pre></div><h2 id="辅助部分rdc_mudule.py">辅助部分(rdc_mudule.py)</h2><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># _*_ encoding:utf-8 _*_</span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>renderdoc_home  <span class="op">=</span> <span class="st">'C:/Program Files/RenderDoc'</span></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a>renderdoc_pymodule  <span class="op">=</span> renderdoc_home <span class="op">+</span> <span class="st">'/pymodules'</span></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>scripts_home <span class="op">=</span> renderdoc_home <span class="op">+</span><span class="st">'/rdc_pys'</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> sys, os, time, threading</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>sys.path.append(renderdoc_pymodule)</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>sys.path.append(scripts_home)</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>os.environ[<span class="st">"PATH"</span>] <span class="op">+=</span> os.pathsep <span class="op">+</span> os.path.abspath(renderdoc_home)</span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> sys.platform <span class="op">==</span> <span class="st">'win32'</span> <span class="kw">and</span> sys.version_info[<span class="dv">1</span>] <span class="op">&gt;=</span> <span class="dv">8</span>:</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>    os.add_dll_directory(renderdoc_home)</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------- env -------------------------------</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a><span class="co"># import rdc_package </span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> IfImportRdcPackage():</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="st">'renderdoc'</span> <span class="kw">not</span> <span class="kw">in</span> sys.modules <span class="kw">and</span> <span class="st">'_renderdoc'</span> <span class="kw">not</span> <span class="kw">in</span> sys.modules:</span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>        <span class="im">import</span> renderdoc</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> renderdoc</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a><span class="co"># ------------------------------- logic -------------------------------</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>rd <span class="op">=</span> IfImportRdcPackage()</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> collections <span class="im">import</span> namedtuple</span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> logging <span class="im">as</span> logger</span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a><span class="co"># namedtuple('ProtocolSelection', ['protocols', devices])</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> SelectSupportedDeviceProtocols()<span class="op">-&gt;</span>(<span class="bu">bool</span>, <span class="bu">str</span>):</span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a>    protocols <span class="op">=</span> rd.GetSupportedDeviceProtocols()</span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(protocols) <span class="op">&lt;=</span> <span class="dv">0</span>:</span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>        logger.error(<span class="st">'请检查android ndk, sdk， adb环境'</span>)</span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span>, <span class="va">None</span></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>    protocol_to_use <span class="op">=</span> protocols[<span class="dv">0</span>]</span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>    logger.info(<span class="ss">f'多种方式默认连接第一个:</span><span class="sc">{</span>protocol_to_use<span class="sc">}</span><span class="ss">'</span>)</span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="va">True</span>, protocol_to_use</span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> GetDeviceProtocolController(protocol_to_use:<span class="bu">str</span> <span class="op">=</span> <span class="st">'adb'</span>)<span class="op">-&gt;</span>(<span class="bu">bool</span>, rd.DeviceProtocolController, <span class="bu">str</span>):</span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>    protocol_controller <span class="op">=</span> rd.GetDeviceProtocolController(protocol_to_use)</span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>    devices <span class="op">=</span> protocol_controller.GetDevices()</span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="bu">len</span>(devices) <span class="op">==</span> <span class="dv">0</span>:</span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>        logger.error(<span class="ss">f"没有 </span><span class="sc">{</span>protocol_to_use<span class="sc">}</span><span class="ss"> 设备连接,请检查设备是否连接，以及调试模式是否开启"</span>)</span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span>, protocol_controller,<span class="va">None</span></span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>    dev <span class="op">=</span> devices[<span class="dv">0</span>]</span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>    name <span class="op">=</span> protocol_controller.GetFriendlyName(dev)</span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>    logger.info(<span class="ss">f'多个设备默认连接第一个:</span><span class="sc">{</span>dev<span class="sc">}</span><span class="ss"> - named </span><span class="sc">{</span>name<span class="sc">}</span><span class="ss">'</span>)</span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>    URL <span class="op">=</span> protocol_controller.GetProtocolName() <span class="op">+</span> <span class="st">"://"</span> <span class="op">+</span> dev</span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> <span class="va">True</span>, protocol_controller,URL</span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> CheckRdcRemoteEnv(protocol_controller:rd.DeviceProtocolController, URL:<span class="bu">str</span>):</span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> protocol_controller.IsSupported(URL):</span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>        logger.error(<span class="ss">f"</span><span class="sc">{</span>dev<span class="sc">}</span><span class="ss"> 不支持 'capture/replay' - 可能版本太低?"</span>)</span><span id="cb3-63"><a href="#cb3-63" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span> <span class="va">False</span></span><span id="cb3-64"><a href="#cb3-64" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-65"><a href="#cb3-65" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> protocol_controller.SupportsMultiplePrograms(URL):</span><span id="cb3-66"><a href="#cb3-66" aria-hidden="true" tabindex="-1"></a>        ident <span class="op">=</span> rd.EnumerateRemoteTargets(URL, <span class="dv">0</span>)</span><span id="cb3-67"><a href="#cb3-67" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> ident <span class="op">!=</span> <span class="dv">0</span>:</span><span id="cb3-68"><a href="#cb3-68" aria-hidden="true" tabindex="-1"></a>            logger.error(<span class="ss">f"</span><span class="sc">{</span>name<span class="sc">}</span><span class="ss"> 已经有一个rdc 程序正在运行,默认强制关闭 </span><span class="sc">{</span>ident<span class="sc">}</span><span class="ss">"</span>)</span><span id="cb3-69"><a href="#cb3-69" aria-hidden="true" tabindex="-1"></a>            <span class="co"># 强制关闭 </span><span class="al">TODO</span></span><span id="cb3-70"><a href="#cb3-70" aria-hidden="true" tabindex="-1"></a>  </span><span id="cb3-71"><a href="#cb3-71" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-72"><a href="#cb3-72" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> ConnectRemoteServer(URL:<span class="bu">str</span>, protocol_controller:rd.DeviceProtocolController)<span class="op">-&gt;</span>(<span class="bu">bool</span>, rd.RemoteServer):</span><span id="cb3-73"><a href="#cb3-73" aria-hidden="true" tabindex="-1"></a>    <span class="co">'''</span></span><span id="cb3-74"><a href="#cb3-74" aria-hidden="true" tabindex="-1"></a><span class="co">    连接远程服务器, 自动重试次数20次</span></span><span id="cb3-75"><a href="#cb3-75" aria-hidden="true" tabindex="-1"></a><span class="co">    '''</span></span><span id="cb3-76"><a href="#cb3-76" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-77"><a href="#cb3-77" aria-hidden="true" tabindex="-1"></a>    status,remote_server <span class="op">=</span> rd.CreateRemoteServerConnection(URL)</span><span id="cb3-78"><a href="#cb3-78" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> status <span class="op">==</span> rd.ReplayStatus.NetworkIOFailed <span class="kw">and</span> protocol_controller <span class="kw">is</span> <span class="kw">not</span> <span class="va">None</span>:</span><span id="cb3-79"><a href="#cb3-79" aria-hidden="true" tabindex="-1"></a>        maxRetry <span class="op">=</span> <span class="dv">20</span></span><span id="cb3-80"><a href="#cb3-80" aria-hidden="true" tabindex="-1"></a>        retry <span class="op">=</span> <span class="dv">1</span></span><span id="cb3-81"><a href="#cb3-81" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 循环重新启动</span></span><span id="cb3-82"><a href="#cb3-82" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="va">True</span>:</span><span id="cb3-83"><a href="#cb3-83" aria-hidden="true" tabindex="-1"></a>            status <span class="op">=</span> protocol_controller.StartRemoteServer(URL)</span><span id="cb3-84"><a href="#cb3-84" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> status <span class="op">==</span> rd.ReplayStatus.Succeeded:</span><span id="cb3-85"><a href="#cb3-85" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb3-86"><a href="#cb3-86" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-87"><a href="#cb3-87" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> retry <span class="op">&gt;</span> maxRetry:</span><span id="cb3-88"><a href="#cb3-88" aria-hidden="true" tabindex="-1"></a>                <span class="cf">raise</span> <span class="pp">TimeoutError</span>(<span class="st">'启动rdc remote server fail'</span>)</span><span id="cb3-89"><a href="#cb3-89" aria-hidden="true" tabindex="-1"></a>            logger.error(<span class="ss">f"启动远程 rdc server error: </span><span class="sc">{</span><span class="bu">str</span>(status)<span class="sc">}</span><span class="ss">, 重新尝试启动 第</span><span class="sc">{</span>retry<span class="sc">}</span><span class="ss"> 次"</span>)</span><span id="cb3-90"><a href="#cb3-90" aria-hidden="true" tabindex="-1"></a>            retry <span class="op">=</span> retry <span class="op">+</span><span class="dv">1</span></span><span id="cb3-91"><a href="#cb3-91" aria-hidden="true" tabindex="-1"></a>            time.sleep(<span class="fl">0.5</span>)</span><span id="cb3-92"><a href="#cb3-92" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-93"><a href="#cb3-93" aria-hidden="true" tabindex="-1"></a>        retry <span class="op">=</span> <span class="dv">1</span></span><span id="cb3-94"><a href="#cb3-94" aria-hidden="true" tabindex="-1"></a>        <span class="co"># 循环连接</span></span><span id="cb3-95"><a href="#cb3-95" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> <span class="va">True</span>:</span><span id="cb3-96"><a href="#cb3-96" aria-hidden="true" tabindex="-1"></a>            status,remote_server <span class="op">=</span> rd.CreateRemoteServerConnection(URL)</span><span id="cb3-97"><a href="#cb3-97" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> status <span class="op">==</span> rd.ReplayStatus.Succeeded:</span><span id="cb3-98"><a href="#cb3-98" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb3-99"><a href="#cb3-99" aria-hidden="true" tabindex="-1"></a>            </span><span id="cb3-100"><a href="#cb3-100" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> retry <span class="op">&gt;</span> maxRetry:</span><span id="cb3-101"><a href="#cb3-101" aria-hidden="true" tabindex="-1"></a>                <span class="cf">raise</span> <span class="pp">TimeoutError</span>(<span class="st">'连接rdc remote server fail'</span>)</span><span id="cb3-102"><a href="#cb3-102" aria-hidden="true" tabindex="-1"></a>            logger.error(<span class="ss">f"连接 rdc server error: </span><span class="sc">{</span><span class="bu">str</span>(status)<span class="sc">}</span><span class="ss">, 重新尝试启动 第</span><span class="sc">{</span>retry<span class="sc">}</span><span class="ss"> 次"</span>)</span><span id="cb3-103"><a href="#cb3-103" aria-hidden="true" tabindex="-1"></a>            retry <span class="op">=</span> retry <span class="op">+</span><span class="dv">1</span></span><span id="cb3-104"><a href="#cb3-104" aria-hidden="true" tabindex="-1"></a>            time.sleep(<span class="fl">0.1</span>)</span><span id="cb3-105"><a href="#cb3-105" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-106"><a href="#cb3-106" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> status, remote_server</span><span id="cb3-107"><a href="#cb3-107" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-108"><a href="#cb3-108" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> PingRemoteServer(remote_server:rd.RemoteServer)<span class="op">-&gt;</span>(threading.Event, threading.Thread):</span><span id="cb3-109"><a href="#cb3-109" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> ping_remote(remote_server, kill):</span><span id="cb3-110"><a href="#cb3-110" aria-hidden="true" tabindex="-1"></a>        success <span class="op">=</span> <span class="va">True</span></span><span id="cb3-111"><a href="#cb3-111" aria-hidden="true" tabindex="-1"></a>        <span class="cf">while</span> success <span class="kw">and</span> <span class="kw">not</span> kill.is_set():</span><span id="cb3-112"><a href="#cb3-112" aria-hidden="true" tabindex="-1"></a>            success <span class="op">=</span> remote_server.Ping()</span><span id="cb3-113"><a href="#cb3-113" aria-hidden="true" tabindex="-1"></a>            time.sleep(<span class="dv">1</span>)</span><span id="cb3-114"><a href="#cb3-114" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-115"><a href="#cb3-115" aria-hidden="true" tabindex="-1"></a>    kill <span class="op">=</span> threading.Event()</span><span id="cb3-116"><a href="#cb3-116" aria-hidden="true" tabindex="-1"></a>    ping_thread <span class="op">=</span> threading.Thread(target<span class="op">=</span>ping_remote, args<span class="op">=</span>(remote_server,kill))</span><span id="cb3-117"><a href="#cb3-117" aria-hidden="true" tabindex="-1"></a>    ping_thread.start()</span><span id="cb3-118"><a href="#cb3-118" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> kill, ping_thread</span><span id="cb3-119"><a href="#cb3-119" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-120"><a href="#cb3-120" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> ExecuteAndInjectPackage(remote_server:rd.RemoteServer, package:<span class="bu">str</span>, activity:<span class="bu">str</span>):</span><span id="cb3-121"><a href="#cb3-121" aria-hidden="true" tabindex="-1"></a>    <span class="co"># if not package or len(package.split('.'))[2] != 'Alibaba':</span></span><span id="cb3-122"><a href="#cb3-122" aria-hidden="true" tabindex="-1"></a>    <span class="co">#     pass</span></span><span id="cb3-123"><a href="#cb3-123" aria-hidden="true" tabindex="-1"></a>    <span class="co"># if not package or not activity:</span></span><span id="cb3-124"><a href="#cb3-124" aria-hidden="true" tabindex="-1"></a>    <span class="co">#     logger.error(f"参数不正确，package/activity不对, 请仔细检查: {package}, {activity}")</span></span><span id="cb3-125"><a href="#cb3-125" aria-hidden="true" tabindex="-1"></a>    <span class="co">#     return False, None</span></span><span id="cb3-126"><a href="#cb3-126" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-127"><a href="#cb3-127" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 屏蔽检查， 硬性速度</span></span><span id="cb3-128"><a href="#cb3-128" aria-hidden="true" tabindex="-1"></a>    home <span class="op">=</span> remote_server.GetHomeFolder()</span><span id="cb3-129"><a href="#cb3-129" aria-hidden="true" tabindex="-1"></a>    InstalledPackages <span class="op">=</span> [path.filename <span class="cf">for</span> path <span class="kw">in</span>  remote_server.ListFolder(home)]</span><span id="cb3-130"><a href="#cb3-130" aria-hidden="true" tabindex="-1"></a>    <span class="co"># if package not in InstalledPackages:</span></span><span id="cb3-131"><a href="#cb3-131" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> pkg <span class="kw">in</span> InstalledPackages:</span><span id="cb3-132"><a href="#cb3-132" aria-hidden="true" tabindex="-1"></a>        logger.info(<span class="ss">f"  --  </span><span class="sc">{</span>pkg<span class="sc">}</span><span class="ss">"</span>)</span><span id="cb3-133"><a href="#cb3-133" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-134"><a href="#cb3-134" aria-hidden="true" tabindex="-1"></a>    <span class="co">#     logger.error(f"没有安装游戏包， 或者包名不对, 请仔细检查: {package}")</span></span><span id="cb3-135"><a href="#cb3-135" aria-hidden="true" tabindex="-1"></a>    <span class="co">#     return False,None</span></span><span id="cb3-136"><a href="#cb3-136" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-137"><a href="#cb3-137" aria-hidden="true" tabindex="-1"></a>    packageFullName <span class="op">=</span> package <span class="op">+</span><span class="st">'/'</span> <span class="op">+</span> activity</span><span id="cb3-138"><a href="#cb3-138" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-139"><a href="#cb3-139" aria-hidden="true" tabindex="-1"></a>    executeResult <span class="op">=</span> remote_server.ExecuteAndInject(packageFullName, <span class="st">''</span>, <span class="st">''</span>, [], rd.GetDefaultCaptureOptions())</span><span id="cb3-140"><a href="#cb3-140" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-141"><a href="#cb3-141" aria-hidden="true" tabindex="-1"></a>    maxRetry <span class="op">=</span> <span class="dv">3</span></span><span id="cb3-142"><a href="#cb3-142" aria-hidden="true" tabindex="-1"></a>    retry <span class="op">=</span> <span class="dv">1</span></span><span id="cb3-143"><a href="#cb3-143" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="va">True</span>:</span><span id="cb3-144"><a href="#cb3-144" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> executeResult.status <span class="op">==</span> rd.ReplayStatus.Succeeded:   </span><span id="cb3-145"><a href="#cb3-145" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span><span id="cb3-146"><a href="#cb3-146" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-147"><a href="#cb3-147" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> retry <span class="op">&gt;</span> maxRetry:</span><span id="cb3-148"><a href="#cb3-148" aria-hidden="true" tabindex="-1"></a>            <span class="cf">raise</span> <span class="pp">Exception</span>(<span class="st">'启动app fail, 请检查连接以及开发者模式等选项'</span>)</span><span id="cb3-149"><a href="#cb3-149" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-150"><a href="#cb3-150" aria-hidden="true" tabindex="-1"></a>        logger.error(<span class="ss">f"启动app 失败 </span><span class="sc">{</span>packageFullName<span class="sc">}</span><span class="ss">, error </span><span class="sc">{</span><span class="bu">str</span>(executeResult.status)<span class="sc">}</span><span class="ss">, 重试启动 第</span><span class="sc">{</span>retry<span class="sc">}</span><span class="ss">次"</span>)            </span><span id="cb3-151"><a href="#cb3-151" aria-hidden="true" tabindex="-1"></a>        executeResult <span class="op">=</span> remote_server.ExecuteAndInject(packageFullName, <span class="st">''</span>, <span class="st">''</span>, [], rd.GetDefaultCaptureOptions())</span><span id="cb3-152"><a href="#cb3-152" aria-hidden="true" tabindex="-1"></a>        retry <span class="op">=</span> retry <span class="op">+</span><span class="dv">1</span></span><span id="cb3-153"><a href="#cb3-153" aria-hidden="true" tabindex="-1"></a>        time.sleep(<span class="fl">0.5</span>)</span><span id="cb3-154"><a href="#cb3-154" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> executeResult</span><span id="cb3-155"><a href="#cb3-155" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-156"><a href="#cb3-156" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> TriggerCapture(targetController: rd.TargetControl, count: <span class="bu">int</span> <span class="op">=</span> <span class="dv">1</span>)<span class="op">-&gt;</span>rd.TargetControlMessage:</span><span id="cb3-157"><a href="#cb3-157" aria-hidden="true" tabindex="-1"></a>    target.TriggerCapture(<span class="dv">1</span>)</span><span id="cb3-158"><a href="#cb3-158" aria-hidden="true" tabindex="-1"></a>    msg <span class="op">=</span> <span class="va">None</span></span><span id="cb3-159"><a href="#cb3-159" aria-hidden="true" tabindex="-1"></a>    start <span class="op">=</span> time.clock()</span><span id="cb3-160"><a href="#cb3-160" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> msg <span class="kw">is</span> <span class="va">None</span> <span class="kw">or</span> msg.<span class="bu">type</span> <span class="op">!=</span> rd.TargetControlMessageType.NewCapture:</span><span id="cb3-161"><a href="#cb3-161" aria-hidden="true" tabindex="-1"></a>        msg <span class="op">=</span> target.ReceiveMessage(<span class="va">None</span>)</span><span id="cb3-162"><a href="#cb3-162" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> time.clock() <span class="op">-</span> start <span class="op">&gt;</span> <span class="dv">30</span>:</span><span id="cb3-163"><a href="#cb3-163" aria-hidden="true" tabindex="-1"></a>            <span class="cf">break</span></span><span id="cb3-164"><a href="#cb3-164" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> msg</span><span id="cb3-165"><a href="#cb3-165" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-166"><a href="#cb3-166" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-167"><a href="#cb3-167" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> KillPingRemoteServer(evt: threading.Event, th: threading.Thread):</span><span id="cb3-168"><a href="#cb3-168" aria-hidden="true" tabindex="-1"></a>    kill.<span class="bu">set</span>()</span><span id="cb3-169"><a href="#cb3-169" aria-hidden="true" tabindex="-1"></a>    ping_thread.join()</span><span id="cb3-170"><a href="#cb3-170" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-171"><a href="#cb3-171" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> ShutdownServerAndConnection(remote_server:rd.RemoteServer):</span><span id="cb3-172"><a href="#cb3-172" aria-hidden="true" tabindex="-1"></a>    <span class="co">'''</span></span><span id="cb3-173"><a href="#cb3-173" aria-hidden="true" tabindex="-1"></a><span class="co">    断开远程服务器</span></span><span id="cb3-174"><a href="#cb3-174" aria-hidden="true" tabindex="-1"></a><span class="co">    '''</span></span><span id="cb3-175"><a href="#cb3-175" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> <span class="kw">not</span> remote_server:</span><span id="cb3-176"><a href="#cb3-176" aria-hidden="true" tabindex="-1"></a>        <span class="cf">return</span></span><span id="cb3-177"><a href="#cb3-177" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-178"><a href="#cb3-178" aria-hidden="true" tabindex="-1"></a>    remote_server.ShutdownServerAndConnection()</span><span id="cb3-179"><a href="#cb3-179" aria-hidden="true" tabindex="-1"></a></span></code></pre></div>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.Unity各个平台贴图格式</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/6.unity-ge-ge-ping-tai-tie-tu-ge-shi/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/6.unity-ge-ge-ping-tai-tie-tu-ge-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="pc">PC</h2><ul><li>默认<ul><li>RGB Compressed DXT1<br></li><li>RGBA Compressed DXT5</li></ul></li><li>RGB<ul><li>RGB Crunched DXT1</li><li>RGB Compressed DXT1</li><li>RGB Crunched DXT5</li><li>RGB Compressed DXT5</li></ul></li><li>RGBA<ul><li>RGBA Crunched DXT1</li><li>RGBA Compressed DXT1</li><li>RGBA Crunched DXT15</li><li>RGBA Compressed DXT5</li></ul></li></ul><h2 id="android">Android</h2><blockquote><p>ETC 不支持alpha通道， ETC2 支持alpha通道，需要OpenGL ES 3.0支持。</p></blockquote><ul><li>默认<ul><li>RGB Compressed ETC 4 bits<br></li><li>RGBA Compressed ETC2 8 bits</li></ul></li><li>RGB<ul><li>RGB Crunched ETC</li><li>RGB Compressed ETC 4 bits</li><li>RGB Compressed ETC2 4 bits</li></ul></li><li>RGBA<ul><li>RGBA Crunched ETC2</li><li>RGB + 1-bit Alpha Crunched ETC2 4 bits</li><li>RGBA Compressed ETC2 4 bits</li><li>RGBA Compressed ETC2 8 bits</li></ul></li></ul><h2 id="ios">ios</h2><ul><li>默认<ul><li>RGB Compressed PVRTC 4 bits<br></li><li>RGBA Compressed PVRTC 4 bits<br></li><li>RGB ASTC(4x4、5x5、6x6、8x8、10x10、12x12)。</li></ul></li><li>RGB<ul><li>RGB Compressed PVRTC 2 bits<br></li><li>RGB Compressed PVRTC 4 bits</li><li>RGBA ASTC(4x4、5x5、6x6、8x8、10x10、12x12)。</li></ul></li><li>RGBA<ul><li>RGBA Compressed PVRTC 2 bits<br></li><li>RGBA Compressed PVRTC 4 bits</li></ul></li></ul><h2 id="通用全平台无压缩格式">通用全平台<code>无压缩</code>格式</h2><ul><li>RGB16， 对渐变支持不好</li><li>RGB32，</li><li>RGBA16， 对渐变支持不好</li><li>RGBA32，</li></ul><h2 id="androidetc2fallback">AndroidETC2Fallback</h2><blockquote><p>此枚举具有不同质量的值，用于在不支持 ETC2 纹理格式的 Android设备上解压缩 ETC2 纹理。 * Quality32Bit 纹理将解压缩为 RGBA32 格式。 *Quality16Bit 纹理将解压缩为合适的 16 位格式。 * Quality32BitDownscaled纹理将解压缩为 RGBA32 格式，并缩小为原始纹理宽度和高度的一半。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8. GPU优化</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/8.gpu/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/8.gpu/</url>
      
        <content type="html"><![CDATA[<h2 id="一gpu">一、GPU</h2><ol type="1"><li>SetPassCall渲染状态切换频次控制</li><li>DrawCall数量控制</li><li>带宽负载</li><li>显存占用</li><li>GPU计算量</li></ol><h2 id="二资源优化">二、资源优化</h2><ol type="1"><li>纹理优化</li><li>UI优化</li><li>字体优化</li><li>模型优化</li><li>场景优化</li><li>粒子优化</li><li>材质优化</li><li>指定标准美术规范</li><li>Shader变体数量优化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7. CPU优化</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/7.cpu/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/7.cpu/</url>
      
        <content type="html"><![CDATA[<p>cpu耗时 1. drawcall 2. 动画 3. 资源加卸载 4. ugui 问题 1. Rebuild 2.Raycast 5. GC系统 1. lua gc 2. C# GC 6. 分帧撞上下一帧重任务 7.自定义控件效率 8. 常驻周期函数 1. Update 2. LateUpdate 3. OnGUI 4.FixedUpdate 9. 引擎系统 1. 网络序列化&amp;派发 2. 输入指令的频率 3.分模块监控 4. 数据包合并 5. 代码效率以及重构</p>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9.网络数据优化</title>
      <link href="/2020/09/25/unity/xing-neng-you-hua/9.wang-luo-shu-ju/"/>
      <url>/2020/09/25/unity/xing-neng-you-hua/9.wang-luo-shu-ju/</url>
      
        <content type="html"><![CDATA[<h2 id="一网络优化">一、网络优化</h2><ol type="1"><li>减少无用字段</li><li>降低字段精度</li><li>避免重复发送</li><li>网络异步化</li><li>压缩无效字节</li><li>压缩协议包</li></ol>]]></content>
      
      
      <categories>
          
          <category> 性能优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
            <tag> Unity </tag>
            
            <tag> Android </tag>
            
            <tag> iOS </tag>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.矩阵</title>
      <link href="/2020/09/23/3d-shu-xue/3.ju-zhen/"/>
      <url>/2020/09/23/3d-shu-xue/3.ju-zhen/</url>
      
        <content type="html"><![CDATA[<blockquote><p>行和列的形式组织数字块。</p></blockquote><ul><li><p>行列相同的矩阵--- <code>方阵</code> <span class="math display">\[\begin{bmatrix}m_{11}&amp;m_{12}&amp;m_{13}\\m_{21}&amp;m_{22}&amp;m_{23}\\m_{31}&amp;m_{32}&amp;m_{33}\end{bmatrix}\]</span></p><ul><li>对角矩阵，非对角线都为0，对角线可0可非0的<strong><code>特殊方阵</code></strong></li></ul><p><span class="math display">\[\begin{bmatrix}m_{11}&amp;0&amp;0\\0&amp;m_{22}&amp;0\\0&amp;0&amp;m_{33}\end{bmatrix}\]</span></p><ul><li>单位矩阵<strong>I</strong>，对角线元素为1的<strong><code>特殊对角矩阵</code></strong> <span class="math display">\[\begin{bmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\end{bmatrix}\]</span></li></ul></li><li><p>单行单列矩阵---<code>向量</code> <span class="math display">\[行矩阵(向量) \begin{bmatrix}m_{11}&amp;m_{12}&amp;m_{13}\end{bmatrix}\]</span></p><p><span class="math display">\[列矩阵(向量)\begin{bmatrix}m_{11}\\m_{12}\\m_{13}\end{bmatrix}\]</span></p></li><li><p>矩阵运算</p><ul><li>矩阵转置</li></ul><p><span class="math display">\[M^{T}_{ij} = M_{ji}\]</span></p><p><span class="math display">\[例如： \begin{bmatrix}1&amp;2\\3&amp;4\\5&amp;6\end{bmatrix}^T =\begin{bmatrix}1&amp;3 &amp;5\\2&amp;4&amp;6\end{bmatrix}\]</span></p><ul><li><p>标量与矩阵乘法，标量与矩阵每个元素相乘。 <span class="math display">\[k\begin{bmatrix}m_{11}&amp;m_{12}&amp;m_{13}\\m_{21}&amp;m_{22}&amp;m_{23}\\m_{31}&amp;m_{32}&amp;m_{33}\end{bmatrix}=\begin{bmatrix}km_{11}&amp;km_{12}&amp;km_{13}\\km_{21}&amp;km_{22}&amp;km_{23}\\km_{31}&amp;km_{32}&amp;km_{33}\end{bmatrix}\]</span></p></li><li><p>矩阵和矩阵乘法，<strong>A</strong><strong>B</strong>矩阵相乘，前提是 <strong>A的列必须等于B的行</strong>， 结果为 A行B列的矩阵。 <span class="math display">\[C_{ij} = \sum_{k=1}^{n}a_{ik}b_{ki}, n为 a的列，b的行\]</span> a的 i行 对应乘以 b的j列，然后求和 作为 ij的值。 <span class="math display">\[例如：\begin{bmatrix}a_{11}&amp;a_{12}&amp;a_{13}\\a_{21}&amp;a_{22}&amp;a_{23}\end{bmatrix}\begin{bmatrix}b_{11}&amp;b_{12}\\b_{21}&amp;b_{22}\\b_{31}&amp;b_{32}\end{bmatrix}= \begin{bmatrix}a_{11}b_{11}+a_{12}b_{21} + a_{13}b_{31}&amp;a_{11}b_{12}+a_{12}b_{22} + a_{13}b_{32}\\a_{21}b_{11}+a_{22}b_{21} + a_{23}b_{31}&amp;a_{21}b_{12}+a_{22}b_{22} + a_{23}b_{32}\end{bmatrix}\]</span></p><p><span class="math display">\[例如：\begin{bmatrix}1&amp;3&amp;5\\7&amp;9&amp;11\end{bmatrix}\begin{bmatrix}2&amp;4\\6&amp;8\\10&amp;12\end{bmatrix}= \begin{bmatrix}1*2+3 *6 + 5*10&amp;1*4 + 3*8 + 5*12\\7*2 + 9* 6 + 11 * 10&amp;7*4 + 9*8 + 11 * 12\end{bmatrix}= \begin{bmatrix}70 &amp; 88\\178 &amp; 316\end{bmatrix}\]</span></p></li><li><p>任意矩阵 <code>M</code>乘以方阵 <code>S</code> 等于原矩阵， <span class="math display">\[MI = IM= M\]</span></p></li></ul></li><li><p>矩阵乘法<code>满足结合律（标量也适用）</code>，<code>不满足交换律</code>,标量满足交换律，<code>矩阵相乘的转置 等于每个转置的乘法</code></p></li><li><p>矩阵几何解释</p><ul><li>旋转</li><li>缩放</li><li>投影</li><li>镜像</li><li>仿射</li></ul></li><li><p>矩阵变换向量的过程：</p><ul><li><p>例如 [1, -3, -4] ,可理解为 [0,0,0] 先位移 [1,0,0], 再位移[0,-3,0] ，再位移 [0,0,-4] <span class="math display">\[\begin{bmatrix} 1 \\-3\\ -4 \end{bmatrix} = \begin{bmatrix} 1 \\0 \\0\end{bmatrix} + \begin{bmatrix} 0 \\-3 \\0 \end{bmatrix} +\begin{bmatrix} 0 \\0 \\-4 \end{bmatrix}\]</span></p></li><li><p>对于任意的向量 <code>v</code>都能协成 <code>'拓展'</code>形式<span class="math display">\[v = \begin{bmatrix} x \\y\\ z \end{bmatrix} = x\begin{bmatrix} 1 \\0 \\0\end{bmatrix} + y\begin{bmatrix} 0 \\1 \\0 \end{bmatrix} +z\begin{bmatrix} 0 \\0 \\1 \end{bmatrix}   【1】\]</span></p></li><li><p>如果把公式 【1】的单位向量分别用<strong>p,g,r（基向量需要线性无关）</strong> 代替，则可写成 <span class="math display">\[v = xp + yg+ zr 【2】\]</span></p></li><li><p>将向量表示为基向量的线性组和 <span class="math display">\[M = \begin{bmatrix} p \\g\\ r \end{bmatrix} = \begin{bmatrix} p_x &amp;p_y &amp; p_z \\g_x&amp;g_y&amp;g_z \\r_x&amp;r_y&amp;r_z \end{bmatrix}【3】\]</span></p></li><li><p>使用公式【3】M展开公式【2】 <span class="math display">\[\begin{bmatrix} x &amp;y&amp;z \end{bmatrix}\ \begin{bmatrix} p_x &amp;p_y &amp; p_z \\g_x&amp;g_y&amp;g_z \\r_x&amp;r_y&amp;r_z \end{bmatrix}= \begin{bmatrix}xp_x + yg_x +zr_x &amp; xp_y + yg_y +zr_y &amp; xp_z + yg_z + zr_z\end{bmatrix}== xp + yg+ zr【4】\]</span></p></li><li><p>证明【4】最后一步，又因为<strong>M</strong>为基向量的展开式，所以 <span class="math display">\[\begin{bmatrix} x &amp;y&amp;z \end{bmatrix}\ \begin{bmatrix} p_x &amp;p_y &amp; p_z \\g_x&amp;g_y&amp;g_z \\r_x&amp;r_y&amp;r_z \end{bmatrix}= \begin{bmatrix} x &amp;y&amp;z \end{bmatrix}\ \begin{bmatrix} p \\g\\r \end{bmatrix}\]</span></p><p><span class="math display">\[所以 \begin{bmatrix}xp_x + yg_x +zr_x &amp; xp_y + yg_y +zr_y &amp; xp_z + yg_z + zr_z\end{bmatrix} = xp + yg+ zr\]</span></p></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.变换</title>
      <link href="/2020/09/23/3d-shu-xue/4.bian-huan/"/>
      <url>/2020/09/23/3d-shu-xue/4.bian-huan/</url>
      
        <content type="html"><![CDATA[<ol type="1"><li><p>旋转</p><ol type="1"><li><p>2D旋转</p><p><img src="/imgs/rotate2d.png" style="zoom:80%;"> <span class="math display">\[2d构造矩阵：  R(\theta) = \begin{bmatrix} p^` \\q^` \end{bmatrix} =\begin{bmatrix} \cos\theta &amp; \sin\theta\\-\sin\theta &amp;\cos\theta\end{bmatrix}, p 为x轴旋转， q为y轴旋转。\]</span></p></li><li><p>3D旋转，<code>绕轴旋转</code></p><ol type="1"><li><p>区分旋转方向，<code>左手法则，手握旋转轴，拇指朝向正方向，四指绕向为正</code></p><table><thead><tr class="header"><th style="text-align: left;"></th><th style="text-align: center;">左手坐标系</th><th style="text-align: center;">右手坐标系</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">从哪边看</td><td style="text-align: center;">正方向|负方向</td><td style="text-align: center;">正方向| 负方向</td></tr><tr class="even"><td style="text-align: left;">从负端向正端看</td><td style="text-align: center;">逆时针|顺时针</td><td style="text-align: center;">顺时针|逆时针</td></tr><tr class="odd"><td style="text-align: left;">从正端向负端看</td><td style="text-align: center;">顺时针|逆时针</td><td style="text-align: center;">逆时针|顺时针</td></tr></tbody></table></li><li><p>绕着x轴旋转，(此时等于旋转 yz组成的2d笛卡尔坐标系，而x轴不变，因此构造矩阵如下：）</p><p><img src="/imgs\rotate3d.png" style="zoom:80%;"> <span class="math display">\[绕x旋转的构造矩阵：  R(\theta) = \begin{bmatrix} p^`\\q^` \\r^`\end{bmatrix} = \begin{bmatrix} 1&amp;0&amp;0\\0&amp;\cos\theta &amp;\sin\theta\\0&amp;-\sin\theta &amp;\cos\theta \end{bmatrix}, p为x轴旋转， q为y轴旋转,r为z轴旋转。\]</span><br></p></li><li><p>绕y旋转类似，(此时等于旋转 xz组成的2d笛卡尔坐标系，而y轴不变，因此构造矩阵如下：） <span class="math display">\[绕y旋转的构造矩阵：  R(\theta) = \begin{bmatrix} p^`\\q^` \\r^`\end{bmatrix} = \begin{bmatrix}\cos\theta&amp;0&amp;-\sin\theta\\0&amp; 1&amp;0 \\\sin\theta &amp;0&amp;\cos\theta \end{bmatrix}, p 为x轴旋转，q为y轴旋转,r为z轴旋转。\]</span></p></li><li><p>绕z旋转类似，(此时等于旋转 xy组成的2d笛卡尔坐标系，而z轴不变，因此构造矩阵如下：） <span class="math display">\[绕y旋转的构造矩阵：  R(\theta) = \begin{bmatrix} p^`\\q^` \\r^`\end{bmatrix} = \begin{bmatrix}\cos\theta&amp;\sin\theta&amp;0\\-\sin\theta &amp;\cos\theta &amp;0 \\0&amp; 0&amp; 1\end{bmatrix}, p 为x轴旋转， q为y轴旋转,r为z轴旋转。\]</span><br></p></li><li><p>绕<strong>任意方向，不依赖旋转轴</strong>旋转，原理类似，忽略推到，公式如下：<span class="math display">\[R(n, \theta),代表 绕n方向旋转 \theta.\]</span><br><span class="math display">\[R(n,\theta) = \begin{bmatrix} p^`\\q^` \\r^` \end{bmatrix} =\begin{bmatrix}n_x^2(1-\cos\theta)+   \cos\theta&amp;n_xn_y(1-\cos\theta)+n_z\sin\theta&amp;n_xn_z(1-\cos\theta)-n_y\sin\theta\\n_xn_y(1-\cos\theta)-n_x\sin\theta&amp; n_y^2(1-\cos\theta)+   \cos\theta&amp;n_yn_z(1-\cos\theta)-n_x\sin\theta\\n_xn_z(1-\cos\theta)+n_y\sin\theta&amp;n_yn_z(1-\cos\theta)-n_x\sin\theta&amp;n_z^2(1-\cos\theta)+    \cos\theta\\\end{bmatrix}\]</span></p></li></ol></li></ol></li><li><p>缩放</p><ol type="1"><li><p>沿坐标轴缩放 <span class="math display">\[S(k_x, k_y, k_z) = \begin{bmatrix}k_x &amp; 0 &amp;0\\0&amp;k_y&amp;0\\0&amp;0&amp;k_z\end{bmatrix}\]</span></p></li><li><p>沿<strong>任意方向，不依赖旋转轴</strong>缩放 <span class="math display">\[R(n, k),代表 绕n方向缩放 k.\]</span></p><p><span class="math display">\[S(n,k) = \begin{bmatrix} p^`\\q^` \\r^` \end{bmatrix} = \begin{bmatrix}1+(k-1)n_x^2&amp; (k-1)n_xn_y&amp; (k-1)n_xn_z\\(k-1)n_xn_y&amp; 1+(k-1)n_y^2&amp; (k-1)n_yn_z\\(k-1)n_xn_z&amp; (k-1)n_zn_y&amp; 1+(k-1)n_z^2\end{bmatrix}\]</span></p></li></ol></li><li><p>正交投影 &gt;一般来说投影意味着降维操作，例如3d赋值给2d，抛弃z。（正交、平行、透视投影）</p><ol type="1"><li>向x轴投影，保留x为1， 舍弃部分置0 <span class="math display">\[P_x = S(\begin{bmatrix}0&amp;1\end{bmatrix} ,0) = \begin{bmatrix}1&amp;0\\0&amp;0 \end{bmatrix}\]</span></li><li>同理y轴投影 <span class="math display">\[P_y = S(\begin{bmatrix}1&amp;0\end{bmatrix} ,0) = \begin{bmatrix}0&amp;0\\0&amp;1 \end{bmatrix}\]</span></li><li>向xy投影 <span class="math display">\[P_{xy} = S(\begin{bmatrix}0&amp;0&amp;1\end{bmatrix} ,0) =\begin{bmatrix} 1&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;0\end{bmatrix}\]</span></li><li>向xz投影 <span class="math display">\[P_{xz} = S(\begin{bmatrix}0&amp;1&amp;0\end{bmatrix} ,0) =\begin{bmatrix} 1&amp;0&amp;0\\0&amp;0&amp;0\\0&amp;0&amp;1\end{bmatrix}\]</span><br></li><li>向yz投影 <span class="math display">\[P_{yz} = S(\begin{bmatrix}1&amp;0&amp;0\end{bmatrix} ,0) =\begin{bmatrix} 0&amp;0&amp;0\\0&amp;1&amp;0\\0&amp;0&amp;1\end{bmatrix}\]</span></li><li>向任意平面投影 <span class="math display">\[P(n) = S(n, 0), n代表任意直线/平面\]</span><br><span class="math display">\[P(n) = S(n,0) = \begin{bmatrix}1+(0-1)n_x^2&amp; (0-1)n_xn_y&amp; (0-1)n_xn_z\\(0-1)n_xn_y&amp; 1+(0-1)n_y^2&amp; (0-1)n_yn_z\\(0-1)n_xn_z&amp; (0-1)n_zn_y&amp; 1+(0-1)n_z^2\end{bmatrix}\]</span></li></ol></li><li><p>镜像 <code>翻折</code></p><ol type="1"><li>2D <span class="math display">\[P(n) = S(n,-1) = \begin{bmatrix}1+(-1-1)n_x^2&amp; (-1-1)n_xn_y\\(-1-1)n_xn_y&amp; 1+(-1-1)n_y^2\\(-1-1)n_xn_z&amp; (-1-1)n_zn_y\end{bmatrix}\]</span><br></li><li>3D <span class="math display">\[P(n) = S(n,-1) = \begin{bmatrix}1+(-1-1)n_x^2&amp; (-1-1)n_xn_y&amp; (-1-1)n_xn_z\\(-1-1)n_xn_y&amp; 1+(-1-1)n_y^2&amp; (-1-1)n_yn_z\\(-1-1)n_xn_z&amp; (-1-1)n_zn_y&amp; 1+(-1-1)n_z^2\end{bmatrix}= \begin{bmatrix}1-2n_x^2&amp; -2n_xn_y&amp;-2n_xn_z\\-2n_xn_y&amp; -2n_y^2&amp;-2n_yn_z\\-2n_xn_z&amp; -2n_zn_y&amp;-2n_z^2\\\end{bmatrix}\]</span></li></ol></li><li><p>切变，<code>（非均匀地拉伸它，角度发生变化，面积和体积不变）</code><img src="/imgs\tbian.png" style="zoom:80%;"><br><span class="math display">\[x^` = x + sy,  s为变化因子。 H_x(s)=\begin{bmatrix}1&amp;0\\s&amp;1\end{bmatrix}, x随着y被切变，s控制方向和量\]</span></p><p><span class="math display">\[另一种变换 H_y。 H_y(s) =\begin{bmatrix}1&amp;s\\0&amp;1\end{bmatrix}, x随着y被切变，s控制方向和量\]</span></p></li><li><p>3D切变</p><blockquote><p>3d中的切变是取出一个坐标乘以不同的因子，再加到其他坐标上，H_{xy}意义是 xy坐标被z改变，</p></blockquote><p><span class="math display">\[H_{xy}(s)=\begin{bmatrix}1&amp;0&amp;0\\0&amp;1&amp;0\\s&amp;t&amp;1\end{bmatrix}\]</span></p><p><span class="math display">\[H_{xz}(s)=\begin{bmatrix}1&amp;0&amp;0\\s&amp;1&amp;t\\0&amp;0&amp;1\end{bmatrix}\]</span></p><p><span class="math display">\[H_{yz}(s)=\begin{bmatrix}1&amp;s&amp;t\\0&amp;1&amp;0\\0&amp;0&amp;1\end{bmatrix}\]</span></p></li><li><p>组合变换</p><ol type="1"><li><p>坐标系组合变换 <span class="math display">\[P_{世界} = P_{物体}M_{物体\rightarrow世界}\]</span></p><p><span class="math display">\[P_{相机} = P_{世界}M_{世界\rightarrow相机} =(P_{物体}M_{物体\rightarrow世界})M_{世界\rightarrow相机} =P_{物体}(M_{物体\rightarrow世界}M_{世界\rightarrow相机})\]</span></p><p><span class="math display">\[M_{物体\rightarrow相机} = M_{物体\rightarrow世界}M_{世界\rightarrow相机}\]</span></p><p><span class="math display">\[P_{相机} =P_{物体}M_{物体\rightarrow相机}\]</span></p></li></ol></li><li><p>变换分类</p><ol type="1"><li>线性变换</li><li>仿射变换（线性变换超集）</li><li>可逆变换 （奇异矩阵不可逆，行列式不为0）</li><li>等角变换 (夹角大小方向不变,所有等角变换都是可逆，仿射变换)</li><li>正交变换 (垂直变换，切不缩放)</li><li>刚体变换</li></ol></li><li><p>4x4齐次矩阵</p></li><li><p>矩阵形式的优缺点</p><ol type="1"><li>优点<ol type="1"><li>可立即变换</li><li>被图形api使用</li><li>多个角位移连接</li><li>矩阵的逆</li></ol></li><li>缺点<ol type="1"><li>占用更多内存</li><li>使用难度</li><li>可能多余数据的累赘</li></ol></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.欧拉角和四元数</title>
      <link href="/2020/09/23/3d-shu-xue/5.ou-la-jiao/"/>
      <url>/2020/09/23/3d-shu-xue/5.ou-la-jiao/</url>
      
        <content type="html"><![CDATA[<p><img src="/imgs\ola.png" style="zoom:80%;"></p><ul><li><p>欧拉角</p><ul><li>欧拉角 是将旋转分解成三个相互垂直的分量，分别操作。三个分量分别是heading、pitch、bank(<strong>指的是惯性到物体坐标系</strong>）。还有一种常用的名字roll、pitch、yaw，与heading、pitch、bank顺序相反（<strong>物体到惯性坐标系</strong>），</li><li>先后次序不重要</li><li>欧拉角 优缺点<ul><li>优点<ul><li>使用容易</li><li>简洁的表达式</li><li>任意三个数都合法</li></ul></li><li>缺点<ul><li>给定方位的表达式不唯一（360周期倍结果一致，数值不同。pitch135度等价于heading 180，pitch45， 再bank 180），著名<code>万向锁(至今没有简单的解决方案)</code></li><li>两个角度间的插值困难（）</li></ul></li></ul></li><li>限制 heading和bank在（-180， +180）之间， pitch 在(-90， 90)</li></ul></li><li><p>四元数</p></li><li><p>各种方法比较</p><table><colgroup><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"><col style="width: 25%"></colgroup><thead><tr class="header"><th>任务/性质</th><th>矩阵</th><th>欧拉角</th><th>四元数</th></tr></thead><tbody><tr class="odd"><td>在坐标系间旋转点</td><td>能</td><td>不能（需要转换到矩阵）</td><td>不能（需要转换到矩阵）</td></tr><tr class="even"><td>连接或增量旋转</td><td>能，比四元数慢，还需要小心矩阵蠕变的情况</td><td>不能</td><td>能，比矩阵快</td></tr><tr class="odd"><td>插值</td><td>不能</td><td>能，遭遇万向锁和其他问题</td><td>Slerp 提供平滑插值</td></tr><tr class="even"><td>难易程度</td><td>难</td><td>易</td><td>难</td></tr><tr class="odd"><td>储存</td><td>9个数</td><td>3个数</td><td>4个数</td></tr><tr class="even"><td>变换唯一性</td><td>唯一</td><td>不唯一，多种或者无数种</td><td>不唯一，有两种，他们相互为负</td></tr><tr class="odd"><td>可能导致非法</td><td>矩阵蠕变</td><td>合法</td><td>可能出现误差累计，从而产生非法四元数</td></tr></tbody></table></li><li><p>各种方法之间的转换</p><ul><li><p>欧拉角到矩阵</p><blockquote><p>H、P、B分别为heading、pitch、bank的旋转矩阵，他们分别绕y，x，z左手法则旋转。设 heading、pitch、bank 旋转角分量分别是 h、p、b则旋转矩阵为 反向操作，</p></blockquote></li></ul></li><li><p>欧拉角——&gt; 矩阵</p><ul><li>惯性——&gt;物体</li></ul><p><span class="math display">\[  H = R_y(-h)= \begin{bmatrix}   \cos(-h)&amp; 0&amp; -\sin(-h)\\   0&amp; 1&amp; 0\\   \sin(-h)&amp; 0&amp; \cos(-h)  \end{bmatrix}= \begin{bmatrix}   \cos(h)&amp; 0&amp; \sin(h)\\   0&amp; 1&amp; 0\\   -\sin(h)&amp; 0&amp; \cos(h)  \end{bmatrix}  \]</span></p><p><span class="math display">\[  P = R_x(-p)= \begin{bmatrix}   1&amp; 0&amp; 0\\  0&amp; \cos(-p)&amp; \sin(-p)\\   0&amp;-\sin(-p)&amp; \cos(-p)  \end{bmatrix}= \begin{bmatrix}   0&amp; 1&amp; 0\\  0&amp;\cos(p)&amp; -\sin(p)\\  0&amp; \sin(p)&amp;  \cos(p)  \end{bmatrix}  \]</span></p><p><span class="math display">\[  B = R_z(-b)= \begin{bmatrix}  \cos(-b)&amp; \sin(-b)&amp;0\\   -\sin(-b)&amp; \cos(-b)&amp;0\\   0&amp; 0&amp; 1  \end{bmatrix}= \begin{bmatrix}  \cos(b)&amp; -\sin(b)&amp;0\\  \sin(b)&amp;  \cos(b)&amp;0\\   0&amp; 0&amp; 1  \end{bmatrix}  \]</span></p><p><span class="math display">\[  M_{惯性\rightarrow物体} = HPB =\begin{bmatrix}   \cos(h)&amp; 0&amp; \sin(h)\\   0&amp; 1&amp; 0\\   -\sin(h)&amp; 0&amp; \cos(h)  \end{bmatrix}\begin{bmatrix}   0&amp; 1&amp; 0\\  0&amp;\cos(p)&amp; -\sin(p)\\  0&amp; \sin(p)&amp;  \cos(p)  \end{bmatrix}\begin{bmatrix}  \cos(b)&amp; -\sin(b)&amp;0\\  \sin(b)&amp;  \cos(b)&amp;0\\   0&amp; 0&amp; 1  \end{bmatrix}  \]</span></p><p><span class="math display">\[  =\begin{bmatrix}  \cos(h)\cos(b) + \sin(h)\sin(p)\sin(b)&amp; -\cos(h)\sin(b) +\sin(h)\sin(p)\sin(b)&amp; \sin(h)\cos(p)\\  \sin(b)\cos(p)                        &amp;\cos(b)\sin(p)                         &amp; -\sin(p)\\  \sin(h)\cos(b) + \cos(h)\sin(p)\sin(b)&amp; \sin(b)\sin(h) +\cos(h)\cos(p)\cos(b)&amp; \cos(h)\cos(p)\\  \end{bmatrix}  \]</span></p><ul><li><p>物体——&gt;惯性</p></li><li><p>矩阵 ——&gt; 欧拉角</p></li><li><p>四元数 ——&gt; 矩阵</p></li><li><p>矩阵 ——&gt; 四元数</p></li><li><p>欧拉角 ——&gt; 四元数</p></li><li><p>四元数 ——&gt; 欧拉角</p></li><li><p>代码实现 EulerAngles、Quaternion、RotationMatrix、Matrix4x3</p><ul><li>todo</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.几何图元</title>
      <link href="/2020/09/23/3d-shu-xue/6.ji-he-tu-yuan/"/>
      <url>/2020/09/23/3d-shu-xue/6.ji-he-tu-yuan/</url>
      
        <content type="html"><![CDATA[<blockquote><p>图元一般方法、直线和射线、球和圆、矩形边界框、平面、三角形、多边形。</p></blockquote><ul><li><p>表示形式</p><ul><li>隐式表示， 如方程式，函数</li><li>显式表示，如线段的起点和终点。</li></ul></li><li><p>直线和射线</p><ul><li>直线 两个方向无限延伸。</li><li>线段 直线的有限部分，有两个端点</li><li>射线一个方向无限延伸，<strong>计算机几何中，定义射线是有向线段</strong></li></ul></li><li><p>矩形边界框 AABB， <span class="math display">\[x_{min} &lt; x &lt; x_{max},    y_{min} &lt; y &lt; y_{max},  z_{min}&lt; z &lt; z_{max},\]</span></p></li><li><p>平面方程</p><ul><li><p>隐式定义 p 和法线n</p></li><li><p>三点定义 p1、p2、p3</p></li></ul></li><li><p>点到平面距离。 点和平面内一点的向量，向法线投影的长度。</p></li><li><p>三角形面积</p><ul><li><p>一班算法 <span class="math display">\[    s = bh/2， b底边，h为高  \]</span></p></li><li><p>海伦公式：<br><span class="math display">\[    s = \frac{l_1+l_2+l_3}{2}, l为边长， s为周长一半。  \]</span></p><p><span class="math display">\[  面积 A =\sqrt{s(s - l_1)(s-l_2)(s-l_3)}  \]</span></p></li></ul></li><li><p>特殊点：</p><ul><li>重心，三条边中线交点，也叫质心。</li><li>内心，到三条边距离相等</li><li>外心 到三个顶点距离相等。</li></ul></li><li><p>凹凸多边形判断 todo</p></li><li><p>几何检测</p></li><li><p>三角网格</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.几何图元</title>
      <link href="/2020/09/23/3d-shu-xue/7.tu-xing-shu-xue/"/>
      <url>/2020/09/23/3d-shu-xue/7.tu-xing-shu-xue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 3d数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 引擎 </tag>
            
            <tag> 3d数学 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
